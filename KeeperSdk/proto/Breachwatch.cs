// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: breachwatch.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BreachWatch {

  /// <summary>Holder for reflection information generated from breachwatch.proto</summary>
  public static partial class BreachwatchReflection {

    #region Descriptor
    /// <summary>File descriptor for breachwatch.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BreachwatchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFicmVhY2h3YXRjaC5wcm90bxILQnJlYWNoV2F0Y2gioQEKGEJyZWFjaFdh",
            "dGNoUmVjb3JkUmVxdWVzdBIRCglyZWNvcmRVaWQYASABKAwSFQoNZW5jcnlw",
            "dGVkRGF0YRgCIAEoDBI9ChNicmVhY2hXYXRjaEluZm9UeXBlGAMgASgOMiAu",
            "QnJlYWNoV2F0Y2guQnJlYWNoV2F0Y2hJbmZvVHlwZRIcChR1cGRhdGVVc2Vy",
            "V2hvU2Nhbm5lZBgEIAEoCCJ6ChhCcmVhY2hXYXRjaFVwZGF0ZVJlcXVlc3QS",
            "RwoYYnJlYWNoV2F0Y2hSZWNvcmRSZXF1ZXN0GAEgAygLMiUuQnJlYWNoV2F0",
            "Y2guQnJlYWNoV2F0Y2hSZWNvcmRSZXF1ZXN0EhUKDWVuY3J5cHRlZERhdGEY",
            "AiABKAwiTAoXQnJlYWNoV2F0Y2hSZWNvcmRTdGF0dXMSEQoJcmVjb3JkVWlk",
            "GAEgASgMEg4KBnN0YXR1cxgCIAEoCRIOCgZyZWFzb24YAyABKAkiYgoZQnJl",
            "YWNoV2F0Y2hVcGRhdGVSZXNwb25zZRJFChdicmVhY2hXYXRjaFJlY29yZFN0",
            "YXR1cxgBIAMoCzIkLkJyZWFjaFdhdGNoLkJyZWFjaFdhdGNoUmVjb3JkU3Rh",
            "dHVzIjMKF0JyZWFjaFdhdGNoVG9rZW5SZXF1ZXN0EhgKEGJyZWFjaFdhdGNo",
            "VG9rZW4YASABKAwiTQoYQnJlYWNoV2F0Y2hUb2tlblJlc3BvbnNlEhgKEGJy",
            "ZWFjaFdhdGNoVG9rZW4YASABKAwSFwoPY2xpZW50RW5jcnlwdGVkGAIgASgI",
            "IlkKF0Fub255bWl6ZWRUb2tlblJlc3BvbnNlEhMKC2RvbWFpblRva2VuGAEg",
            "ASgMEhIKCmVtYWlsVG9rZW4YAiABKAwSFQoNcGFzc3dvcmRUb2tlbhgDIAEo",
            "DCIoCglIYXNoQ2hlY2sSDQoFaGFzaDEYASABKAwSDAoEZXVpZBgCIAEoDCJz",
            "ChhCcmVhY2hXYXRjaFN0YXR1c1JlcXVlc3QSFwoPYW5vbnltaXplZFRva2Vu",
            "GAEgASgMEikKCWhhc2hDaGVjaxgCIAMoCzIWLkJyZWFjaFdhdGNoLkhhc2hD",
            "aGVjaxITCgtyZW1vdmVkRXVpZBgDIAMoDCJBCgpIYXNoU3RhdHVzEg0KBWhh",
            "c2gxGAEgASgMEgwKBGV1aWQYAiABKAwSFgoOYnJlYWNoRGV0ZWN0ZWQYAyAB",
            "KAgiSAoZQnJlYWNoV2F0Y2hTdGF0dXNSZXNwb25zZRIrCgpoYXNoU3RhdHVz",
            "GAIgAygLMhcuQnJlYWNoV2F0Y2guSGFzaFN0YXR1cyJaChtFbnRlcnByaXNl",
            "UHVibGljS2V5UmVzcG9uc2USGwoTZW50ZXJwcmlzZVB1YmxpY0tleRgBIAEo",
            "DBIeChZlbnRlcnByaXNlRUNDUHVibGljS2V5GAIgASgMIiYKD0ZyZWVTY2Fu",
            "UmVxdWVzdBITCgtoYXNoZWRFbWFpbBgBIAEoDCJDChBGcmVlU2NhblJlc3Bv",
            "bnNlEhUKDWVtYWlsQnJlYWNoZXMYASABKAUSGAoQcGFzc3dvcmRCcmVhY2hl",
            "cxgCIAEoBSIgCg9QYWlkVXNlclJlcXVlc3QSDQoFZW1haWwYASABKAkiJAoQ",
            "UGFpZFVzZXJSZXNwb25zZRIQCghwYWlkVXNlchgBIAEoCCIkChNEZXRhaWxl",
            "ZFNjYW5SZXF1ZXN0Eg0KBWVtYWlsGAEgASgJIicKFlVzZU9uZVRpbWVUb2tl",
            "blJlcXVlc3QSDQoFdG9rZW4YASABKAwiZwoLQnJlYWNoRXZlbnQSDAoEc2l0",
            "ZRgBIAEoCRINCgVlbWFpbBgCIAEoCRIYChBwYXNzd29yZEluQnJlYWNoGAMg",
            "ASgIEgwKBGRhdGUYBCABKAkSEwoLZGVzY3JpcHRpb24YBSABKAkiiQEKF1Vz",
            "ZU9uZVRpbWVUb2tlblJlc3BvbnNlEhUKDWVtYWlsQnJlYWNoZXMYASABKAUS",
            "GAoQcGFzc3dvcmRCcmVhY2hlcxgCIAEoBRIuCgxicmVhY2hFdmVudHMYAyAD",
            "KAsyGC5CcmVhY2hXYXRjaC5CcmVhY2hFdmVudBINCgVlbWFpbBgEIAEoCSIt",
            "Cg9PbmVUaW1lVXNlVG9rZW4SDQoFZW1haWwYASABKAkSCwoDcGFkGAIgASgJ",
            "IjEKF0ZyZWVQYXNzd29yZFNjYW5SZXF1ZXN0EhYKDmhhc2hlZFBhc3N3b3Jk",
            "GAEgASgMIjQKGEZyZWVQYXNzd29yZFNjYW5SZXNwb25zZRIYChBwYXNzd29y",
            "ZEJyZWFjaGVzGAEgASgDKjkKE0JyZWFjaFdhdGNoSW5mb1R5cGUSCgoGUkVD",
            "T1JEEAASFgoSQUxURVJOQVRFX1BBU1NXT1JEEAFCJwoYY29tLmtlZXBlcnNl",
            "Y3VyaXR5LnByb3RvQgtCcmVhY2hXYXRjaGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::BreachWatch.BreachWatchInfoType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.BreachWatchRecordRequest), global::BreachWatch.BreachWatchRecordRequest.Parser, new[]{ "RecordUid", "EncryptedData", "BreachWatchInfoType", "UpdateUserWhoScanned" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.BreachWatchUpdateRequest), global::BreachWatch.BreachWatchUpdateRequest.Parser, new[]{ "BreachWatchRecordRequest", "EncryptedData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.BreachWatchRecordStatus), global::BreachWatch.BreachWatchRecordStatus.Parser, new[]{ "RecordUid", "Status", "Reason" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.BreachWatchUpdateResponse), global::BreachWatch.BreachWatchUpdateResponse.Parser, new[]{ "BreachWatchRecordStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.BreachWatchTokenRequest), global::BreachWatch.BreachWatchTokenRequest.Parser, new[]{ "BreachWatchToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.BreachWatchTokenResponse), global::BreachWatch.BreachWatchTokenResponse.Parser, new[]{ "BreachWatchToken", "ClientEncrypted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.AnonymizedTokenResponse), global::BreachWatch.AnonymizedTokenResponse.Parser, new[]{ "DomainToken", "EmailToken", "PasswordToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.HashCheck), global::BreachWatch.HashCheck.Parser, new[]{ "Hash1", "Euid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.BreachWatchStatusRequest), global::BreachWatch.BreachWatchStatusRequest.Parser, new[]{ "AnonymizedToken", "HashCheck", "RemovedEuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.HashStatus), global::BreachWatch.HashStatus.Parser, new[]{ "Hash1", "Euid", "BreachDetected" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.BreachWatchStatusResponse), global::BreachWatch.BreachWatchStatusResponse.Parser, new[]{ "HashStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.EnterprisePublicKeyResponse), global::BreachWatch.EnterprisePublicKeyResponse.Parser, new[]{ "EnterprisePublicKey", "EnterpriseECCPublicKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.FreeScanRequest), global::BreachWatch.FreeScanRequest.Parser, new[]{ "HashedEmail" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.FreeScanResponse), global::BreachWatch.FreeScanResponse.Parser, new[]{ "EmailBreaches", "PasswordBreaches" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.PaidUserRequest), global::BreachWatch.PaidUserRequest.Parser, new[]{ "Email" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.PaidUserResponse), global::BreachWatch.PaidUserResponse.Parser, new[]{ "PaidUser" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.DetailedScanRequest), global::BreachWatch.DetailedScanRequest.Parser, new[]{ "Email" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.UseOneTimeTokenRequest), global::BreachWatch.UseOneTimeTokenRequest.Parser, new[]{ "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.BreachEvent), global::BreachWatch.BreachEvent.Parser, new[]{ "Site", "Email", "PasswordInBreach", "Date", "Description" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.UseOneTimeTokenResponse), global::BreachWatch.UseOneTimeTokenResponse.Parser, new[]{ "EmailBreaches", "PasswordBreaches", "BreachEvents", "Email" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.OneTimeUseToken), global::BreachWatch.OneTimeUseToken.Parser, new[]{ "Email", "Pad" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.FreePasswordScanRequest), global::BreachWatch.FreePasswordScanRequest.Parser, new[]{ "HashedPassword" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BreachWatch.FreePasswordScanResponse), global::BreachWatch.FreePasswordScanResponse.Parser, new[]{ "PasswordBreaches" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BreachWatchInfoType {
    /// <summary>
    /// note: this also is used for master password where the recordUid is blank
    /// </summary>
    [pbr::OriginalName("RECORD")] Record = 0,
    /// <summary>
    /// for any user_auth passwords, including the passwords used through Pythia
    /// </summary>
    [pbr::OriginalName("ALTERNATE_PASSWORD")] AlternatePassword = 1,
  }

  #endregion

  #region Messages
  public sealed partial class BreachWatchRecordRequest : pb::IMessage<BreachWatchRecordRequest> {
    private static readonly pb::MessageParser<BreachWatchRecordRequest> _parser = new pb::MessageParser<BreachWatchRecordRequest>(() => new BreachWatchRecordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreachWatchRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchRecordRequest(BreachWatchRecordRequest other) : this() {
      recordUid_ = other.recordUid_;
      encryptedData_ = other.encryptedData_;
      breachWatchInfoType_ = other.breachWatchInfoType_;
      updateUserWhoScanned_ = other.updateUserWhoScanned_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchRecordRequest Clone() {
      return new BreachWatchRecordRequest(this);
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 2;
    private pb::ByteString encryptedData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "breachWatchInfoType" field.</summary>
    public const int BreachWatchInfoTypeFieldNumber = 3;
    private global::BreachWatch.BreachWatchInfoType breachWatchInfoType_ = global::BreachWatch.BreachWatchInfoType.Record;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BreachWatch.BreachWatchInfoType BreachWatchInfoType {
      get { return breachWatchInfoType_; }
      set {
        breachWatchInfoType_ = value;
      }
    }

    /// <summary>Field number for the "updateUserWhoScanned" field.</summary>
    public const int UpdateUserWhoScannedFieldNumber = 4;
    private bool updateUserWhoScanned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateUserWhoScanned {
      get { return updateUserWhoScanned_; }
      set {
        updateUserWhoScanned_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreachWatchRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreachWatchRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordUid != other.RecordUid) return false;
      if (EncryptedData != other.EncryptedData) return false;
      if (BreachWatchInfoType != other.BreachWatchInfoType) return false;
      if (UpdateUserWhoScanned != other.UpdateUserWhoScanned) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (BreachWatchInfoType != global::BreachWatch.BreachWatchInfoType.Record) hash ^= BreachWatchInfoType.GetHashCode();
      if (UpdateUserWhoScanned != false) hash ^= UpdateUserWhoScanned.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordUid);
      }
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedData);
      }
      if (BreachWatchInfoType != global::BreachWatch.BreachWatchInfoType.Record) {
        output.WriteRawTag(24);
        output.WriteEnum((int) BreachWatchInfoType);
      }
      if (UpdateUserWhoScanned != false) {
        output.WriteRawTag(32);
        output.WriteBool(UpdateUserWhoScanned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedData);
      }
      if (BreachWatchInfoType != global::BreachWatch.BreachWatchInfoType.Record) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BreachWatchInfoType);
      }
      if (UpdateUserWhoScanned != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreachWatchRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      if (other.BreachWatchInfoType != global::BreachWatch.BreachWatchInfoType.Record) {
        BreachWatchInfoType = other.BreachWatchInfoType;
      }
      if (other.UpdateUserWhoScanned != false) {
        UpdateUserWhoScanned = other.UpdateUserWhoScanned;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedData = input.ReadBytes();
            break;
          }
          case 24: {
            BreachWatchInfoType = (global::BreachWatch.BreachWatchInfoType) input.ReadEnum();
            break;
          }
          case 32: {
            UpdateUserWhoScanned = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BreachWatchUpdateRequest : pb::IMessage<BreachWatchUpdateRequest> {
    private static readonly pb::MessageParser<BreachWatchUpdateRequest> _parser = new pb::MessageParser<BreachWatchUpdateRequest>(() => new BreachWatchUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreachWatchUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchUpdateRequest(BreachWatchUpdateRequest other) : this() {
      breachWatchRecordRequest_ = other.breachWatchRecordRequest_.Clone();
      encryptedData_ = other.encryptedData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchUpdateRequest Clone() {
      return new BreachWatchUpdateRequest(this);
    }

    /// <summary>Field number for the "breachWatchRecordRequest" field.</summary>
    public const int BreachWatchRecordRequestFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BreachWatch.BreachWatchRecordRequest> _repeated_breachWatchRecordRequest_codec
        = pb::FieldCodec.ForMessage(10, global::BreachWatch.BreachWatchRecordRequest.Parser);
    private readonly pbc::RepeatedField<global::BreachWatch.BreachWatchRecordRequest> breachWatchRecordRequest_ = new pbc::RepeatedField<global::BreachWatch.BreachWatchRecordRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BreachWatch.BreachWatchRecordRequest> BreachWatchRecordRequest {
      get { return breachWatchRecordRequest_; }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 2;
    private pb::ByteString encryptedData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreachWatchUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreachWatchUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!breachWatchRecordRequest_.Equals(other.breachWatchRecordRequest_)) return false;
      if (EncryptedData != other.EncryptedData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= breachWatchRecordRequest_.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      breachWatchRecordRequest_.WriteTo(output, _repeated_breachWatchRecordRequest_codec);
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += breachWatchRecordRequest_.CalculateSize(_repeated_breachWatchRecordRequest_codec);
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreachWatchUpdateRequest other) {
      if (other == null) {
        return;
      }
      breachWatchRecordRequest_.Add(other.breachWatchRecordRequest_);
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            breachWatchRecordRequest_.AddEntriesFrom(input, _repeated_breachWatchRecordRequest_codec);
            break;
          }
          case 18: {
            EncryptedData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BreachWatchRecordStatus : pb::IMessage<BreachWatchRecordStatus> {
    private static readonly pb::MessageParser<BreachWatchRecordStatus> _parser = new pb::MessageParser<BreachWatchRecordStatus>(() => new BreachWatchRecordStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreachWatchRecordStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchRecordStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchRecordStatus(BreachWatchRecordStatus other) : this() {
      recordUid_ = other.recordUid_;
      status_ = other.status_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchRecordStatus Clone() {
      return new BreachWatchRecordStatus(this);
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreachWatchRecordStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreachWatchRecordStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordUid != other.RecordUid) return false;
      if (Status != other.Status) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordUid);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreachWatchRecordStatus other) {
      if (other == null) {
        return;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BreachWatchUpdateResponse : pb::IMessage<BreachWatchUpdateResponse> {
    private static readonly pb::MessageParser<BreachWatchUpdateResponse> _parser = new pb::MessageParser<BreachWatchUpdateResponse>(() => new BreachWatchUpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreachWatchUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchUpdateResponse(BreachWatchUpdateResponse other) : this() {
      breachWatchRecordStatus_ = other.breachWatchRecordStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchUpdateResponse Clone() {
      return new BreachWatchUpdateResponse(this);
    }

    /// <summary>Field number for the "breachWatchRecordStatus" field.</summary>
    public const int BreachWatchRecordStatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BreachWatch.BreachWatchRecordStatus> _repeated_breachWatchRecordStatus_codec
        = pb::FieldCodec.ForMessage(10, global::BreachWatch.BreachWatchRecordStatus.Parser);
    private readonly pbc::RepeatedField<global::BreachWatch.BreachWatchRecordStatus> breachWatchRecordStatus_ = new pbc::RepeatedField<global::BreachWatch.BreachWatchRecordStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BreachWatch.BreachWatchRecordStatus> BreachWatchRecordStatus {
      get { return breachWatchRecordStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreachWatchUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreachWatchUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!breachWatchRecordStatus_.Equals(other.breachWatchRecordStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= breachWatchRecordStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      breachWatchRecordStatus_.WriteTo(output, _repeated_breachWatchRecordStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += breachWatchRecordStatus_.CalculateSize(_repeated_breachWatchRecordStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreachWatchUpdateResponse other) {
      if (other == null) {
        return;
      }
      breachWatchRecordStatus_.Add(other.breachWatchRecordStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            breachWatchRecordStatus_.AddEntriesFrom(input, _repeated_breachWatchRecordStatus_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BreachWatchTokenRequest : pb::IMessage<BreachWatchTokenRequest> {
    private static readonly pb::MessageParser<BreachWatchTokenRequest> _parser = new pb::MessageParser<BreachWatchTokenRequest>(() => new BreachWatchTokenRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreachWatchTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchTokenRequest(BreachWatchTokenRequest other) : this() {
      breachWatchToken_ = other.breachWatchToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchTokenRequest Clone() {
      return new BreachWatchTokenRequest(this);
    }

    /// <summary>Field number for the "breachWatchToken" field.</summary>
    public const int BreachWatchTokenFieldNumber = 1;
    private pb::ByteString breachWatchToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BreachWatchToken {
      get { return breachWatchToken_; }
      set {
        breachWatchToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreachWatchTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreachWatchTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BreachWatchToken != other.BreachWatchToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BreachWatchToken.Length != 0) hash ^= BreachWatchToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BreachWatchToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BreachWatchToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BreachWatchToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BreachWatchToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreachWatchTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.BreachWatchToken.Length != 0) {
        BreachWatchToken = other.BreachWatchToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BreachWatchToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BreachWatchTokenResponse : pb::IMessage<BreachWatchTokenResponse> {
    private static readonly pb::MessageParser<BreachWatchTokenResponse> _parser = new pb::MessageParser<BreachWatchTokenResponse>(() => new BreachWatchTokenResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreachWatchTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchTokenResponse(BreachWatchTokenResponse other) : this() {
      breachWatchToken_ = other.breachWatchToken_;
      clientEncrypted_ = other.clientEncrypted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchTokenResponse Clone() {
      return new BreachWatchTokenResponse(this);
    }

    /// <summary>Field number for the "breachWatchToken" field.</summary>
    public const int BreachWatchTokenFieldNumber = 1;
    private pb::ByteString breachWatchToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BreachWatchToken {
      get { return breachWatchToken_; }
      set {
        breachWatchToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientEncrypted" field.</summary>
    public const int ClientEncryptedFieldNumber = 2;
    private bool clientEncrypted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClientEncrypted {
      get { return clientEncrypted_; }
      set {
        clientEncrypted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreachWatchTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreachWatchTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BreachWatchToken != other.BreachWatchToken) return false;
      if (ClientEncrypted != other.ClientEncrypted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BreachWatchToken.Length != 0) hash ^= BreachWatchToken.GetHashCode();
      if (ClientEncrypted != false) hash ^= ClientEncrypted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BreachWatchToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BreachWatchToken);
      }
      if (ClientEncrypted != false) {
        output.WriteRawTag(16);
        output.WriteBool(ClientEncrypted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BreachWatchToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BreachWatchToken);
      }
      if (ClientEncrypted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreachWatchTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.BreachWatchToken.Length != 0) {
        BreachWatchToken = other.BreachWatchToken;
      }
      if (other.ClientEncrypted != false) {
        ClientEncrypted = other.ClientEncrypted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BreachWatchToken = input.ReadBytes();
            break;
          }
          case 16: {
            ClientEncrypted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnonymizedTokenResponse : pb::IMessage<AnonymizedTokenResponse> {
    private static readonly pb::MessageParser<AnonymizedTokenResponse> _parser = new pb::MessageParser<AnonymizedTokenResponse>(() => new AnonymizedTokenResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnonymizedTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnonymizedTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnonymizedTokenResponse(AnonymizedTokenResponse other) : this() {
      domainToken_ = other.domainToken_;
      emailToken_ = other.emailToken_;
      passwordToken_ = other.passwordToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnonymizedTokenResponse Clone() {
      return new AnonymizedTokenResponse(this);
    }

    /// <summary>Field number for the "domainToken" field.</summary>
    public const int DomainTokenFieldNumber = 1;
    private pb::ByteString domainToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DomainToken {
      get { return domainToken_; }
      set {
        domainToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "emailToken" field.</summary>
    public const int EmailTokenFieldNumber = 2;
    private pb::ByteString emailToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EmailToken {
      get { return emailToken_; }
      set {
        emailToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passwordToken" field.</summary>
    public const int PasswordTokenFieldNumber = 3;
    private pb::ByteString passwordToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PasswordToken {
      get { return passwordToken_; }
      set {
        passwordToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnonymizedTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnonymizedTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DomainToken != other.DomainToken) return false;
      if (EmailToken != other.EmailToken) return false;
      if (PasswordToken != other.PasswordToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DomainToken.Length != 0) hash ^= DomainToken.GetHashCode();
      if (EmailToken.Length != 0) hash ^= EmailToken.GetHashCode();
      if (PasswordToken.Length != 0) hash ^= PasswordToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DomainToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(DomainToken);
      }
      if (EmailToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EmailToken);
      }
      if (PasswordToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PasswordToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DomainToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DomainToken);
      }
      if (EmailToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EmailToken);
      }
      if (PasswordToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PasswordToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnonymizedTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.DomainToken.Length != 0) {
        DomainToken = other.DomainToken;
      }
      if (other.EmailToken.Length != 0) {
        EmailToken = other.EmailToken;
      }
      if (other.PasswordToken.Length != 0) {
        PasswordToken = other.PasswordToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DomainToken = input.ReadBytes();
            break;
          }
          case 18: {
            EmailToken = input.ReadBytes();
            break;
          }
          case 26: {
            PasswordToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HashCheck : pb::IMessage<HashCheck> {
    private static readonly pb::MessageParser<HashCheck> _parser = new pb::MessageParser<HashCheck>(() => new HashCheck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HashCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashCheck(HashCheck other) : this() {
      hash1_ = other.hash1_;
      euid_ = other.euid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashCheck Clone() {
      return new HashCheck(this);
    }

    /// <summary>Field number for the "hash1" field.</summary>
    public const int Hash1FieldNumber = 1;
    private pb::ByteString hash1_ = pb::ByteString.Empty;
    /// <summary>
    /// if supplied, check this hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash1 {
      get { return hash1_; }
      set {
        hash1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "euid" field.</summary>
    public const int EuidFieldNumber = 2;
    private pb::ByteString euid_ = pb::ByteString.Empty;
    /// <summary>
    /// if supplied, check this euid - if hash is also supplied, update the hash for this euid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Euid {
      get { return euid_; }
      set {
        euid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HashCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HashCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash1 != other.Hash1) return false;
      if (Euid != other.Euid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash1.Length != 0) hash ^= Hash1.GetHashCode();
      if (Euid.Length != 0) hash ^= Euid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash1);
      }
      if (Euid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Euid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash1);
      }
      if (Euid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Euid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HashCheck other) {
      if (other == null) {
        return;
      }
      if (other.Hash1.Length != 0) {
        Hash1 = other.Hash1;
      }
      if (other.Euid.Length != 0) {
        Euid = other.Euid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash1 = input.ReadBytes();
            break;
          }
          case 18: {
            Euid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BreachWatchStatusRequest : pb::IMessage<BreachWatchStatusRequest> {
    private static readonly pb::MessageParser<BreachWatchStatusRequest> _parser = new pb::MessageParser<BreachWatchStatusRequest>(() => new BreachWatchStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreachWatchStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchStatusRequest(BreachWatchStatusRequest other) : this() {
      anonymizedToken_ = other.anonymizedToken_;
      hashCheck_ = other.hashCheck_.Clone();
      removedEuid_ = other.removedEuid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchStatusRequest Clone() {
      return new BreachWatchStatusRequest(this);
    }

    /// <summary>Field number for the "anonymizedToken" field.</summary>
    public const int AnonymizedTokenFieldNumber = 1;
    private pb::ByteString anonymizedToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AnonymizedToken {
      get { return anonymizedToken_; }
      set {
        anonymizedToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hashCheck" field.</summary>
    public const int HashCheckFieldNumber = 2;
    private static readonly pb::FieldCodec<global::BreachWatch.HashCheck> _repeated_hashCheck_codec
        = pb::FieldCodec.ForMessage(18, global::BreachWatch.HashCheck.Parser);
    private readonly pbc::RepeatedField<global::BreachWatch.HashCheck> hashCheck_ = new pbc::RepeatedField<global::BreachWatch.HashCheck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BreachWatch.HashCheck> HashCheck {
      get { return hashCheck_; }
    }

    /// <summary>Field number for the "removedEuid" field.</summary>
    public const int RemovedEuidFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_removedEuid_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> removedEuid_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RemovedEuid {
      get { return removedEuid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreachWatchStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreachWatchStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnonymizedToken != other.AnonymizedToken) return false;
      if(!hashCheck_.Equals(other.hashCheck_)) return false;
      if(!removedEuid_.Equals(other.removedEuid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnonymizedToken.Length != 0) hash ^= AnonymizedToken.GetHashCode();
      hash ^= hashCheck_.GetHashCode();
      hash ^= removedEuid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnonymizedToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AnonymizedToken);
      }
      hashCheck_.WriteTo(output, _repeated_hashCheck_codec);
      removedEuid_.WriteTo(output, _repeated_removedEuid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnonymizedToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AnonymizedToken);
      }
      size += hashCheck_.CalculateSize(_repeated_hashCheck_codec);
      size += removedEuid_.CalculateSize(_repeated_removedEuid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreachWatchStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.AnonymizedToken.Length != 0) {
        AnonymizedToken = other.AnonymizedToken;
      }
      hashCheck_.Add(other.hashCheck_);
      removedEuid_.Add(other.removedEuid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AnonymizedToken = input.ReadBytes();
            break;
          }
          case 18: {
            hashCheck_.AddEntriesFrom(input, _repeated_hashCheck_codec);
            break;
          }
          case 26: {
            removedEuid_.AddEntriesFrom(input, _repeated_removedEuid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HashStatus : pb::IMessage<HashStatus> {
    private static readonly pb::MessageParser<HashStatus> _parser = new pb::MessageParser<HashStatus>(() => new HashStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HashStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashStatus(HashStatus other) : this() {
      hash1_ = other.hash1_;
      euid_ = other.euid_;
      breachDetected_ = other.breachDetected_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashStatus Clone() {
      return new HashStatus(this);
    }

    /// <summary>Field number for the "hash1" field.</summary>
    public const int Hash1FieldNumber = 1;
    private pb::ByteString hash1_ = pb::ByteString.Empty;
    /// <summary>
    /// if supplied a uid is supplied for this hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash1 {
      get { return hash1_; }
      set {
        hash1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "euid" field.</summary>
    public const int EuidFieldNumber = 2;
    private pb::ByteString euid_ = pb::ByteString.Empty;
    /// <summary>
    /// if not supplied, this hash is not being tracked
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Euid {
      get { return euid_; }
      set {
        euid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "breachDetected" field.</summary>
    public const int BreachDetectedFieldNumber = 3;
    private bool breachDetected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BreachDetected {
      get { return breachDetected_; }
      set {
        breachDetected_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HashStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HashStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash1 != other.Hash1) return false;
      if (Euid != other.Euid) return false;
      if (BreachDetected != other.BreachDetected) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash1.Length != 0) hash ^= Hash1.GetHashCode();
      if (Euid.Length != 0) hash ^= Euid.GetHashCode();
      if (BreachDetected != false) hash ^= BreachDetected.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash1);
      }
      if (Euid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Euid);
      }
      if (BreachDetected != false) {
        output.WriteRawTag(24);
        output.WriteBool(BreachDetected);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash1);
      }
      if (Euid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Euid);
      }
      if (BreachDetected != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HashStatus other) {
      if (other == null) {
        return;
      }
      if (other.Hash1.Length != 0) {
        Hash1 = other.Hash1;
      }
      if (other.Euid.Length != 0) {
        Euid = other.Euid;
      }
      if (other.BreachDetected != false) {
        BreachDetected = other.BreachDetected;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash1 = input.ReadBytes();
            break;
          }
          case 18: {
            Euid = input.ReadBytes();
            break;
          }
          case 24: {
            BreachDetected = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BreachWatchStatusResponse : pb::IMessage<BreachWatchStatusResponse> {
    private static readonly pb::MessageParser<BreachWatchStatusResponse> _parser = new pb::MessageParser<BreachWatchStatusResponse>(() => new BreachWatchStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreachWatchStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchStatusResponse(BreachWatchStatusResponse other) : this() {
      hashStatus_ = other.hashStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachWatchStatusResponse Clone() {
      return new BreachWatchStatusResponse(this);
    }

    /// <summary>Field number for the "hashStatus" field.</summary>
    public const int HashStatusFieldNumber = 2;
    private static readonly pb::FieldCodec<global::BreachWatch.HashStatus> _repeated_hashStatus_codec
        = pb::FieldCodec.ForMessage(18, global::BreachWatch.HashStatus.Parser);
    private readonly pbc::RepeatedField<global::BreachWatch.HashStatus> hashStatus_ = new pbc::RepeatedField<global::BreachWatch.HashStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BreachWatch.HashStatus> HashStatus {
      get { return hashStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreachWatchStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreachWatchStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hashStatus_.Equals(other.hashStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hashStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hashStatus_.WriteTo(output, _repeated_hashStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hashStatus_.CalculateSize(_repeated_hashStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreachWatchStatusResponse other) {
      if (other == null) {
        return;
      }
      hashStatus_.Add(other.hashStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            hashStatus_.AddEntriesFrom(input, _repeated_hashStatus_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterprisePublicKeyResponse : pb::IMessage<EnterprisePublicKeyResponse> {
    private static readonly pb::MessageParser<EnterprisePublicKeyResponse> _parser = new pb::MessageParser<EnterprisePublicKeyResponse>(() => new EnterprisePublicKeyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterprisePublicKeyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterprisePublicKeyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterprisePublicKeyResponse(EnterprisePublicKeyResponse other) : this() {
      enterprisePublicKey_ = other.enterprisePublicKey_;
      enterpriseECCPublicKey_ = other.enterpriseECCPublicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterprisePublicKeyResponse Clone() {
      return new EnterprisePublicKeyResponse(this);
    }

    /// <summary>Field number for the "enterprisePublicKey" field.</summary>
    public const int EnterprisePublicKeyFieldNumber = 1;
    private pb::ByteString enterprisePublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EnterprisePublicKey {
      get { return enterprisePublicKey_; }
      set {
        enterprisePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterpriseECCPublicKey" field.</summary>
    public const int EnterpriseECCPublicKeyFieldNumber = 2;
    private pb::ByteString enterpriseECCPublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EnterpriseECCPublicKey {
      get { return enterpriseECCPublicKey_; }
      set {
        enterpriseECCPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterprisePublicKeyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterprisePublicKeyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterprisePublicKey != other.EnterprisePublicKey) return false;
      if (EnterpriseECCPublicKey != other.EnterpriseECCPublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterprisePublicKey.Length != 0) hash ^= EnterprisePublicKey.GetHashCode();
      if (EnterpriseECCPublicKey.Length != 0) hash ^= EnterpriseECCPublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterprisePublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EnterprisePublicKey);
      }
      if (EnterpriseECCPublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EnterpriseECCPublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterprisePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EnterprisePublicKey);
      }
      if (EnterpriseECCPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EnterpriseECCPublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterprisePublicKeyResponse other) {
      if (other == null) {
        return;
      }
      if (other.EnterprisePublicKey.Length != 0) {
        EnterprisePublicKey = other.EnterprisePublicKey;
      }
      if (other.EnterpriseECCPublicKey.Length != 0) {
        EnterpriseECCPublicKey = other.EnterpriseECCPublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EnterprisePublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            EnterpriseECCPublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FreeScanRequest : pb::IMessage<FreeScanRequest> {
    private static readonly pb::MessageParser<FreeScanRequest> _parser = new pb::MessageParser<FreeScanRequest>(() => new FreeScanRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FreeScanRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreeScanRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreeScanRequest(FreeScanRequest other) : this() {
      hashedEmail_ = other.hashedEmail_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreeScanRequest Clone() {
      return new FreeScanRequest(this);
    }

    /// <summary>Field number for the "hashedEmail" field.</summary>
    public const int HashedEmailFieldNumber = 1;
    private pb::ByteString hashedEmail_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HashedEmail {
      get { return hashedEmail_; }
      set {
        hashedEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FreeScanRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FreeScanRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HashedEmail != other.HashedEmail) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HashedEmail.Length != 0) hash ^= HashedEmail.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HashedEmail.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(HashedEmail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HashedEmail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HashedEmail);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FreeScanRequest other) {
      if (other == null) {
        return;
      }
      if (other.HashedEmail.Length != 0) {
        HashedEmail = other.HashedEmail;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HashedEmail = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FreeScanResponse : pb::IMessage<FreeScanResponse> {
    private static readonly pb::MessageParser<FreeScanResponse> _parser = new pb::MessageParser<FreeScanResponse>(() => new FreeScanResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FreeScanResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreeScanResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreeScanResponse(FreeScanResponse other) : this() {
      emailBreaches_ = other.emailBreaches_;
      passwordBreaches_ = other.passwordBreaches_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreeScanResponse Clone() {
      return new FreeScanResponse(this);
    }

    /// <summary>Field number for the "emailBreaches" field.</summary>
    public const int EmailBreachesFieldNumber = 1;
    private int emailBreaches_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EmailBreaches {
      get { return emailBreaches_; }
      set {
        emailBreaches_ = value;
      }
    }

    /// <summary>Field number for the "passwordBreaches" field.</summary>
    public const int PasswordBreachesFieldNumber = 2;
    private int passwordBreaches_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PasswordBreaches {
      get { return passwordBreaches_; }
      set {
        passwordBreaches_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FreeScanResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FreeScanResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmailBreaches != other.EmailBreaches) return false;
      if (PasswordBreaches != other.PasswordBreaches) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmailBreaches != 0) hash ^= EmailBreaches.GetHashCode();
      if (PasswordBreaches != 0) hash ^= PasswordBreaches.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmailBreaches != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EmailBreaches);
      }
      if (PasswordBreaches != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PasswordBreaches);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmailBreaches != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmailBreaches);
      }
      if (PasswordBreaches != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PasswordBreaches);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FreeScanResponse other) {
      if (other == null) {
        return;
      }
      if (other.EmailBreaches != 0) {
        EmailBreaches = other.EmailBreaches;
      }
      if (other.PasswordBreaches != 0) {
        PasswordBreaches = other.PasswordBreaches;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EmailBreaches = input.ReadInt32();
            break;
          }
          case 16: {
            PasswordBreaches = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PaidUserRequest : pb::IMessage<PaidUserRequest> {
    private static readonly pb::MessageParser<PaidUserRequest> _parser = new pb::MessageParser<PaidUserRequest>(() => new PaidUserRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaidUserRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaidUserRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaidUserRequest(PaidUserRequest other) : this() {
      email_ = other.email_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaidUserRequest Clone() {
      return new PaidUserRequest(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaidUserRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaidUserRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaidUserRequest other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PaidUserResponse : pb::IMessage<PaidUserResponse> {
    private static readonly pb::MessageParser<PaidUserResponse> _parser = new pb::MessageParser<PaidUserResponse>(() => new PaidUserResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaidUserResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaidUserResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaidUserResponse(PaidUserResponse other) : this() {
      paidUser_ = other.paidUser_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaidUserResponse Clone() {
      return new PaidUserResponse(this);
    }

    /// <summary>Field number for the "paidUser" field.</summary>
    public const int PaidUserFieldNumber = 1;
    private bool paidUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PaidUser {
      get { return paidUser_; }
      set {
        paidUser_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaidUserResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaidUserResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaidUser != other.PaidUser) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaidUser != false) hash ^= PaidUser.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaidUser != false) {
        output.WriteRawTag(8);
        output.WriteBool(PaidUser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaidUser != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaidUserResponse other) {
      if (other == null) {
        return;
      }
      if (other.PaidUser != false) {
        PaidUser = other.PaidUser;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PaidUser = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DetailedScanRequest : pb::IMessage<DetailedScanRequest> {
    private static readonly pb::MessageParser<DetailedScanRequest> _parser = new pb::MessageParser<DetailedScanRequest>(() => new DetailedScanRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetailedScanRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailedScanRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailedScanRequest(DetailedScanRequest other) : this() {
      email_ = other.email_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailedScanRequest Clone() {
      return new DetailedScanRequest(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetailedScanRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetailedScanRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetailedScanRequest other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UseOneTimeTokenRequest : pb::IMessage<UseOneTimeTokenRequest> {
    private static readonly pb::MessageParser<UseOneTimeTokenRequest> _parser = new pb::MessageParser<UseOneTimeTokenRequest>(() => new UseOneTimeTokenRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseOneTimeTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseOneTimeTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseOneTimeTokenRequest(UseOneTimeTokenRequest other) : this() {
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseOneTimeTokenRequest Clone() {
      return new UseOneTimeTokenRequest(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private pb::ByteString token_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseOneTimeTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseOneTimeTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseOneTimeTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BreachEvent : pb::IMessage<BreachEvent> {
    private static readonly pb::MessageParser<BreachEvent> _parser = new pb::MessageParser<BreachEvent>(() => new BreachEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreachEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachEvent(BreachEvent other) : this() {
      site_ = other.site_;
      email_ = other.email_;
      passwordInBreach_ = other.passwordInBreach_;
      date_ = other.date_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreachEvent Clone() {
      return new BreachEvent(this);
    }

    /// <summary>Field number for the "site" field.</summary>
    public const int SiteFieldNumber = 1;
    private string site_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Site {
      get { return site_; }
      set {
        site_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passwordInBreach" field.</summary>
    public const int PasswordInBreachFieldNumber = 3;
    private bool passwordInBreach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PasswordInBreach {
      get { return passwordInBreach_; }
      set {
        passwordInBreach_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 4;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreachEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreachEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Site != other.Site) return false;
      if (Email != other.Email) return false;
      if (PasswordInBreach != other.PasswordInBreach) return false;
      if (Date != other.Date) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Site.Length != 0) hash ^= Site.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (PasswordInBreach != false) hash ^= PasswordInBreach.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Site.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Site);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (PasswordInBreach != false) {
        output.WriteRawTag(24);
        output.WriteBool(PasswordInBreach);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Date);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Site.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Site);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (PasswordInBreach != false) {
        size += 1 + 1;
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreachEvent other) {
      if (other == null) {
        return;
      }
      if (other.Site.Length != 0) {
        Site = other.Site;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.PasswordInBreach != false) {
        PasswordInBreach = other.PasswordInBreach;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Site = input.ReadString();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 24: {
            PasswordInBreach = input.ReadBool();
            break;
          }
          case 34: {
            Date = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UseOneTimeTokenResponse : pb::IMessage<UseOneTimeTokenResponse> {
    private static readonly pb::MessageParser<UseOneTimeTokenResponse> _parser = new pb::MessageParser<UseOneTimeTokenResponse>(() => new UseOneTimeTokenResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseOneTimeTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseOneTimeTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseOneTimeTokenResponse(UseOneTimeTokenResponse other) : this() {
      emailBreaches_ = other.emailBreaches_;
      passwordBreaches_ = other.passwordBreaches_;
      breachEvents_ = other.breachEvents_.Clone();
      email_ = other.email_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseOneTimeTokenResponse Clone() {
      return new UseOneTimeTokenResponse(this);
    }

    /// <summary>Field number for the "emailBreaches" field.</summary>
    public const int EmailBreachesFieldNumber = 1;
    private int emailBreaches_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EmailBreaches {
      get { return emailBreaches_; }
      set {
        emailBreaches_ = value;
      }
    }

    /// <summary>Field number for the "passwordBreaches" field.</summary>
    public const int PasswordBreachesFieldNumber = 2;
    private int passwordBreaches_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PasswordBreaches {
      get { return passwordBreaches_; }
      set {
        passwordBreaches_ = value;
      }
    }

    /// <summary>Field number for the "breachEvents" field.</summary>
    public const int BreachEventsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::BreachWatch.BreachEvent> _repeated_breachEvents_codec
        = pb::FieldCodec.ForMessage(26, global::BreachWatch.BreachEvent.Parser);
    private readonly pbc::RepeatedField<global::BreachWatch.BreachEvent> breachEvents_ = new pbc::RepeatedField<global::BreachWatch.BreachEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BreachWatch.BreachEvent> BreachEvents {
      get { return breachEvents_; }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseOneTimeTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseOneTimeTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmailBreaches != other.EmailBreaches) return false;
      if (PasswordBreaches != other.PasswordBreaches) return false;
      if(!breachEvents_.Equals(other.breachEvents_)) return false;
      if (Email != other.Email) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmailBreaches != 0) hash ^= EmailBreaches.GetHashCode();
      if (PasswordBreaches != 0) hash ^= PasswordBreaches.GetHashCode();
      hash ^= breachEvents_.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmailBreaches != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EmailBreaches);
      }
      if (PasswordBreaches != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PasswordBreaches);
      }
      breachEvents_.WriteTo(output, _repeated_breachEvents_codec);
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmailBreaches != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmailBreaches);
      }
      if (PasswordBreaches != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PasswordBreaches);
      }
      size += breachEvents_.CalculateSize(_repeated_breachEvents_codec);
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseOneTimeTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.EmailBreaches != 0) {
        EmailBreaches = other.EmailBreaches;
      }
      if (other.PasswordBreaches != 0) {
        PasswordBreaches = other.PasswordBreaches;
      }
      breachEvents_.Add(other.breachEvents_);
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EmailBreaches = input.ReadInt32();
            break;
          }
          case 16: {
            PasswordBreaches = input.ReadInt32();
            break;
          }
          case 26: {
            breachEvents_.AddEntriesFrom(input, _repeated_breachEvents_codec);
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OneTimeUseToken : pb::IMessage<OneTimeUseToken> {
    private static readonly pb::MessageParser<OneTimeUseToken> _parser = new pb::MessageParser<OneTimeUseToken>(() => new OneTimeUseToken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneTimeUseToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneTimeUseToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneTimeUseToken(OneTimeUseToken other) : this() {
      email_ = other.email_;
      pad_ = other.pad_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneTimeUseToken Clone() {
      return new OneTimeUseToken(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pad" field.</summary>
    public const int PadFieldNumber = 2;
    private string pad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pad {
      get { return pad_; }
      set {
        pad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneTimeUseToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneTimeUseToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (Pad != other.Pad) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Pad.Length != 0) hash ^= Pad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Pad.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Pad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pad);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneTimeUseToken other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Pad.Length != 0) {
        Pad = other.Pad;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Pad = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FreePasswordScanRequest : pb::IMessage<FreePasswordScanRequest> {
    private static readonly pb::MessageParser<FreePasswordScanRequest> _parser = new pb::MessageParser<FreePasswordScanRequest>(() => new FreePasswordScanRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FreePasswordScanRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreePasswordScanRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreePasswordScanRequest(FreePasswordScanRequest other) : this() {
      hashedPassword_ = other.hashedPassword_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreePasswordScanRequest Clone() {
      return new FreePasswordScanRequest(this);
    }

    /// <summary>Field number for the "hashedPassword" field.</summary>
    public const int HashedPasswordFieldNumber = 1;
    private pb::ByteString hashedPassword_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HashedPassword {
      get { return hashedPassword_; }
      set {
        hashedPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FreePasswordScanRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FreePasswordScanRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HashedPassword != other.HashedPassword) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HashedPassword.Length != 0) hash ^= HashedPassword.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HashedPassword.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(HashedPassword);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HashedPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HashedPassword);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FreePasswordScanRequest other) {
      if (other == null) {
        return;
      }
      if (other.HashedPassword.Length != 0) {
        HashedPassword = other.HashedPassword;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HashedPassword = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FreePasswordScanResponse : pb::IMessage<FreePasswordScanResponse> {
    private static readonly pb::MessageParser<FreePasswordScanResponse> _parser = new pb::MessageParser<FreePasswordScanResponse>(() => new FreePasswordScanResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FreePasswordScanResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BreachWatch.BreachwatchReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreePasswordScanResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreePasswordScanResponse(FreePasswordScanResponse other) : this() {
      passwordBreaches_ = other.passwordBreaches_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FreePasswordScanResponse Clone() {
      return new FreePasswordScanResponse(this);
    }

    /// <summary>Field number for the "passwordBreaches" field.</summary>
    public const int PasswordBreachesFieldNumber = 1;
    private long passwordBreaches_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PasswordBreaches {
      get { return passwordBreaches_; }
      set {
        passwordBreaches_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FreePasswordScanResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FreePasswordScanResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PasswordBreaches != other.PasswordBreaches) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PasswordBreaches != 0L) hash ^= PasswordBreaches.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PasswordBreaches != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PasswordBreaches);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PasswordBreaches != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PasswordBreaches);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FreePasswordScanResponse other) {
      if (other == null) {
        return;
      }
      if (other.PasswordBreaches != 0L) {
        PasswordBreaches = other.PasswordBreaches;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PasswordBreaches = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
