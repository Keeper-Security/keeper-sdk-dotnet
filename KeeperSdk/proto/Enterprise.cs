// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: enterprise.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Enterprise {

  /// <summary>Holder for reflection information generated from enterprise.proto</summary>
  public static partial class EnterpriseReflection {

    #region Descriptor
    /// <summary>File descriptor for enterprise.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EnterpriseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBlbnRlcnByaXNlLnByb3RvEgpFbnRlcnByaXNlIoQBChhFbnRlcnByaXNl",
            "S2V5UGFpclJlcXVlc3QSGwoTZW50ZXJwcmlzZVB1YmxpY0tleRgBIAEoDBIl",
            "Ch1lbmNyeXB0ZWRFbnRlcnByaXNlUHJpdmF0ZUtleRgCIAEoDBIkCgdrZXlU",
            "eXBlGAMgASgOMhMuRW50ZXJwcmlzZS5LZXlUeXBlIicKFEdldFRlYW1NZW1i",
            "ZXJSZXF1ZXN0Eg8KB3RlYW1VaWQYASABKAwiawoORW50ZXJwcmlzZVVzZXIS",
            "GAoQZW50ZXJwcmlzZVVzZXJJZBgBIAEoAxINCgVlbWFpbBgCIAEoCRIaChJl",
            "bnRlcnByaXNlVXNlcm5hbWUYAyABKAkSFAoMaXNTaGFyZUFkbWluGAQgASgI",
            "IksKFUdldFRlYW1NZW1iZXJSZXNwb25zZRIyCg5lbnRlcnByaXNlVXNlchgB",
            "IAMoCzIaLkVudGVycHJpc2UuRW50ZXJwcmlzZVVzZXIiLQoRRW50ZXJwcmlz",
            "ZVVzZXJJZHMSGAoQZW50ZXJwcmlzZVVzZXJJZBgBIAMoAyJCChlFbnRlcnBy",
            "aXNlUGVyc29uYWxBY2NvdW50Eg0KBWVtYWlsGAEgASgJEhYKDk9CU09MRVRF",
            "X0ZJRUxEGAIgASgMIlMKF0VuY3J5cHRlZFRlYW1LZXlSZXF1ZXN0Eg8KB3Rl",
            "YW1VaWQYASABKAwSGAoQZW5jcnlwdGVkVGVhbUtleRgCIAEoDBINCgVmb3Jj",
            "ZRgDIAEoCCIrCg9SZUVuY3J5cHRlZERhdGESCgoCaWQYASABKAMSDAoEZGF0",
            "YRgCIAEoCSI/ChJSZUVuY3J5cHRlZFJvbGVLZXkSDwoHcm9sZV9pZBgBIAEo",
            "AxIYChBlbmNyeXB0ZWRSb2xlS2V5GAIgASgMIp0CChtOb2RlVG9NYW5hZ2Vk",
            "Q29tcGFueVJlcXVlc3QSEQoJY29tcGFueUlkGAEgASgFEioKBW5vZGVzGAIg",
            "AygLMhsuRW50ZXJwcmlzZS5SZUVuY3J5cHRlZERhdGESKgoFcm9sZXMYAyAD",
            "KAsyGy5FbnRlcnByaXNlLlJlRW5jcnlwdGVkRGF0YRIqCgV1c2VycxgEIAMo",
            "CzIbLkVudGVycHJpc2UuUmVFbmNyeXB0ZWREYXRhEjAKCHJvbGVLZXlzGAUg",
            "AygLMh4uRW50ZXJwcmlzZS5SZUVuY3J5cHRlZFJvbGVLZXkSNQoIdGVhbUtl",
            "eXMYBiADKAsyIy5FbnRlcnByaXNlLkVuY3J5cHRlZFRlYW1LZXlSZXF1ZXN0",
            "IiwKCFJvbGVUZWFtEg8KB3JvbGVfaWQYASABKAMSDwoHdGVhbVVpZBgCIAEo",
            "DCI0CglSb2xlVGVhbXMSJwoJcm9sZV90ZWFtGAEgAygLMhQuRW50ZXJwcmlz",
            "ZS5Sb2xlVGVhbSLBAwoWRW50ZXJwcmlzZVJlZ2lzdHJhdGlvbhIYChBlbmNy",
            "eXB0ZWRUcmVlS2V5GAEgASgMEhYKDmVudGVycHJpc2VOYW1lGAIgASgJEhQK",
            "DHJvb3ROb2RlRGF0YRgDIAEoDBIVCg1hZG1pblVzZXJEYXRhGAQgASgMEhEK",
            "CWFkbWluTmFtZRgFIAEoCRIQCghyb2xlRGF0YRgGIAEoDBI4Cgpyc2FLZXlQ",
            "YWlyGAcgASgLMiQuRW50ZXJwcmlzZS5FbnRlcnByaXNlS2V5UGFpclJlcXVl",
            "c3QSEwoLbnVtYmVyU2VhdHMYCCABKAUSMgoOZW50ZXJwcmlzZVR5cGUYCSAB",
            "KA4yGi5FbnRlcnByaXNlLkVudGVycHJpc2VUeXBlEhUKDXJvbGVQdWJsaWNL",
            "ZXkYCiABKAwSKgoicm9sZVByaXZhdGVLZXlFbmNyeXB0ZWRXaXRoUm9sZUtl",
            "eRgLIAEoDBIjChtyb2xlS2V5RW5jcnlwdGVkV2l0aFRyZWVLZXkYDCABKAwS",
            "OAoKZWNjS2V5UGFpchgNIAEoCzIkLkVudGVycHJpc2UuRW50ZXJwcmlzZUtl",
            "eVBhaXJSZXF1ZXN0Ii4KGkRvbWFpblBhc3N3b3JkUnVsZXNSZXF1ZXN0EhAK",
            "CHVzZXJuYW1lGAEgASgJIlwKGURvbWFpblBhc3N3b3JkUnVsZXNGaWVsZHMS",
            "DAoEdHlwZRgBIAEoCRIPCgdtaW5pbXVtGAIgASgFEg8KB21heGltdW0YAyAB",
            "KAUSDwoHYWxsb3dlZBgEIAEoCCJFChBMb2dpblRvTWNSZXF1ZXN0EhYKDm1j",
            "RW50ZXJwcmlzZUlkGAEgASgFEhkKEW1lc3NhZ2VTZXNzaW9uVWlkGAIgASgM",
            "IkwKEUxvZ2luVG9NY1Jlc3BvbnNlEh0KFWVuY3J5cHRlZFNlc3Npb25Ub2tl",
            "bhgBIAEoDBIYChBlbmNyeXB0ZWRUcmVlS2V5GAIgASgJImcKG0RvbWFpblBh",
            "c3N3b3JkUnVsZXNSZXNwb25zZRJIChlkb21haW5QYXNzd29yZFJ1bGVzRmll",
            "bGRzGAEgAygLMiUuRW50ZXJwcmlzZS5Eb21haW5QYXNzd29yZFJ1bGVzRmll",
            "bGRzIogBChhBcHByb3ZlVXNlckRldmljZVJlcXVlc3QSGAoQZW50ZXJwcmlz",
            "ZVVzZXJJZBgBIAEoAxIcChRlbmNyeXB0ZWREZXZpY2VUb2tlbhgCIAEoDBIe",
            "ChZlbmNyeXB0ZWREZXZpY2VEYXRhS2V5GAMgASgMEhQKDGRlbnlBcHByb3Zh",
            "bBgEIAEoCCJ0ChlBcHByb3ZlVXNlckRldmljZVJlc3BvbnNlEhgKEGVudGVy",
            "cHJpc2VVc2VySWQYASABKAMSHAoUZW5jcnlwdGVkRGV2aWNlVG9rZW4YAiAB",
            "KAwSDgoGZmFpbGVkGAMgASgIEg8KB21lc3NhZ2UYBCABKAkiWQoZQXBwcm92",
            "ZVVzZXJEZXZpY2VzUmVxdWVzdBI8Cg5kZXZpY2VSZXF1ZXN0cxgBIAMoCzIk",
            "LkVudGVycHJpc2UuQXBwcm92ZVVzZXJEZXZpY2VSZXF1ZXN0IlwKGkFwcHJv",
            "dmVVc2VyRGV2aWNlc1Jlc3BvbnNlEj4KD2RldmljZVJlc3BvbnNlcxgBIAMo",
            "CzIlLkVudGVycHJpc2UuQXBwcm92ZVVzZXJEZXZpY2VSZXNwb25zZSJiChVF",
            "bnRlcnByaXNlVXNlckRhdGFLZXkSGAoQZW50ZXJwcmlzZVVzZXJJZBgBIAEo",
            "AxIcChR1c2VyRW5jcnlwdGVkRGF0YUtleRgCIAEoDBIRCglrZXlUeXBlSWQY",
            "AyABKAUiSQoWRW50ZXJwcmlzZVVzZXJEYXRhS2V5cxIvCgRrZXlzGAEgAygL",
            "MiEuRW50ZXJwcmlzZS5FbnRlcnByaXNlVXNlckRhdGFLZXkiMgoVRW50ZXJw",
            "cmlzZURhdGFSZXF1ZXN0EhkKEWNvbnRpbnVhdGlvblRva2VuGAEgASgMIjAK",
            "E1NwZWNpYWxQcm92aXNpb25pbmcSCwoDdXJsGAEgASgJEgwKBG5hbWUYAiAB",
            "KAkitwEKEUdlbmVyYWxEYXRhRW50aXR5EhYKDmVudGVycHJpc2VOYW1lGAEg",
            "ASgJEhoKEnJlc3RyaWN0VmlzaWJpbGl0eRgCIAEoCBI8ChNzcGVjaWFsUHJv",
            "dmlzaW9uaW5nGAQgASgLMh8uRW50ZXJwcmlzZS5TcGVjaWFsUHJvdmlzaW9u",
            "aW5nEjAKDXVzZXJQcml2aWxlZ2UYByABKAsyGS5FbnRlcnByaXNlLlVzZXJQ",
            "cml2aWxlZ2Ui/QEKBE5vZGUSDgoGbm9kZUlkGAEgASgDEhAKCHBhcmVudElk",
            "GAIgASgDEhAKCGJyaWRnZUlkGAMgASgDEg4KBnNjaW1JZBgEIAEoAxIRCgls",
            "aWNlbnNlSWQYBSABKAMSFQoNZW5jcnlwdGVkRGF0YRgGIAEoCRISCgpkdW9F",
            "bmFibGVkGAcgASgIEhIKCnJzYUVuYWJsZWQYCCABKAgSIAoUc3NvU2Vydmlj",
            "ZVByb3ZpZGVySWQYCSABKANCAhgBEhoKEnJlc3RyaWN0VmlzaWJpbGl0eRgK",
            "IAEoCBIhChVzc29TZXJ2aWNlUHJvdmlkZXJJZHMYCyADKANCAhABIo4BCgRS",
            "b2xlEg4KBnJvbGVJZBgBIAEoAxIOCgZub2RlSWQYAiABKAMSFQoNZW5jcnlw",
            "dGVkRGF0YRgDIAEoCRIPCgdrZXlUeXBlGAQgASgJEhQKDHZpc2libGVCZWxv",
            "dxgFIAEoCBIWCg5uZXdVc2VySW5oZXJpdBgGIAEoCBIQCghyb2xlVHlwZRgH",
            "IAEoCSLcAQoEVXNlchIYChBlbnRlcnByaXNlVXNlcklkGAEgASgDEg4KBm5v",
            "ZGVJZBgCIAEoAxIVCg1lbmNyeXB0ZWREYXRhGAMgASgJEg8KB2tleVR5cGUY",
            "BCABKAkSEAoIdXNlcm5hbWUYBSABKAkSDgoGc3RhdHVzGAYgASgJEgwKBGxv",
            "Y2sYByABKAUSDgoGdXNlcklkGAggASgFEh4KFmFjY291bnRTaGFyZUV4cGly",
            "YXRpb24YCSABKAMSEAoIZnVsbE5hbWUYCiABKAkSEAoIam9iVGl0bGUYCyAB",
            "KAkiNwoJVXNlckFsaWFzEhgKEGVudGVycHJpc2VVc2VySWQYASABKAMSEAoI",
            "dXNlcm5hbWUYAiABKAkirAEKGENvbXBsaWFuY2VSZXBvcnRNZXRhRGF0YRIR",
            "CglyZXBvcnRVaWQYASABKAwSDgoGbm9kZUlkGAIgASgDEhIKCnJlcG9ydE5h",
            "bWUYAyABKAkSFQoNZGF0ZUdlbmVyYXRlZBgEIAEoAxIRCglydW5CeU5hbWUY",
            "BSABKAkSFgoObnVtYmVyT2ZPd25lcnMYByABKAUSFwoPbnVtYmVyT2ZSZWNv",
            "cmRzGAggASgFIlMKC01hbmFnZWROb2RlEg4KBnJvbGVJZBgBIAEoAxIVCg1t",
            "YW5hZ2VkTm9kZUlkGAIgASgDEh0KFWNhc2NhZGVOb2RlTWFuYWdlbWVudBgD",
            "IAEoCCJUCg9Vc2VyTWFuYWdlZE5vZGUSDgoGbm9kZUlkGAEgASgDEh0KFWNh",
            "c2NhZGVOb2RlTWFuYWdlbWVudBgCIAEoCBISCgpwcml2aWxlZ2VzGAMgAygJ",
            "IncKDVVzZXJQcml2aWxlZ2USNQoQdXNlck1hbmFnZWROb2RlcxgBIAMoCzIb",
            "LkVudGVycHJpc2UuVXNlck1hbmFnZWROb2RlEhgKEGVudGVycHJpc2VVc2Vy",
            "SWQYAiABKAMSFQoNZW5jcnlwdGVkRGF0YRgDIAEoCSI0CghSb2xlVXNlchIO",
            "CgZyb2xlSWQYASABKAMSGAoQZW50ZXJwcmlzZVVzZXJJZBgCIAEoAyJNCg1S",
            "b2xlUHJpdmlsZWdlEhUKDW1hbmFnZWROb2RlSWQYASABKAMSDgoGcm9sZUlk",
            "GAIgASgDEhUKDXByaXZpbGVnZVR5cGUYAyABKAkiSQoPUm9sZUVuZm9yY2Vt",
            "ZW50Eg4KBnJvbGVJZBgBIAEoAxIXCg9lbmZvcmNlbWVudFR5cGUYAiABKAkS",
            "DQoFdmFsdWUYAyABKAkiqQEKBFRlYW0SDwoHdGVhbVVpZBgBIAEoDBIMCgRu",
            "YW1lGAIgASgJEg4KBm5vZGVJZBgDIAEoAxIUCgxyZXN0cmljdEVkaXQYBCAB",
            "KAgSFQoNcmVzdHJpY3RTaGFyZRgFIAEoCBIUCgxyZXN0cmljdFZpZXcYBiAB",
            "KAgSFQoNZW5jcnlwdGVkRGF0YRgHIAEoCRIYChBlbmNyeXB0ZWRUZWFtS2V5",
            "GAggASgJIkcKCFRlYW1Vc2VyEg8KB3RlYW1VaWQYASABKAwSGAoQZW50ZXJw",
            "cmlzZVVzZXJJZBgCIAEoAxIQCgh1c2VyVHlwZRgDIAEoCSKRAgoOTWFuYWdl",
            "ZENvbXBhbnkSFgoObWNFbnRlcnByaXNlSWQYASABKAUSGAoQbWNFbnRlcnBy",
            "aXNlTmFtZRgCIAEoCRIRCgltc3BOb2RlSWQYAyABKAMSFQoNbnVtYmVyT2ZT",
            "ZWF0cxgEIAEoBRIVCg1udW1iZXJPZlVzZXJzGAUgASgFEhEKCXByb2R1Y3RJ",
            "ZBgGIAEoCRIRCglpc0V4cGlyZWQYByABKAgSDwoHdHJlZUtleRgIIAEoCRIV",
            "Cg10cmVlX2tleV9yb2xlGAkgASgDEhQKDGZpbGVQbGFuVHlwZRgKIAEoCRIo",
            "CgZhZGRPbnMYCyADKAsyGC5FbnRlcnByaXNlLkxpY2Vuc2VBZGRPbiJSCgdN",
            "U1BQb29sEhEKCXByb2R1Y3RJZBgBIAEoCRINCgVzZWF0cxgCIAEoBRIWCg5h",
            "dmFpbGFibGVTZWF0cxgDIAEoBRINCgVzdGFzaBgEIAEoBSI6CgpNU1BDb250",
            "YWN0EhQKDGVudGVycHJpc2VJZBgBIAEoBRIWCg5lbnRlcnByaXNlTmFtZRgC",
            "IAEoCSKKAQoMTGljZW5zZUFkZE9uEgwKBG5hbWUYASABKAkSDwoHZW5hYmxl",
            "ZBgCIAEoCBIPCgdpc1RyaWFsGAMgASgIEhIKCmV4cGlyYXRpb24YBCABKAMS",
            "DwoHY3JlYXRlZBgFIAEoAxINCgVzZWF0cxgGIAEoBRIWCg5hY3RpdmF0aW9u",
            "VGltZRgHIAEoAyLGAwoHTGljZW5zZRIMCgRwYWlkGAEgASgIEhUKDW51bWJl",
            "ck9mU2VhdHMYAiABKAUSEgoKZXhwaXJhdGlvbhgDIAEoAxIUCgxsaWNlbnNl",
            "S2V5SWQYBCABKAUSFQoNcHJvZHVjdFR5cGVJZBgFIAEoBRIMCgRuYW1lGAYg",
            "ASgJEhsKE2VudGVycHJpc2VMaWNlbnNlSWQYByABKAMSFgoOc2VhdHNBbGxv",
            "Y2F0ZWQYCCABKAUSFAoMc2VhdHNQZW5kaW5nGAkgASgFEgwKBHRpZXIYCiAB",
            "KAUSFgoOZmlsZVBsYW5UeXBlSWQYCyABKAUSEAoIbWF4Qnl0ZXMYDCABKAMS",
            "GQoRc3RvcmFnZUV4cGlyYXRpb24YDSABKAMSFQoNbGljZW5zZVN0YXR1cxgO",
            "IAEoCRIkCgdtc3BQb29sGA8gAygLMhMuRW50ZXJwcmlzZS5NU1BQb29sEikK",
            "CW1hbmFnZWRCeRgQIAEoCzIWLkVudGVycHJpc2UuTVNQQ29udGFjdBIoCgZh",
            "ZGRPbnMYESADKAsyGC5FbnRlcnByaXNlLkxpY2Vuc2VBZGRPbhIXCg9uZXh0",
            "QmlsbGluZ0RhdGUYEiABKAMibgoGQnJpZGdlEhAKCGJyaWRnZUlkGAEgASgD",
            "Eg4KBm5vZGVJZBgCIAEoAxIYChB3YW5JcEVuZm9yY2VtZW50GAMgASgJEhgK",
            "EGxhbklwRW5mb3JjZW1lbnQYBCABKAkSDgoGc3RhdHVzGAUgASgJInQKBFNj",
            "aW0SDgoGc2NpbUlkGAEgASgDEg4KBm5vZGVJZBgCIAEoAxIOCgZzdGF0dXMY",
            "AyABKAkSEgoKbGFzdFN5bmNlZBgEIAEoAxISCgpyb2xlUHJlZml4GAUgASgJ",
            "EhQKDHVuaXF1ZUdyb3VwcxgGIAEoCCJMCg5FbWFpbFByb3Zpc2lvbhIKCgJp",
            "ZBgBIAEoBRIOCgZub2RlSWQYAiABKAMSDgoGZG9tYWluGAMgASgJEg4KBm1l",
            "dGhvZBgEIAEoCSJSCgpRdWV1ZWRUZWFtEg8KB3RlYW1VaWQYASABKAwSDAoE",
            "bmFtZRgCIAEoCRIOCgZub2RlSWQYAyABKAMSFQoNZW5jcnlwdGVkRGF0YRgE",
            "IAEoCSIwCg5RdWV1ZWRUZWFtVXNlchIPCgd0ZWFtVWlkGAEgASgMEg0KBXVz",
            "ZXJzGAIgAygDIpEBCgpTc29TZXJ2aWNlEhwKFHNzb1NlcnZpY2VQcm92aWRl",
            "cklkGAEgASgDEg4KBm5vZGVJZBgCIAEoAxIMCgRuYW1lGAMgASgJEg4KBnNw",
            "X3VybBgEIAEoCRIWCg5pbnZpdGVOZXdVc2VycxgFIAEoCBIOCgZhY3RpdmUY",
            "BiABKAgSDwoHaXNDbG91ZBgHIAEoCCIxChBSZXBvcnRGaWx0ZXJVc2VyEg4K",
            "BnVzZXJJZBgBIAEoBRINCgVlbWFpbBgCIAEoCSKXAgodRGV2aWNlUmVxdWVz",
            "dEZvckFkbWluQXBwcm92YWwSEAoIZGV2aWNlSWQYASABKAMSGAoQZW50ZXJw",
            "cmlzZVVzZXJJZBgCIAEoAxIcChRlbmNyeXB0ZWREZXZpY2VUb2tlbhgDIAEo",
            "DBIXCg9kZXZpY2VQdWJsaWNLZXkYBCABKAwSEgoKZGV2aWNlTmFtZRgFIAEo",
            "CRIVCg1jbGllbnRWZXJzaW9uGAYgASgJEhIKCmRldmljZVR5cGUYByABKAkS",
            "DAoEZGF0ZRgIIAEoAxIRCglpcEFkZHJlc3MYCSABKAkSEAoIbG9jYXRpb24Y",
            "CiABKAkSDQoFZW1haWwYCyABKAkSEgoKYWNjb3VudFVpZBgMIAEoDCJgCg5F",
            "bnRlcnByaXNlRGF0YRIwCgZlbnRpdHkYASABKA4yIC5FbnRlcnByaXNlLkVu",
            "dGVycHJpc2VEYXRhRW50aXR5Eg4KBmRlbGV0ZRgCIAEoCBIMCgRkYXRhGAMg",
            "AygMItABChZFbnRlcnByaXNlRGF0YVJlc3BvbnNlEhkKEWNvbnRpbnVhdGlv",
            "blRva2VuGAEgASgMEg8KB2hhc01vcmUYAiABKAgSLAoLY2FjaGVTdGF0dXMY",
            "AyABKA4yFy5FbnRlcnByaXNlLkNhY2hlU3RhdHVzEigKBGRhdGEYBCADKAsy",
            "Gi5FbnRlcnByaXNlLkVudGVycHJpc2VEYXRhEjIKC2dlbmVyYWxEYXRhGAUg",
            "ASgLMh0uRW50ZXJwcmlzZS5HZW5lcmFsRGF0YUVudGl0eSIqCg1CYWNrdXBS",
            "ZXF1ZXN0EhkKEWNvbnRpbnVhdGlvblRva2VuGAEgASgMIpgBCgxCYWNrdXBS",
            "ZWNvcmQSDgoGdXNlcklkGAEgASgFEhEKCXJlY29yZFVpZBgCIAEoDBILCgNr",
            "ZXkYAyABKAwSKgoHa2V5VHlwZRgEIAEoDjIZLkVudGVycHJpc2UuQmFja3Vw",
            "S2V5VHlwZRIPCgd2ZXJzaW9uGAUgASgFEgwKBGRhdGEYBiABKAwSDQoFZXh0",
            "cmEYByABKAwiLgoJQmFja3VwS2V5Eg4KBnVzZXJJZBgBIAEoBRIRCgliYWNr",
            "dXBLZXkYAiABKAwijQIKCkJhY2t1cFVzZXISDgoGdXNlcklkGAEgASgFEhAK",
            "CHVzZXJOYW1lGAIgASgJEg8KB2RhdGFLZXkYAyABKAwSNgoLZGF0YUtleVR5",
            "cGUYBCABKA4yIS5FbnRlcnByaXNlLkJhY2t1cFVzZXJEYXRhS2V5VHlwZRIS",
            "Cgpwcml2YXRlS2V5GAUgASgMEg8KB3RyZWVLZXkYBiABKAwSLgoLdHJlZUtl",
            "eVR5cGUYByABKA4yGS5FbnRlcnByaXNlLkJhY2t1cEtleVR5cGUSKQoKYmFj",
            "a3VwS2V5cxgIIAMoCzIVLkVudGVycHJpc2UuQmFja3VwS2V5EhQKDHByaXZh",
            "dGVFQ0tleRgJIAEoDCKeAQoOQmFja3VwUmVzcG9uc2USHwoXZW50ZXJwcmlz",
            "ZUVjY1ByaXZhdGVLZXkYASABKAwSJQoFdXNlcnMYAiADKAsyFi5FbnRlcnBy",
            "aXNlLkJhY2t1cFVzZXISKQoHcmVjb3JkcxgDIAMoCzIYLkVudGVycHJpc2Uu",
            "QmFja3VwUmVjb3JkEhkKEWNvbnRpbnVhdGlvblRva2VuGAQgASgMIi4KHEdl",
            "dEVudGVycHJpc2VEYXRhS2V5c1JlcXVlc3QSDgoGcm9sZUlkGAEgAygDIv8B",
            "Ch1HZXRFbnRlcnByaXNlRGF0YUtleXNSZXNwb25zZRI6ChJyZUVuY3J5cHRl",
            "ZFJvbGVLZXkYASADKAsyHi5FbnRlcnByaXNlLlJlRW5jcnlwdGVkUm9sZUtl",
            "eRIkCgdyb2xlS2V5GAIgAygLMhMuRW50ZXJwcmlzZS5Sb2xlS2V5EiIKBm1z",
            "cEtleRgDIAEoCzISLkVudGVycHJpc2UuTXNwS2V5EjIKDmVudGVycHJpc2VL",
            "ZXlzGAQgASgLMhouRW50ZXJwcmlzZS5FbnRlcnByaXNlS2V5cxIkCgd0cmVl",
            "S2V5GAUgASgLMhMuRW50ZXJwcmlzZS5UcmVlS2V5Il4KB1JvbGVLZXkSDgoG",
            "cm9sZUlkGAEgASgDEhQKDGVuY3J5cHRlZEtleRgCIAEoCRItCgdrZXlUeXBl",
            "GAMgASgOMhwuRW50ZXJwcmlzZS5FbmNyeXB0ZWRLZXlUeXBlImQKBk1zcEtl",
            "eRIbChNlbmNyeXB0ZWRNc3BUcmVlS2V5GAEgASgJEj0KF2VuY3J5cHRlZE1z",
            "cFRyZWVLZXlUeXBlGAIgASgOMhwuRW50ZXJwcmlzZS5FbmNyeXB0ZWRLZXlU",
            "eXBlInwKDkVudGVycHJpc2VLZXlzEhQKDHJzYVB1YmxpY0tleRgBIAEoDBIe",
            "ChZyc2FFbmNyeXB0ZWRQcml2YXRlS2V5GAIgASgMEhQKDGVjY1B1YmxpY0tl",
            "eRgDIAEoDBIeChZlY2NFbmNyeXB0ZWRQcml2YXRlS2V5GAQgASgMIkgKB1Ry",
            "ZWVLZXkSDwoHdHJlZUtleRgBIAEoCRIsCglrZXlUeXBlSWQYAiABKA4yGS5F",
            "bnRlcnByaXNlLkJhY2t1cEtleVR5cGUiRQoUU2hhcmVkUmVjb3JkUmVzcG9u",
            "c2USLQoGZXZlbnRzGAEgAygLMh0uRW50ZXJwcmlzZS5TaGFyZWRSZWNvcmRF",
            "dmVudCJwChFTaGFyZWRSZWNvcmRFdmVudBIRCglyZWNvcmRVaWQYASABKAwS",
            "EAoIdXNlck5hbWUYAiABKAkSDwoHY2FuRWRpdBgDIAEoCBISCgpjYW5SZXNo",
            "YXJlGAQgASgIEhEKCXNoYXJlRnJvbRgFIAEoBSIuChxTZXRSZXN0cmljdFZp",
            "c2liaWxpdHlSZXF1ZXN0Eg4KBm5vZGVJZBgBIAEoAyLQAQoOVXNlckFkZFJl",
            "cXVlc3QSGAoQZW50ZXJwcmlzZVVzZXJJZBgBIAEoAxIOCgZub2RlSWQYAiAB",
            "KAMSFQoNZW5jcnlwdGVkRGF0YRgDIAEoDBItCgdrZXlUeXBlGAQgASgOMhwu",
            "RW50ZXJwcmlzZS5FbmNyeXB0ZWRLZXlUeXBlEhAKCGZ1bGxOYW1lGAUgASgJ",
            "EhAKCGpvYlRpdGxlGAYgASgJEg0KBWVtYWlsGAcgASgJEhsKE3N1cHByZXNz",
            "RW1haWxJbnZpdGUYCCABKAgiOgoRVXNlclVwZGF0ZVJlcXVlc3QSJQoFdXNl",
            "cnMYASADKAsyFi5FbnRlcnByaXNlLlVzZXJVcGRhdGUirwEKClVzZXJVcGRh",
            "dGUSGAoQZW50ZXJwcmlzZVVzZXJJZBgBIAEoAxIOCgZub2RlSWQYAiABKAMS",
            "FQoNZW5jcnlwdGVkRGF0YRgDIAEoDBItCgdrZXlUeXBlGAQgASgOMhwuRW50",
            "ZXJwcmlzZS5FbmNyeXB0ZWRLZXlUeXBlEhAKCGZ1bGxOYW1lGAUgASgJEhAK",
            "CGpvYlRpdGxlGAYgASgJEg0KBWVtYWlsGAcgASgJIkEKElVzZXJVcGRhdGVS",
            "ZXNwb25zZRIrCgV1c2VycxgBIAMoCzIcLkVudGVycHJpc2UuVXNlclVwZGF0",
            "ZVJlc3VsdCJaChBVc2VyVXBkYXRlUmVzdWx0EhgKEGVudGVycHJpc2VVc2Vy",
            "SWQYASABKAMSLAoGc3RhdHVzGAIgASgOMhwuRW50ZXJwcmlzZS5Vc2VyVXBk",
            "YXRlU3RhdHVzInIKIFByZWxpbWluYXJ5Q29tcGxpYW5jZURhdGFSZXF1ZXN0",
            "EhkKEWVudGVycHJpc2VVc2VySWRzGAEgAygDEhgKEGluY2x1ZGVOb25TaGFy",
            "ZWQYAiABKAgSGQoRY29udGludWF0aW9uVG9rZW4YAyABKAwinwEKIVByZWxp",
            "bWluYXJ5Q29tcGxpYW5jZURhdGFSZXNwb25zZRIwCg1hdWRpdFVzZXJEYXRh",
            "GAEgAygLMhkuRW50ZXJwcmlzZS5BdWRpdFVzZXJEYXRhEhkKEWNvbnRpbnVh",
            "dGlvblRva2VuGAIgASgMEg8KB2hhc01vcmUYAyABKAgSHAoUdG90YWxNYXRj",
            "aGluZ1JlY29yZHMYBCABKAUiSwoPQXVkaXRVc2VyUmVjb3JkEhEKCXJlY29y",
            "ZFVpZBgBIAEoDBIVCg1lbmNyeXB0ZWREYXRhGAIgASgMEg4KBnNoYXJlZBgD",
            "IAEoCCKNAQoNQXVkaXRVc2VyRGF0YRIYChBlbnRlcnByaXNlVXNlcklkGAEg",
            "ASgDEjUKEGF1ZGl0VXNlclJlY29yZHMYAiADKAsyGy5FbnRlcnByaXNlLkF1",
            "ZGl0VXNlclJlY29yZBIrCgZzdGF0dXMYAyABKA4yGy5FbnRlcnByaXNlLkF1",
            "ZGl0VXNlclN0YXR1cyJ/ChdDb21wbGlhbmNlUmVwb3J0RmlsdGVycxIUCgxy",
            "ZWNvcmRUaXRsZXMYASADKAkSEgoKcmVjb3JkVWlkcxgCIAMoDBIRCglqb2JU",
            "aXRsZXMYAyADKAMSDAoEdXJscxgEIAMoCRIZChFlbnRlcnByaXNlVXNlcklk",
            "cxgFIAMoAyJ/ChdDb21wbGlhbmNlUmVwb3J0UmVxdWVzdBI8ChNjb21wbGlh",
            "bmNlUmVwb3J0UnVuGAEgASgLMh8uRW50ZXJwcmlzZS5Db21wbGlhbmNlUmVw",
            "b3J0UnVuEhIKCnJlcG9ydE5hbWUYAiABKAkSEgoKc2F2ZVJlcG9ydBgDIAEo",
            "CCKFAQoTQ29tcGxpYW5jZVJlcG9ydFJ1bhJOChdyZXBvcnRDcml0ZXJpYUFu",
            "ZEZpbHRlchgBIAEoCzItLkVudGVycHJpc2UuQ29tcGxpYW5jZVJlcG9ydENy",
            "aXRlcmlhQW5kRmlsdGVyEg0KBXVzZXJzGAIgAygDEg8KB3JlY29yZHMYAyAD",
            "KAwi/AEKIUNvbXBsaWFuY2VSZXBvcnRDcml0ZXJpYUFuZEZpbHRlchIOCgZu",
            "b2RlSWQYASABKAMSEwoLY3JpdGVyaWFVaWQYAiABKAwSFAoMY3JpdGVyaWFO",
            "YW1lGAMgASgJEjYKCGNyaXRlcmlhGAQgASgLMiQuRW50ZXJwcmlzZS5Db21w",
            "bGlhbmNlUmVwb3J0Q3JpdGVyaWESMwoHZmlsdGVycxgFIAMoCzIiLkVudGVy",
            "cHJpc2UuQ29tcGxpYW5jZVJlcG9ydEZpbHRlchIUCgxsYXN0TW9kaWZpZWQY",
            "BiABKAMSGQoRbm9kZUVuY3J5cHRlZERhdGEYByABKAwiYgoYQ29tcGxpYW5j",
            "ZVJlcG9ydENyaXRlcmlhEhEKCWpvYlRpdGxlcxgBIAMoCRIZChFlbnRlcnBy",
            "aXNlVXNlcklkcxgCIAMoAxIYChBpbmNsdWRlTm9uU2hhcmVkGAMgASgIIngK",
            "FkNvbXBsaWFuY2VSZXBvcnRGaWx0ZXISFAoMcmVjb3JkVGl0bGVzGAEgAygJ",
            "EhIKCnJlY29yZFVpZHMYAiADKAwSEQoJam9iVGl0bGVzGAMgAygJEgwKBHVy",
            "bHMYBCADKAkSEwoLcmVjb3JkVHlwZXMYBSADKAkioQUKGENvbXBsaWFuY2VS",
            "ZXBvcnRSZXNwb25zZRIVCg1kYXRlR2VuZXJhdGVkGAEgASgDEhUKDXJ1bkJ5",
            "VXNlck5hbWUYAiABKAkSEgoKcmVwb3J0TmFtZRgDIAEoCRIRCglyZXBvcnRV",
            "aWQYBCABKAwSPAoTY29tcGxpYW5jZVJlcG9ydFJ1bhgFIAEoCzIfLkVudGVy",
            "cHJpc2UuQ29tcGxpYW5jZVJlcG9ydFJ1bhItCgx1c2VyUHJvZmlsZXMYBiAD",
            "KAsyFy5FbnRlcnByaXNlLlVzZXJQcm9maWxlEikKCmF1ZGl0VGVhbXMYByAD",
            "KAsyFS5FbnRlcnByaXNlLkF1ZGl0VGVhbRItCgxhdWRpdFJlY29yZHMYCCAD",
            "KAsyFy5FbnRlcnByaXNlLkF1ZGl0UmVjb3JkEisKC3VzZXJSZWNvcmRzGAkg",
            "AygLMhYuRW50ZXJwcmlzZS5Vc2VyUmVjb3JkEjsKE3NoYXJlZEZvbGRlclJl",
            "Y29yZHMYCiADKAsyHi5FbnRlcnByaXNlLlNoYXJlZEZvbGRlclJlY29yZBI3",
            "ChFzaGFyZWRGb2xkZXJVc2VycxgLIAMoCzIcLkVudGVycHJpc2UuU2hhcmVk",
            "Rm9sZGVyVXNlchI3ChFzaGFyZWRGb2xkZXJUZWFtcxgMIAMoCzIcLkVudGVy",
            "cHJpc2UuU2hhcmVkRm9sZGVyVGVhbRIxCg5hdWRpdFRlYW1Vc2VycxgNIAMo",
            "CzIZLkVudGVycHJpc2UuQXVkaXRUZWFtVXNlchIpCgphdWRpdFJvbGVzGA4g",
            "AygLMhUuRW50ZXJwcmlzZS5BdWRpdFJvbGUSLwoNbGlua2VkUmVjb3JkcxgP",
            "IAMoCzIYLkVudGVycHJpc2UuTGlua2VkUmVjb3JkIoEBCgtBdWRpdFJlY29y",
            "ZBIRCglyZWNvcmRVaWQYASABKAwSEQoJYXVkaXREYXRhGAIgASgMEhYKDmhh",
            "c0F0dGFjaG1lbnRzGAMgASgIEg8KB2luVHJhc2gYBCABKAgSEAoIdHJlZUxl",
            "ZnQYBSABKAUSEQoJdHJlZVJpZ2h0GAYgASgFIoACCglBdWRpdFJvbGUSDgoG",
            "cm9sZUlkGAEgASgDEhUKDWVuY3J5cHRlZERhdGEYAiABKAwSJgoecmVzdHJp",
            "Y3RTaGFyZU91dHNpZGVFbnRlcnByaXNlGAMgASgIEhgKEHJlc3RyaWN0U2hh",
            "cmVBbGwYBCABKAgSIgoacmVzdHJpY3RTaGFyZU9mQXR0YWNobWVudHMYBSAB",
            "KAgSKQohcmVzdHJpY3RNYXNrUGFzc3dvcmRzV2hpbGVFZGl0aW5nGAYgASgI",
            "EjsKE3JvbGVOb2RlTWFuYWdlbWVudHMYByADKAsyHi5FbnRlcnByaXNlLlJv",
            "bGVOb2RlTWFuYWdlbWVudCJeChJSb2xlTm9kZU1hbmFnZW1lbnQSEAoIdHJl",
            "ZUxlZnQYASABKAUSEQoJdHJlZVJpZ2h0GAIgASgFEg8KB2Nhc2NhZGUYAyAB",
            "KAgSEgoKcHJpdmlsZWdlcxgEIAEoBSJrCgtVc2VyUHJvZmlsZRIYChBlbnRl",
            "cnByaXNlVXNlcklkGAEgASgDEhAKCGZ1bGxOYW1lGAIgASgJEhAKCGpvYlRp",
            "dGxlGAMgASgJEg0KBWVtYWlsGAQgASgJEg8KB3JvbGVJZHMYBSADKAMiPQoQ",
            "UmVjb3JkUGVybWlzc2lvbhIRCglyZWNvcmRVaWQYASABKAwSFgoOcGVybWlz",
            "c2lvbkJpdHMYAiABKAUiXwoKVXNlclJlY29yZBIYChBlbnRlcnByaXNlVXNl",
            "cklkGAEgASgDEjcKEXJlY29yZFBlcm1pc3Npb25zGAIgAygLMhwuRW50ZXJw",
            "cmlzZS5SZWNvcmRQZXJtaXNzaW9uIlsKCUF1ZGl0VGVhbRIPCgd0ZWFtVWlk",
            "GAEgASgMEhAKCHRlYW1OYW1lGAIgASgJEhQKDHJlc3RyaWN0RWRpdBgDIAEo",
            "CBIVCg1yZXN0cmljdFNoYXJlGAQgASgIIjsKDUF1ZGl0VGVhbVVzZXISDwoH",
            "dGVhbVVpZBgBIAEoDBIZChFlbnRlcnByaXNlVXNlcklkcxgCIAMoAyJmChJT",
            "aGFyZWRGb2xkZXJSZWNvcmQSFwoPc2hhcmVkRm9sZGVyVWlkGAEgASgMEjcK",
            "EXJlY29yZFBlcm1pc3Npb25zGAIgAygLMhwuRW50ZXJwcmlzZS5SZWNvcmRQ",
            "ZXJtaXNzaW9uIkYKEFNoYXJlZEZvbGRlclVzZXISFwoPc2hhcmVkRm9sZGVy",
            "VWlkGAEgASgMEhkKEWVudGVycHJpc2VVc2VySWRzGAIgAygDIj0KEFNoYXJl",
            "ZEZvbGRlclRlYW0SFwoPc2hhcmVkRm9sZGVyVWlkGAEgASgMEhAKCHRlYW1V",
            "aWRzGAIgAygMIi8KGkdldENvbXBsaWFuY2VSZXBvcnRSZXF1ZXN0EhEKCXJl",
            "cG9ydFVpZBgBIAEoDCIyChtHZXRDb21wbGlhbmNlUmVwb3J0UmVzcG9uc2US",
            "EwoLZG93bmxvYWRVcmwYASABKAkiNgofQ29tcGxpYW5jZVJlcG9ydENyaXRl",
            "cmlhUmVxdWVzdBITCgtjcml0ZXJpYVVpZBgBIAEoDCI7CiRTYXZlQ29tcGxp",
            "YW5jZVJlcG9ydENyaXRlcmlhUmVzcG9uc2USEwoLY3JpdGVyaWFVaWQYASAB",
            "KAwiNAoMTGlua2VkUmVjb3JkEhAKCG93bmVyVWlkGAEgASgMEhIKCnJlY29y",
            "ZFVpZHMYAiADKAwiMgoXR2V0U2hhcmluZ0FkbWluc1JlcXVlc3QSFwoPc2hh",
            "cmVkRm9sZGVyVWlkGAEgASgMIksKGEdldFNoYXJpbmdBZG1pbnNSZXNwb25z",
            "ZRIvCg1zaGFyaW5nQWRtaW5zGAEgAygLMhguRW50ZXJwcmlzZS5TaGFyaW5n",
            "QWRtaW4iIAoMU2hhcmluZ0FkbWluEhAKCHVzZXJuYW1lGAEgASgJKhsKB0tl",
            "eVR5cGUSBwoDUlNBEAASBwoDRUNDEAEqPQoORW50ZXJwcmlzZVR5cGUSFwoT",
            "RU5URVJQUklTRV9TVEFOREFSRBAAEhIKDkVOVEVSUFJJU0VfTVNQEAEq4QMK",
            "FEVudGVycHJpc2VEYXRhRW50aXR5EgsKB1VOS05PV04QABIJCgVOT0RFUxAB",
            "EgkKBVJPTEVTEAISCQoFVVNFUlMQAxIJCgVURUFNUxAEEg4KClRFQU1fVVNF",
            "UlMQBRIOCgpST0xFX1VTRVJTEAYSEwoPUk9MRV9QUklWSUxFR0VTEAcSFQoR",
            "Uk9MRV9FTkZPUkNFTUVOVFMQCBIOCgpST0xFX1RFQU1TEAkSDAoITElDRU5T",
            "RVMQChIRCg1NQU5BR0VEX05PREVTEAsSFQoRTUFOQUdFRF9DT01QQU5JRVMQ",
            "DBILCgdCUklER0VTEA0SCQoFU0NJTVMQDhITCg9FTUFJTF9QUk9WSVNJT04Q",
            "DxIQCgxRVUVVRURfVEVBTVMQEBIVChFRVUVVRURfVEVBTV9VU0VSUxAREhAK",
            "DFNTT19TRVJWSUNFUxASEhcKE1JFUE9SVF9GSUxURVJfVVNFUlMQExImCiJE",
            "RVZJQ0VTX1JFUVVFU1RfRk9SX0FETUlOX0FQUFJPVkFMEBQSEAoMVVNFUl9B",
            "TElBU0VTEBUSKQolQ09NUExJQU5DRV9SRVBPUlRfQ1JJVEVSSUFfQU5EX0ZJ",
            "TFRFUhAWEhYKEkNPTVBMSUFOQ0VfUkVQT1JUUxAXKiIKC0NhY2hlU3RhdHVz",
            "EggKBEtFRVAQABIJCgVDTEVBUhABKpMBCg1CYWNrdXBLZXlUeXBlEgoKBk5P",
            "X0tFWRAAEhkKFUVOQ1JZUFRFRF9CWV9EQVRBX0tFWRABEhsKF0VOQ1JZUFRF",
            "RF9CWV9QVUJMSUNfS0VZEAISHQoZRU5DUllQVEVEX0JZX0RBVEFfS0VZX0dD",
            "TRADEh8KG0VOQ1JZUFRFRF9CWV9QVUJMSUNfS0VZX0VDQxAEKjoKFUJhY2t1",
            "cFVzZXJEYXRhS2V5VHlwZRIHCgNPV04QABIYChRTSEFSRURfVE9fRU5URVJQ",
            "UklTRRABKqUBChBFbmNyeXB0ZWRLZXlUeXBlEg0KCUtUX05PX0tFWRAAEhwK",
            "GEtUX0VOQ1JZUFRFRF9CWV9EQVRBX0tFWRABEh4KGktUX0VOQ1JZUFRFRF9C",
            "WV9QVUJMSUNfS0VZEAISIAocS1RfRU5DUllQVEVEX0JZX0RBVEFfS0VZX0dD",
            "TRADEiIKHktUX0VOQ1JZUFRFRF9CWV9QVUJMSUNfS0VZX0VDQxAEKpUBChJF",
            "bnRlcnByaXNlRmxhZ1R5cGUSCwoHSU5WQUxJRBAAEhoKFkFMTE9XX1BFUlNP",
            "TkFMX0xJQ0VOU0UQARIYChRTUEVDSUFMX1BST1ZJU0lPTklORxACEhAKDFJF",
            "Q09SRF9UWVBFUxADEhMKD1NFQ1JFVFNfTUFOQUdFUhAEEhUKEUVOVEVSUFJJ",
            "U0VfTE9DS0VEEAUqRQoQVXNlclVwZGF0ZVN0YXR1cxISCg5VU0VSX1VQREFU",
            "RV9PSxAAEh0KGVVTRVJfVVBEQVRFX0FDQ0VTU19ERU5JRUQQASpJCg9BdWRp",
            "dFVzZXJTdGF0dXMSBgoCT0sQABIRCg1BQ0NFU1NfREVOSUVEEAESGwoXTk9f",
            "TE9OR0VSX0lOX0VOVEVSUFJJU0UQAkImChhjb20ua2VlcGVyc2VjdXJpdHku",
            "cHJvdG9CCkVudGVycHJpc2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Enterprise.KeyType), typeof(global::Enterprise.EnterpriseType), typeof(global::Enterprise.EnterpriseDataEntity), typeof(global::Enterprise.CacheStatus), typeof(global::Enterprise.BackupKeyType), typeof(global::Enterprise.BackupUserDataKeyType), typeof(global::Enterprise.EncryptedKeyType), typeof(global::Enterprise.EnterpriseFlagType), typeof(global::Enterprise.UserUpdateStatus), typeof(global::Enterprise.AuditUserStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseKeyPairRequest), global::Enterprise.EnterpriseKeyPairRequest.Parser, new[]{ "EnterprisePublicKey", "EncryptedEnterprisePrivateKey", "KeyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.GetTeamMemberRequest), global::Enterprise.GetTeamMemberRequest.Parser, new[]{ "TeamUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseUser), global::Enterprise.EnterpriseUser.Parser, new[]{ "EnterpriseUserId", "Email", "EnterpriseUsername", "IsShareAdmin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.GetTeamMemberResponse), global::Enterprise.GetTeamMemberResponse.Parser, new[]{ "EnterpriseUser" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseUserIds), global::Enterprise.EnterpriseUserIds.Parser, new[]{ "EnterpriseUserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterprisePersonalAccount), global::Enterprise.EnterprisePersonalAccount.Parser, new[]{ "Email", "OBSOLETEFIELD" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EncryptedTeamKeyRequest), global::Enterprise.EncryptedTeamKeyRequest.Parser, new[]{ "TeamUid", "EncryptedTeamKey", "Force" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ReEncryptedData), global::Enterprise.ReEncryptedData.Parser, new[]{ "Id", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ReEncryptedRoleKey), global::Enterprise.ReEncryptedRoleKey.Parser, new[]{ "RoleId", "EncryptedRoleKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.NodeToManagedCompanyRequest), global::Enterprise.NodeToManagedCompanyRequest.Parser, new[]{ "CompanyId", "Nodes", "Roles", "Users", "RoleKeys", "TeamKeys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.RoleTeam), global::Enterprise.RoleTeam.Parser, new[]{ "RoleId", "TeamUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.RoleTeams), global::Enterprise.RoleTeams.Parser, new[]{ "RoleTeam" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseRegistration), global::Enterprise.EnterpriseRegistration.Parser, new[]{ "EncryptedTreeKey", "EnterpriseName", "RootNodeData", "AdminUserData", "AdminName", "RoleData", "RsaKeyPair", "NumberSeats", "EnterpriseType", "RolePublicKey", "RolePrivateKeyEncryptedWithRoleKey", "RoleKeyEncryptedWithTreeKey", "EccKeyPair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.DomainPasswordRulesRequest), global::Enterprise.DomainPasswordRulesRequest.Parser, new[]{ "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.DomainPasswordRulesFields), global::Enterprise.DomainPasswordRulesFields.Parser, new[]{ "Type", "Minimum", "Maximum", "Allowed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.LoginToMcRequest), global::Enterprise.LoginToMcRequest.Parser, new[]{ "McEnterpriseId", "MessageSessionUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.LoginToMcResponse), global::Enterprise.LoginToMcResponse.Parser, new[]{ "EncryptedSessionToken", "EncryptedTreeKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.DomainPasswordRulesResponse), global::Enterprise.DomainPasswordRulesResponse.Parser, new[]{ "DomainPasswordRulesFields" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ApproveUserDeviceRequest), global::Enterprise.ApproveUserDeviceRequest.Parser, new[]{ "EnterpriseUserId", "EncryptedDeviceToken", "EncryptedDeviceDataKey", "DenyApproval" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ApproveUserDeviceResponse), global::Enterprise.ApproveUserDeviceResponse.Parser, new[]{ "EnterpriseUserId", "EncryptedDeviceToken", "Failed", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ApproveUserDevicesRequest), global::Enterprise.ApproveUserDevicesRequest.Parser, new[]{ "DeviceRequests" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ApproveUserDevicesResponse), global::Enterprise.ApproveUserDevicesResponse.Parser, new[]{ "DeviceResponses" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseUserDataKey), global::Enterprise.EnterpriseUserDataKey.Parser, new[]{ "EnterpriseUserId", "UserEncryptedDataKey", "KeyTypeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseUserDataKeys), global::Enterprise.EnterpriseUserDataKeys.Parser, new[]{ "Keys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseDataRequest), global::Enterprise.EnterpriseDataRequest.Parser, new[]{ "ContinuationToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.SpecialProvisioning), global::Enterprise.SpecialProvisioning.Parser, new[]{ "Url", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.GeneralDataEntity), global::Enterprise.GeneralDataEntity.Parser, new[]{ "EnterpriseName", "RestrictVisibility", "SpecialProvisioning", "UserPrivilege" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.Node), global::Enterprise.Node.Parser, new[]{ "NodeId", "ParentId", "BridgeId", "ScimId", "LicenseId", "EncryptedData", "DuoEnabled", "RsaEnabled", "SsoServiceProviderId", "RestrictVisibility", "SsoServiceProviderIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.Role), global::Enterprise.Role.Parser, new[]{ "RoleId", "NodeId", "EncryptedData", "KeyType", "VisibleBelow", "NewUserInherit", "RoleType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.User), global::Enterprise.User.Parser, new[]{ "EnterpriseUserId", "NodeId", "EncryptedData", "KeyType", "Username", "Status", "Lock", "UserId", "AccountShareExpiration", "FullName", "JobTitle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.UserAlias), global::Enterprise.UserAlias.Parser, new[]{ "EnterpriseUserId", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ComplianceReportMetaData), global::Enterprise.ComplianceReportMetaData.Parser, new[]{ "ReportUid", "NodeId", "ReportName", "DateGenerated", "RunByName", "NumberOfOwners", "NumberOfRecords" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ManagedNode), global::Enterprise.ManagedNode.Parser, new[]{ "RoleId", "ManagedNodeId", "CascadeNodeManagement" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.UserManagedNode), global::Enterprise.UserManagedNode.Parser, new[]{ "NodeId", "CascadeNodeManagement", "Privileges" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.UserPrivilege), global::Enterprise.UserPrivilege.Parser, new[]{ "UserManagedNodes", "EnterpriseUserId", "EncryptedData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.RoleUser), global::Enterprise.RoleUser.Parser, new[]{ "RoleId", "EnterpriseUserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.RolePrivilege), global::Enterprise.RolePrivilege.Parser, new[]{ "ManagedNodeId", "RoleId", "PrivilegeType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.RoleEnforcement), global::Enterprise.RoleEnforcement.Parser, new[]{ "RoleId", "EnforcementType", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.Team), global::Enterprise.Team.Parser, new[]{ "TeamUid", "Name", "NodeId", "RestrictEdit", "RestrictShare", "RestrictView", "EncryptedData", "EncryptedTeamKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.TeamUser), global::Enterprise.TeamUser.Parser, new[]{ "TeamUid", "EnterpriseUserId", "UserType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ManagedCompany), global::Enterprise.ManagedCompany.Parser, new[]{ "McEnterpriseId", "McEnterpriseName", "MspNodeId", "NumberOfSeats", "NumberOfUsers", "ProductId", "IsExpired", "TreeKey", "TreeKeyRole", "FilePlanType", "AddOns" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.MSPPool), global::Enterprise.MSPPool.Parser, new[]{ "ProductId", "Seats", "AvailableSeats", "Stash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.MSPContact), global::Enterprise.MSPContact.Parser, new[]{ "EnterpriseId", "EnterpriseName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.LicenseAddOn), global::Enterprise.LicenseAddOn.Parser, new[]{ "Name", "Enabled", "IsTrial", "Expiration", "Created", "Seats", "ActivationTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.License), global::Enterprise.License.Parser, new[]{ "Paid", "NumberOfSeats", "Expiration", "LicenseKeyId", "ProductTypeId", "Name", "EnterpriseLicenseId", "SeatsAllocated", "SeatsPending", "Tier", "FilePlanTypeId", "MaxBytes", "StorageExpiration", "LicenseStatus", "MspPool", "ManagedBy", "AddOns", "NextBillingDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.Bridge), global::Enterprise.Bridge.Parser, new[]{ "BridgeId", "NodeId", "WanIpEnforcement", "LanIpEnforcement", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.Scim), global::Enterprise.Scim.Parser, new[]{ "ScimId", "NodeId", "Status", "LastSynced", "RolePrefix", "UniqueGroups" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EmailProvision), global::Enterprise.EmailProvision.Parser, new[]{ "Id", "NodeId", "Domain", "Method" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.QueuedTeam), global::Enterprise.QueuedTeam.Parser, new[]{ "TeamUid", "Name", "NodeId", "EncryptedData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.QueuedTeamUser), global::Enterprise.QueuedTeamUser.Parser, new[]{ "TeamUid", "Users" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.SsoService), global::Enterprise.SsoService.Parser, new[]{ "SsoServiceProviderId", "NodeId", "Name", "SpUrl", "InviteNewUsers", "Active", "IsCloud" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ReportFilterUser), global::Enterprise.ReportFilterUser.Parser, new[]{ "UserId", "Email" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.DeviceRequestForAdminApproval), global::Enterprise.DeviceRequestForAdminApproval.Parser, new[]{ "DeviceId", "EnterpriseUserId", "EncryptedDeviceToken", "DevicePublicKey", "DeviceName", "ClientVersion", "DeviceType", "Date", "IpAddress", "Location", "Email", "AccountUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseData), global::Enterprise.EnterpriseData.Parser, new[]{ "Entity", "Delete", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseDataResponse), global::Enterprise.EnterpriseDataResponse.Parser, new[]{ "ContinuationToken", "HasMore", "CacheStatus", "Data", "GeneralData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.BackupRequest), global::Enterprise.BackupRequest.Parser, new[]{ "ContinuationToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.BackupRecord), global::Enterprise.BackupRecord.Parser, new[]{ "UserId", "RecordUid", "Key", "KeyType", "Version", "Data", "Extra" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.BackupKey), global::Enterprise.BackupKey.Parser, new[]{ "UserId", "BackupKey_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.BackupUser), global::Enterprise.BackupUser.Parser, new[]{ "UserId", "UserName", "DataKey", "DataKeyType", "PrivateKey", "TreeKey", "TreeKeyType", "BackupKeys", "PrivateECKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.BackupResponse), global::Enterprise.BackupResponse.Parser, new[]{ "EnterpriseEccPrivateKey", "Users", "Records", "ContinuationToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.GetEnterpriseDataKeysRequest), global::Enterprise.GetEnterpriseDataKeysRequest.Parser, new[]{ "RoleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.GetEnterpriseDataKeysResponse), global::Enterprise.GetEnterpriseDataKeysResponse.Parser, new[]{ "ReEncryptedRoleKey", "RoleKey", "MspKey", "EnterpriseKeys", "TreeKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.RoleKey), global::Enterprise.RoleKey.Parser, new[]{ "RoleId", "EncryptedKey", "KeyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.MspKey), global::Enterprise.MspKey.Parser, new[]{ "EncryptedMspTreeKey", "EncryptedMspTreeKeyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.EnterpriseKeys), global::Enterprise.EnterpriseKeys.Parser, new[]{ "RsaPublicKey", "RsaEncryptedPrivateKey", "EccPublicKey", "EccEncryptedPrivateKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.TreeKey), global::Enterprise.TreeKey.Parser, new[]{ "TreeKey_", "KeyTypeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.SharedRecordResponse), global::Enterprise.SharedRecordResponse.Parser, new[]{ "Events" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.SharedRecordEvent), global::Enterprise.SharedRecordEvent.Parser, new[]{ "RecordUid", "UserName", "CanEdit", "CanReshare", "ShareFrom" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.SetRestrictVisibilityRequest), global::Enterprise.SetRestrictVisibilityRequest.Parser, new[]{ "NodeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.UserAddRequest), global::Enterprise.UserAddRequest.Parser, new[]{ "EnterpriseUserId", "NodeId", "EncryptedData", "KeyType", "FullName", "JobTitle", "Email", "SuppressEmailInvite" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.UserUpdateRequest), global::Enterprise.UserUpdateRequest.Parser, new[]{ "Users" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.UserUpdate), global::Enterprise.UserUpdate.Parser, new[]{ "EnterpriseUserId", "NodeId", "EncryptedData", "KeyType", "FullName", "JobTitle", "Email" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.UserUpdateResponse), global::Enterprise.UserUpdateResponse.Parser, new[]{ "Users" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.UserUpdateResult), global::Enterprise.UserUpdateResult.Parser, new[]{ "EnterpriseUserId", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.PreliminaryComplianceDataRequest), global::Enterprise.PreliminaryComplianceDataRequest.Parser, new[]{ "EnterpriseUserIds", "IncludeNonShared", "ContinuationToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.PreliminaryComplianceDataResponse), global::Enterprise.PreliminaryComplianceDataResponse.Parser, new[]{ "AuditUserData", "ContinuationToken", "HasMore", "TotalMatchingRecords" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.AuditUserRecord), global::Enterprise.AuditUserRecord.Parser, new[]{ "RecordUid", "EncryptedData", "Shared" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.AuditUserData), global::Enterprise.AuditUserData.Parser, new[]{ "EnterpriseUserId", "AuditUserRecords", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ComplianceReportFilters), global::Enterprise.ComplianceReportFilters.Parser, new[]{ "RecordTitles", "RecordUids", "JobTitles", "Urls", "EnterpriseUserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ComplianceReportRequest), global::Enterprise.ComplianceReportRequest.Parser, new[]{ "ComplianceReportRun", "ReportName", "SaveReport" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ComplianceReportRun), global::Enterprise.ComplianceReportRun.Parser, new[]{ "ReportCriteriaAndFilter", "Users", "Records" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ComplianceReportCriteriaAndFilter), global::Enterprise.ComplianceReportCriteriaAndFilter.Parser, new[]{ "NodeId", "CriteriaUid", "CriteriaName", "Criteria", "Filters", "LastModified", "NodeEncryptedData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ComplianceReportCriteria), global::Enterprise.ComplianceReportCriteria.Parser, new[]{ "JobTitles", "EnterpriseUserIds", "IncludeNonShared" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ComplianceReportFilter), global::Enterprise.ComplianceReportFilter.Parser, new[]{ "RecordTitles", "RecordUids", "JobTitles", "Urls", "RecordTypes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ComplianceReportResponse), global::Enterprise.ComplianceReportResponse.Parser, new[]{ "DateGenerated", "RunByUserName", "ReportName", "ReportUid", "ComplianceReportRun", "UserProfiles", "AuditTeams", "AuditRecords", "UserRecords", "SharedFolderRecords", "SharedFolderUsers", "SharedFolderTeams", "AuditTeamUsers", "AuditRoles", "LinkedRecords" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.AuditRecord), global::Enterprise.AuditRecord.Parser, new[]{ "RecordUid", "AuditData", "HasAttachments", "InTrash", "TreeLeft", "TreeRight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.AuditRole), global::Enterprise.AuditRole.Parser, new[]{ "RoleId", "EncryptedData", "RestrictShareOutsideEnterprise", "RestrictShareAll", "RestrictShareOfAttachments", "RestrictMaskPasswordsWhileEditing", "RoleNodeManagements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.RoleNodeManagement), global::Enterprise.RoleNodeManagement.Parser, new[]{ "TreeLeft", "TreeRight", "Cascade", "Privileges" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.UserProfile), global::Enterprise.UserProfile.Parser, new[]{ "EnterpriseUserId", "FullName", "JobTitle", "Email", "RoleIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.RecordPermission), global::Enterprise.RecordPermission.Parser, new[]{ "RecordUid", "PermissionBits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.UserRecord), global::Enterprise.UserRecord.Parser, new[]{ "EnterpriseUserId", "RecordPermissions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.AuditTeam), global::Enterprise.AuditTeam.Parser, new[]{ "TeamUid", "TeamName", "RestrictEdit", "RestrictShare" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.AuditTeamUser), global::Enterprise.AuditTeamUser.Parser, new[]{ "TeamUid", "EnterpriseUserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.SharedFolderRecord), global::Enterprise.SharedFolderRecord.Parser, new[]{ "SharedFolderUid", "RecordPermissions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.SharedFolderUser), global::Enterprise.SharedFolderUser.Parser, new[]{ "SharedFolderUid", "EnterpriseUserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.SharedFolderTeam), global::Enterprise.SharedFolderTeam.Parser, new[]{ "SharedFolderUid", "TeamUids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.GetComplianceReportRequest), global::Enterprise.GetComplianceReportRequest.Parser, new[]{ "ReportUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.GetComplianceReportResponse), global::Enterprise.GetComplianceReportResponse.Parser, new[]{ "DownloadUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.ComplianceReportCriteriaRequest), global::Enterprise.ComplianceReportCriteriaRequest.Parser, new[]{ "CriteriaUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.SaveComplianceReportCriteriaResponse), global::Enterprise.SaveComplianceReportCriteriaResponse.Parser, new[]{ "CriteriaUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.LinkedRecord), global::Enterprise.LinkedRecord.Parser, new[]{ "OwnerUid", "RecordUids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.GetSharingAdminsRequest), global::Enterprise.GetSharingAdminsRequest.Parser, new[]{ "SharedFolderUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.GetSharingAdminsResponse), global::Enterprise.GetSharingAdminsResponse.Parser, new[]{ "SharingAdmins" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Enterprise.SharingAdmin), global::Enterprise.SharingAdmin.Parser, new[]{ "Username" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum KeyType {
    [pbr::OriginalName("RSA")] Rsa = 0,
    [pbr::OriginalName("ECC")] Ecc = 1,
  }

  public enum EnterpriseType {
    [pbr::OriginalName("ENTERPRISE_STANDARD")] EnterpriseStandard = 0,
    [pbr::OriginalName("ENTERPRISE_MSP")] EnterpriseMsp = 1,
  }

  public enum EnterpriseDataEntity {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("NODES")] Nodes = 1,
    [pbr::OriginalName("ROLES")] Roles = 2,
    [pbr::OriginalName("USERS")] Users = 3,
    [pbr::OriginalName("TEAMS")] Teams = 4,
    [pbr::OriginalName("TEAM_USERS")] TeamUsers = 5,
    [pbr::OriginalName("ROLE_USERS")] RoleUsers = 6,
    [pbr::OriginalName("ROLE_PRIVILEGES")] RolePrivileges = 7,
    [pbr::OriginalName("ROLE_ENFORCEMENTS")] RoleEnforcements = 8,
    [pbr::OriginalName("ROLE_TEAMS")] RoleTeams = 9,
    [pbr::OriginalName("LICENSES")] Licenses = 10,
    [pbr::OriginalName("MANAGED_NODES")] ManagedNodes = 11,
    [pbr::OriginalName("MANAGED_COMPANIES")] ManagedCompanies = 12,
    [pbr::OriginalName("BRIDGES")] Bridges = 13,
    [pbr::OriginalName("SCIMS")] Scims = 14,
    [pbr::OriginalName("EMAIL_PROVISION")] EmailProvision = 15,
    [pbr::OriginalName("QUEUED_TEAMS")] QueuedTeams = 16,
    [pbr::OriginalName("QUEUED_TEAM_USERS")] QueuedTeamUsers = 17,
    [pbr::OriginalName("SSO_SERVICES")] SsoServices = 18,
    [pbr::OriginalName("REPORT_FILTER_USERS")] ReportFilterUsers = 19,
    [pbr::OriginalName("DEVICES_REQUEST_FOR_ADMIN_APPROVAL")] DevicesRequestForAdminApproval = 20,
    [pbr::OriginalName("USER_ALIASES")] UserAliases = 21,
    [pbr::OriginalName("COMPLIANCE_REPORT_CRITERIA_AND_FILTER")] ComplianceReportCriteriaAndFilter = 22,
    [pbr::OriginalName("COMPLIANCE_REPORTS")] ComplianceReports = 23,
  }

  public enum CacheStatus {
    [pbr::OriginalName("KEEP")] Keep = 0,
    [pbr::OriginalName("CLEAR")] Clear = 1,
  }

  public enum BackupKeyType {
    [pbr::OriginalName("NO_KEY")] NoKey = 0,
    [pbr::OriginalName("ENCRYPTED_BY_DATA_KEY")] EncryptedByDataKey = 1,
    [pbr::OriginalName("ENCRYPTED_BY_PUBLIC_KEY")] EncryptedByPublicKey = 2,
    [pbr::OriginalName("ENCRYPTED_BY_DATA_KEY_GCM")] EncryptedByDataKeyGcm = 3,
    [pbr::OriginalName("ENCRYPTED_BY_PUBLIC_KEY_ECC")] EncryptedByPublicKeyEcc = 4,
  }

  public enum BackupUserDataKeyType {
    [pbr::OriginalName("OWN")] Own = 0,
    [pbr::OriginalName("SHARED_TO_ENTERPRISE")] SharedToEnterprise = 1,
  }

  public enum EncryptedKeyType {
    [pbr::OriginalName("KT_NO_KEY")] KtNoKey = 0,
    [pbr::OriginalName("KT_ENCRYPTED_BY_DATA_KEY")] KtEncryptedByDataKey = 1,
    [pbr::OriginalName("KT_ENCRYPTED_BY_PUBLIC_KEY")] KtEncryptedByPublicKey = 2,
    [pbr::OriginalName("KT_ENCRYPTED_BY_DATA_KEY_GCM")] KtEncryptedByDataKeyGcm = 3,
    [pbr::OriginalName("KT_ENCRYPTED_BY_PUBLIC_KEY_ECC")] KtEncryptedByPublicKeyEcc = 4,
  }

  public enum EnterpriseFlagType {
    [pbr::OriginalName("INVALID")] Invalid = 0,
    [pbr::OriginalName("ALLOW_PERSONAL_LICENSE")] AllowPersonalLicense = 1,
    [pbr::OriginalName("SPECIAL_PROVISIONING")] SpecialProvisioning = 2,
    [pbr::OriginalName("RECORD_TYPES")] RecordTypes = 3,
    [pbr::OriginalName("SECRETS_MANAGER")] SecretsManager = 4,
    [pbr::OriginalName("ENTERPRISE_LOCKED")] EnterpriseLocked = 5,
  }

  public enum UserUpdateStatus {
    /// <summary>
    ///  can't use OK because it's already defined in AuditUserStatus
    /// </summary>
    [pbr::OriginalName("USER_UPDATE_OK")] UserUpdateOk = 0,
    /// <summary>
    ///  same deal for ACCESS_DENIED
    /// </summary>
    [pbr::OriginalName("USER_UPDATE_ACCESS_DENIED")] UserUpdateAccessDenied = 1,
  }

  public enum AuditUserStatus {
    [pbr::OriginalName("OK")] Ok = 0,
    /// <summary>
    ///on a node with no privilege
    /// </summary>
    [pbr::OriginalName("ACCESS_DENIED")] AccessDenied = 1,
    /// <summary>
    ///because user isn't in enterprise, i.e. deleted
    /// </summary>
    [pbr::OriginalName("NO_LONGER_IN_ENTERPRISE")] NoLongerInEnterprise = 2,
  }

  #endregion

  #region Messages
  public sealed partial class EnterpriseKeyPairRequest : pb::IMessage<EnterpriseKeyPairRequest> {
    private static readonly pb::MessageParser<EnterpriseKeyPairRequest> _parser = new pb::MessageParser<EnterpriseKeyPairRequest>(() => new EnterpriseKeyPairRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseKeyPairRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseKeyPairRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseKeyPairRequest(EnterpriseKeyPairRequest other) : this() {
      enterprisePublicKey_ = other.enterprisePublicKey_;
      encryptedEnterprisePrivateKey_ = other.encryptedEnterprisePrivateKey_;
      keyType_ = other.keyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseKeyPairRequest Clone() {
      return new EnterpriseKeyPairRequest(this);
    }

    /// <summary>Field number for the "enterprisePublicKey" field.</summary>
    public const int EnterprisePublicKeyFieldNumber = 1;
    private pb::ByteString enterprisePublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EnterprisePublicKey {
      get { return enterprisePublicKey_; }
      set {
        enterprisePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedEnterprisePrivateKey" field.</summary>
    public const int EncryptedEnterprisePrivateKeyFieldNumber = 2;
    private pb::ByteString encryptedEnterprisePrivateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedEnterprisePrivateKey {
      get { return encryptedEnterprisePrivateKey_; }
      set {
        encryptedEnterprisePrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyType" field.</summary>
    public const int KeyTypeFieldNumber = 3;
    private global::Enterprise.KeyType keyType_ = global::Enterprise.KeyType.Rsa;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.KeyType KeyType {
      get { return keyType_; }
      set {
        keyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseKeyPairRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseKeyPairRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterprisePublicKey != other.EnterprisePublicKey) return false;
      if (EncryptedEnterprisePrivateKey != other.EncryptedEnterprisePrivateKey) return false;
      if (KeyType != other.KeyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterprisePublicKey.Length != 0) hash ^= EnterprisePublicKey.GetHashCode();
      if (EncryptedEnterprisePrivateKey.Length != 0) hash ^= EncryptedEnterprisePrivateKey.GetHashCode();
      if (KeyType != global::Enterprise.KeyType.Rsa) hash ^= KeyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterprisePublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EnterprisePublicKey);
      }
      if (EncryptedEnterprisePrivateKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedEnterprisePrivateKey);
      }
      if (KeyType != global::Enterprise.KeyType.Rsa) {
        output.WriteRawTag(24);
        output.WriteEnum((int) KeyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterprisePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EnterprisePublicKey);
      }
      if (EncryptedEnterprisePrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedEnterprisePrivateKey);
      }
      if (KeyType != global::Enterprise.KeyType.Rsa) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseKeyPairRequest other) {
      if (other == null) {
        return;
      }
      if (other.EnterprisePublicKey.Length != 0) {
        EnterprisePublicKey = other.EnterprisePublicKey;
      }
      if (other.EncryptedEnterprisePrivateKey.Length != 0) {
        EncryptedEnterprisePrivateKey = other.EncryptedEnterprisePrivateKey;
      }
      if (other.KeyType != global::Enterprise.KeyType.Rsa) {
        KeyType = other.KeyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EnterprisePublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedEnterprisePrivateKey = input.ReadBytes();
            break;
          }
          case 24: {
            KeyType = (global::Enterprise.KeyType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTeamMemberRequest : pb::IMessage<GetTeamMemberRequest> {
    private static readonly pb::MessageParser<GetTeamMemberRequest> _parser = new pb::MessageParser<GetTeamMemberRequest>(() => new GetTeamMemberRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTeamMemberRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberRequest(GetTeamMemberRequest other) : this() {
      teamUid_ = other.teamUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberRequest Clone() {
      return new GetTeamMemberRequest(this);
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 1;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTeamMemberRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTeamMemberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamUid != other.TeamUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTeamMemberRequest other) {
      if (other == null) {
        return;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseUser : pb::IMessage<EnterpriseUser> {
    private static readonly pb::MessageParser<EnterpriseUser> _parser = new pb::MessageParser<EnterpriseUser>(() => new EnterpriseUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUser(EnterpriseUser other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      email_ = other.email_;
      enterpriseUsername_ = other.enterpriseUsername_;
      isShareAdmin_ = other.isShareAdmin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUser Clone() {
      return new EnterpriseUser(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterpriseUsername" field.</summary>
    public const int EnterpriseUsernameFieldNumber = 3;
    private string enterpriseUsername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnterpriseUsername {
      get { return enterpriseUsername_; }
      set {
        enterpriseUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isShareAdmin" field.</summary>
    public const int IsShareAdminFieldNumber = 4;
    private bool isShareAdmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShareAdmin {
      get { return isShareAdmin_; }
      set {
        isShareAdmin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (Email != other.Email) return false;
      if (EnterpriseUsername != other.EnterpriseUsername) return false;
      if (IsShareAdmin != other.IsShareAdmin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (EnterpriseUsername.Length != 0) hash ^= EnterpriseUsername.GetHashCode();
      if (IsShareAdmin != false) hash ^= IsShareAdmin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (EnterpriseUsername.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EnterpriseUsername);
      }
      if (IsShareAdmin != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsShareAdmin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (EnterpriseUsername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnterpriseUsername);
      }
      if (IsShareAdmin != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseUser other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.EnterpriseUsername.Length != 0) {
        EnterpriseUsername = other.EnterpriseUsername;
      }
      if (other.IsShareAdmin != false) {
        IsShareAdmin = other.IsShareAdmin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            EnterpriseUsername = input.ReadString();
            break;
          }
          case 32: {
            IsShareAdmin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTeamMemberResponse : pb::IMessage<GetTeamMemberResponse> {
    private static readonly pb::MessageParser<GetTeamMemberResponse> _parser = new pb::MessageParser<GetTeamMemberResponse>(() => new GetTeamMemberResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTeamMemberResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberResponse(GetTeamMemberResponse other) : this() {
      enterpriseUser_ = other.enterpriseUser_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamMemberResponse Clone() {
      return new GetTeamMemberResponse(this);
    }

    /// <summary>Field number for the "enterpriseUser" field.</summary>
    public const int EnterpriseUserFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.EnterpriseUser> _repeated_enterpriseUser_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.EnterpriseUser.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.EnterpriseUser> enterpriseUser_ = new pbc::RepeatedField<global::Enterprise.EnterpriseUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.EnterpriseUser> EnterpriseUser {
      get { return enterpriseUser_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTeamMemberResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTeamMemberResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!enterpriseUser_.Equals(other.enterpriseUser_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= enterpriseUser_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      enterpriseUser_.WriteTo(output, _repeated_enterpriseUser_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += enterpriseUser_.CalculateSize(_repeated_enterpriseUser_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTeamMemberResponse other) {
      if (other == null) {
        return;
      }
      enterpriseUser_.Add(other.enterpriseUser_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            enterpriseUser_.AddEntriesFrom(input, _repeated_enterpriseUser_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseUserIds : pb::IMessage<EnterpriseUserIds> {
    private static readonly pb::MessageParser<EnterpriseUserIds> _parser = new pb::MessageParser<EnterpriseUserIds>(() => new EnterpriseUserIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseUserIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserIds(EnterpriseUserIds other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserIds Clone() {
      return new EnterpriseUserIds(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_enterpriseUserId_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> enterpriseUserId_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> EnterpriseUserId {
      get { return enterpriseUserId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseUserIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseUserIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!enterpriseUserId_.Equals(other.enterpriseUserId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= enterpriseUserId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      enterpriseUserId_.WriteTo(output, _repeated_enterpriseUserId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += enterpriseUserId_.CalculateSize(_repeated_enterpriseUserId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseUserIds other) {
      if (other == null) {
        return;
      }
      enterpriseUserId_.Add(other.enterpriseUserId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            enterpriseUserId_.AddEntriesFrom(input, _repeated_enterpriseUserId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterprisePersonalAccount : pb::IMessage<EnterprisePersonalAccount> {
    private static readonly pb::MessageParser<EnterprisePersonalAccount> _parser = new pb::MessageParser<EnterprisePersonalAccount>(() => new EnterprisePersonalAccount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterprisePersonalAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterprisePersonalAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterprisePersonalAccount(EnterprisePersonalAccount other) : this() {
      email_ = other.email_;
      oBSOLETEFIELD_ = other.oBSOLETEFIELD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterprisePersonalAccount Clone() {
      return new EnterprisePersonalAccount(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OBSOLETE_FIELD" field.</summary>
    public const int OBSOLETEFIELDFieldNumber = 2;
    private pb::ByteString oBSOLETEFIELD_ = pb::ByteString.Empty;
    /// <summary>
    ///DO NOT RE-USE. placeholder for backwards compatability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OBSOLETEFIELD {
      get { return oBSOLETEFIELD_; }
      set {
        oBSOLETEFIELD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterprisePersonalAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterprisePersonalAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (OBSOLETEFIELD != other.OBSOLETEFIELD) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (OBSOLETEFIELD.Length != 0) hash ^= OBSOLETEFIELD.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (OBSOLETEFIELD.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OBSOLETEFIELD);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (OBSOLETEFIELD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OBSOLETEFIELD);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterprisePersonalAccount other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.OBSOLETEFIELD.Length != 0) {
        OBSOLETEFIELD = other.OBSOLETEFIELD;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            OBSOLETEFIELD = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EncryptedTeamKeyRequest : pb::IMessage<EncryptedTeamKeyRequest> {
    private static readonly pb::MessageParser<EncryptedTeamKeyRequest> _parser = new pb::MessageParser<EncryptedTeamKeyRequest>(() => new EncryptedTeamKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncryptedTeamKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptedTeamKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptedTeamKeyRequest(EncryptedTeamKeyRequest other) : this() {
      teamUid_ = other.teamUid_;
      encryptedTeamKey_ = other.encryptedTeamKey_;
      force_ = other.force_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptedTeamKeyRequest Clone() {
      return new EncryptedTeamKeyRequest(this);
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 1;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamKey" field.</summary>
    public const int EncryptedTeamKeyFieldNumber = 2;
    private pb::ByteString encryptedTeamKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedTeamKey {
      get { return encryptedTeamKey_; }
      set {
        encryptedTeamKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 3;
    private bool force_;
    /// <summary>
    /// if false, existing team key must be null to succeed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncryptedTeamKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncryptedTeamKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamUid != other.TeamUid) return false;
      if (EncryptedTeamKey != other.EncryptedTeamKey) return false;
      if (Force != other.Force) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (EncryptedTeamKey.Length != 0) hash ^= EncryptedTeamKey.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      if (EncryptedTeamKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedTeamKey);
      }
      if (Force != false) {
        output.WriteRawTag(24);
        output.WriteBool(Force);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (EncryptedTeamKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTeamKey);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncryptedTeamKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      if (other.EncryptedTeamKey.Length != 0) {
        EncryptedTeamKey = other.EncryptedTeamKey;
      }
      if (other.Force != false) {
        Force = other.Force;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedTeamKey = input.ReadBytes();
            break;
          }
          case 24: {
            Force = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReEncryptedData : pb::IMessage<ReEncryptedData> {
    private static readonly pb::MessageParser<ReEncryptedData> _parser = new pb::MessageParser<ReEncryptedData>(() => new ReEncryptedData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReEncryptedData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedData(ReEncryptedData other) : this() {
      id_ = other.id_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedData Clone() {
      return new ReEncryptedData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReEncryptedData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReEncryptedData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReEncryptedData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReEncryptedRoleKey : pb::IMessage<ReEncryptedRoleKey> {
    private static readonly pb::MessageParser<ReEncryptedRoleKey> _parser = new pb::MessageParser<ReEncryptedRoleKey>(() => new ReEncryptedRoleKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReEncryptedRoleKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedRoleKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedRoleKey(ReEncryptedRoleKey other) : this() {
      roleId_ = other.roleId_;
      encryptedRoleKey_ = other.encryptedRoleKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReEncryptedRoleKey Clone() {
      return new ReEncryptedRoleKey(this);
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedRoleKey" field.</summary>
    public const int EncryptedRoleKeyFieldNumber = 2;
    private pb::ByteString encryptedRoleKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedRoleKey {
      get { return encryptedRoleKey_; }
      set {
        encryptedRoleKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReEncryptedRoleKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReEncryptedRoleKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (EncryptedRoleKey != other.EncryptedRoleKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (EncryptedRoleKey.Length != 0) hash ^= EncryptedRoleKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (EncryptedRoleKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedRoleKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (EncryptedRoleKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedRoleKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReEncryptedRoleKey other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.EncryptedRoleKey.Length != 0) {
        EncryptedRoleKey = other.EncryptedRoleKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            EncryptedRoleKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeToManagedCompanyRequest : pb::IMessage<NodeToManagedCompanyRequest> {
    private static readonly pb::MessageParser<NodeToManagedCompanyRequest> _parser = new pb::MessageParser<NodeToManagedCompanyRequest>(() => new NodeToManagedCompanyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeToManagedCompanyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeToManagedCompanyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeToManagedCompanyRequest(NodeToManagedCompanyRequest other) : this() {
      companyId_ = other.companyId_;
      nodes_ = other.nodes_.Clone();
      roles_ = other.roles_.Clone();
      users_ = other.users_.Clone();
      roleKeys_ = other.roleKeys_.Clone();
      teamKeys_ = other.teamKeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeToManagedCompanyRequest Clone() {
      return new NodeToManagedCompanyRequest(this);
    }

    /// <summary>Field number for the "companyId" field.</summary>
    public const int CompanyIdFieldNumber = 1;
    private int companyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompanyId {
      get { return companyId_; }
      set {
        companyId_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Enterprise.ReEncryptedData> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(18, global::Enterprise.ReEncryptedData.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ReEncryptedData> nodes_ = new pbc::RepeatedField<global::Enterprise.ReEncryptedData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ReEncryptedData> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Enterprise.ReEncryptedData> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(26, global::Enterprise.ReEncryptedData.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ReEncryptedData> roles_ = new pbc::RepeatedField<global::Enterprise.ReEncryptedData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ReEncryptedData> Roles {
      get { return roles_; }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Enterprise.ReEncryptedData> _repeated_users_codec
        = pb::FieldCodec.ForMessage(34, global::Enterprise.ReEncryptedData.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ReEncryptedData> users_ = new pbc::RepeatedField<global::Enterprise.ReEncryptedData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ReEncryptedData> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "roleKeys" field.</summary>
    public const int RoleKeysFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Enterprise.ReEncryptedRoleKey> _repeated_roleKeys_codec
        = pb::FieldCodec.ForMessage(42, global::Enterprise.ReEncryptedRoleKey.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ReEncryptedRoleKey> roleKeys_ = new pbc::RepeatedField<global::Enterprise.ReEncryptedRoleKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ReEncryptedRoleKey> RoleKeys {
      get { return roleKeys_; }
    }

    /// <summary>Field number for the "teamKeys" field.</summary>
    public const int TeamKeysFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Enterprise.EncryptedTeamKeyRequest> _repeated_teamKeys_codec
        = pb::FieldCodec.ForMessage(50, global::Enterprise.EncryptedTeamKeyRequest.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.EncryptedTeamKeyRequest> teamKeys_ = new pbc::RepeatedField<global::Enterprise.EncryptedTeamKeyRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.EncryptedTeamKeyRequest> TeamKeys {
      get { return teamKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeToManagedCompanyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeToManagedCompanyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompanyId != other.CompanyId) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!roles_.Equals(other.roles_)) return false;
      if(!users_.Equals(other.users_)) return false;
      if(!roleKeys_.Equals(other.roleKeys_)) return false;
      if(!teamKeys_.Equals(other.teamKeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompanyId != 0) hash ^= CompanyId.GetHashCode();
      hash ^= nodes_.GetHashCode();
      hash ^= roles_.GetHashCode();
      hash ^= users_.GetHashCode();
      hash ^= roleKeys_.GetHashCode();
      hash ^= teamKeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompanyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CompanyId);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      roles_.WriteTo(output, _repeated_roles_codec);
      users_.WriteTo(output, _repeated_users_codec);
      roleKeys_.WriteTo(output, _repeated_roleKeys_codec);
      teamKeys_.WriteTo(output, _repeated_teamKeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompanyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompanyId);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += roles_.CalculateSize(_repeated_roles_codec);
      size += users_.CalculateSize(_repeated_users_codec);
      size += roleKeys_.CalculateSize(_repeated_roleKeys_codec);
      size += teamKeys_.CalculateSize(_repeated_teamKeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeToManagedCompanyRequest other) {
      if (other == null) {
        return;
      }
      if (other.CompanyId != 0) {
        CompanyId = other.CompanyId;
      }
      nodes_.Add(other.nodes_);
      roles_.Add(other.roles_);
      users_.Add(other.users_);
      roleKeys_.Add(other.roleKeys_);
      teamKeys_.Add(other.teamKeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CompanyId = input.ReadInt32();
            break;
          }
          case 18: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 26: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 34: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 42: {
            roleKeys_.AddEntriesFrom(input, _repeated_roleKeys_codec);
            break;
          }
          case 50: {
            teamKeys_.AddEntriesFrom(input, _repeated_teamKeys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleTeam : pb::IMessage<RoleTeam> {
    private static readonly pb::MessageParser<RoleTeam> _parser = new pb::MessageParser<RoleTeam>(() => new RoleTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeam(RoleTeam other) : this() {
      roleId_ = other.roleId_;
      teamUid_ = other.teamUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeam Clone() {
      return new RoleTeam(this);
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 2;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (TeamUid != other.TeamUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (TeamUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(TeamUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleTeam other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            TeamUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleTeams : pb::IMessage<RoleTeams> {
    private static readonly pb::MessageParser<RoleTeams> _parser = new pb::MessageParser<RoleTeams>(() => new RoleTeams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleTeams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeams(RoleTeams other) : this() {
      roleTeam_ = other.roleTeam_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleTeams Clone() {
      return new RoleTeams(this);
    }

    /// <summary>Field number for the "role_team" field.</summary>
    public const int RoleTeamFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.RoleTeam> _repeated_roleTeam_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.RoleTeam.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.RoleTeam> roleTeam_ = new pbc::RepeatedField<global::Enterprise.RoleTeam>();
    /// <summary>
    /// 100 max
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.RoleTeam> RoleTeam {
      get { return roleTeam_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleTeams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleTeams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roleTeam_.Equals(other.roleTeam_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roleTeam_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleTeam_.WriteTo(output, _repeated_roleTeam_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleTeam_.CalculateSize(_repeated_roleTeam_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleTeams other) {
      if (other == null) {
        return;
      }
      roleTeam_.Add(other.roleTeam_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roleTeam_.AddEntriesFrom(input, _repeated_roleTeam_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseRegistration : pb::IMessage<EnterpriseRegistration> {
    private static readonly pb::MessageParser<EnterpriseRegistration> _parser = new pb::MessageParser<EnterpriseRegistration>(() => new EnterpriseRegistration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseRegistration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseRegistration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseRegistration(EnterpriseRegistration other) : this() {
      encryptedTreeKey_ = other.encryptedTreeKey_;
      enterpriseName_ = other.enterpriseName_;
      rootNodeData_ = other.rootNodeData_;
      adminUserData_ = other.adminUserData_;
      adminName_ = other.adminName_;
      roleData_ = other.roleData_;
      rsaKeyPair_ = other.rsaKeyPair_ != null ? other.rsaKeyPair_.Clone() : null;
      numberSeats_ = other.numberSeats_;
      enterpriseType_ = other.enterpriseType_;
      rolePublicKey_ = other.rolePublicKey_;
      rolePrivateKeyEncryptedWithRoleKey_ = other.rolePrivateKeyEncryptedWithRoleKey_;
      roleKeyEncryptedWithTreeKey_ = other.roleKeyEncryptedWithTreeKey_;
      eccKeyPair_ = other.eccKeyPair_ != null ? other.eccKeyPair_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseRegistration Clone() {
      return new EnterpriseRegistration(this);
    }

    /// <summary>Field number for the "encryptedTreeKey" field.</summary>
    public const int EncryptedTreeKeyFieldNumber = 1;
    private pb::ByteString encryptedTreeKey_ = pb::ByteString.Empty;
    /// <summary>
    /// AES 256 key encrypted with admin's data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedTreeKey {
      get { return encryptedTreeKey_; }
      set {
        encryptedTreeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterpriseName" field.</summary>
    public const int EnterpriseNameFieldNumber = 2;
    private string enterpriseName_ = "";
    /// <summary>
    /// plain text name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnterpriseName {
      get { return enterpriseName_; }
      set {
        enterpriseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rootNodeData" field.</summary>
    public const int RootNodeDataFieldNumber = 3;
    private pb::ByteString rootNodeData_ = pb::ByteString.Empty;
    /// <summary>
    /// encrypted node data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RootNodeData {
      get { return rootNodeData_; }
      set {
        rootNodeData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adminUserData" field.</summary>
    public const int AdminUserDataFieldNumber = 4;
    private pb::ByteString adminUserData_ = pb::ByteString.Empty;
    /// <summary>
    /// encrypted user data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AdminUserData {
      get { return adminUserData_; }
      set {
        adminUserData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adminName" field.</summary>
    public const int AdminNameFieldNumber = 5;
    private string adminName_ = "";
    /// <summary>
    /// full name of admin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdminName {
      get { return adminName_; }
      set {
        adminName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleData" field.</summary>
    public const int RoleDataFieldNumber = 6;
    private pb::ByteString roleData_ = pb::ByteString.Empty;
    /// <summary>
    /// encrypted role data for admin role
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleData {
      get { return roleData_; }
      set {
        roleData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rsaKeyPair" field.</summary>
    public const int RsaKeyPairFieldNumber = 7;
    private global::Enterprise.EnterpriseKeyPairRequest rsaKeyPair_;
    /// <summary>
    /// for sharing to the enterprise
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EnterpriseKeyPairRequest RsaKeyPair {
      get { return rsaKeyPair_; }
      set {
        rsaKeyPair_ = value;
      }
    }

    /// <summary>Field number for the "numberSeats" field.</summary>
    public const int NumberSeatsFieldNumber = 8;
    private int numberSeats_;
    /// <summary>
    /// should this be part of the request?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberSeats {
      get { return numberSeats_; }
      set {
        numberSeats_ = value;
      }
    }

    /// <summary>Field number for the "enterpriseType" field.</summary>
    public const int EnterpriseTypeFieldNumber = 9;
    private global::Enterprise.EnterpriseType enterpriseType_ = global::Enterprise.EnterpriseType.EnterpriseStandard;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EnterpriseType EnterpriseType {
      get { return enterpriseType_; }
      set {
        enterpriseType_ = value;
      }
    }

    /// <summary>Field number for the "rolePublicKey" field.</summary>
    public const int RolePublicKeyFieldNumber = 10;
    private pb::ByteString rolePublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RolePublicKey {
      get { return rolePublicKey_; }
      set {
        rolePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rolePrivateKeyEncryptedWithRoleKey" field.</summary>
    public const int RolePrivateKeyEncryptedWithRoleKeyFieldNumber = 11;
    private pb::ByteString rolePrivateKeyEncryptedWithRoleKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RolePrivateKeyEncryptedWithRoleKey {
      get { return rolePrivateKeyEncryptedWithRoleKey_; }
      set {
        rolePrivateKeyEncryptedWithRoleKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleKeyEncryptedWithTreeKey" field.</summary>
    public const int RoleKeyEncryptedWithTreeKeyFieldNumber = 12;
    private pb::ByteString roleKeyEncryptedWithTreeKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleKeyEncryptedWithTreeKey {
      get { return roleKeyEncryptedWithTreeKey_; }
      set {
        roleKeyEncryptedWithTreeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eccKeyPair" field.</summary>
    public const int EccKeyPairFieldNumber = 13;
    private global::Enterprise.EnterpriseKeyPairRequest eccKeyPair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EnterpriseKeyPairRequest EccKeyPair {
      get { return eccKeyPair_; }
      set {
        eccKeyPair_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseRegistration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseRegistration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedTreeKey != other.EncryptedTreeKey) return false;
      if (EnterpriseName != other.EnterpriseName) return false;
      if (RootNodeData != other.RootNodeData) return false;
      if (AdminUserData != other.AdminUserData) return false;
      if (AdminName != other.AdminName) return false;
      if (RoleData != other.RoleData) return false;
      if (!object.Equals(RsaKeyPair, other.RsaKeyPair)) return false;
      if (NumberSeats != other.NumberSeats) return false;
      if (EnterpriseType != other.EnterpriseType) return false;
      if (RolePublicKey != other.RolePublicKey) return false;
      if (RolePrivateKeyEncryptedWithRoleKey != other.RolePrivateKeyEncryptedWithRoleKey) return false;
      if (RoleKeyEncryptedWithTreeKey != other.RoleKeyEncryptedWithTreeKey) return false;
      if (!object.Equals(EccKeyPair, other.EccKeyPair)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedTreeKey.Length != 0) hash ^= EncryptedTreeKey.GetHashCode();
      if (EnterpriseName.Length != 0) hash ^= EnterpriseName.GetHashCode();
      if (RootNodeData.Length != 0) hash ^= RootNodeData.GetHashCode();
      if (AdminUserData.Length != 0) hash ^= AdminUserData.GetHashCode();
      if (AdminName.Length != 0) hash ^= AdminName.GetHashCode();
      if (RoleData.Length != 0) hash ^= RoleData.GetHashCode();
      if (rsaKeyPair_ != null) hash ^= RsaKeyPair.GetHashCode();
      if (NumberSeats != 0) hash ^= NumberSeats.GetHashCode();
      if (EnterpriseType != global::Enterprise.EnterpriseType.EnterpriseStandard) hash ^= EnterpriseType.GetHashCode();
      if (RolePublicKey.Length != 0) hash ^= RolePublicKey.GetHashCode();
      if (RolePrivateKeyEncryptedWithRoleKey.Length != 0) hash ^= RolePrivateKeyEncryptedWithRoleKey.GetHashCode();
      if (RoleKeyEncryptedWithTreeKey.Length != 0) hash ^= RoleKeyEncryptedWithTreeKey.GetHashCode();
      if (eccKeyPair_ != null) hash ^= EccKeyPair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedTreeKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedTreeKey);
      }
      if (EnterpriseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EnterpriseName);
      }
      if (RootNodeData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RootNodeData);
      }
      if (AdminUserData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(AdminUserData);
      }
      if (AdminName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AdminName);
      }
      if (RoleData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(RoleData);
      }
      if (rsaKeyPair_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RsaKeyPair);
      }
      if (NumberSeats != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NumberSeats);
      }
      if (EnterpriseType != global::Enterprise.EnterpriseType.EnterpriseStandard) {
        output.WriteRawTag(72);
        output.WriteEnum((int) EnterpriseType);
      }
      if (RolePublicKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(RolePublicKey);
      }
      if (RolePrivateKeyEncryptedWithRoleKey.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(RolePrivateKeyEncryptedWithRoleKey);
      }
      if (RoleKeyEncryptedWithTreeKey.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(RoleKeyEncryptedWithTreeKey);
      }
      if (eccKeyPair_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EccKeyPair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedTreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTreeKey);
      }
      if (EnterpriseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnterpriseName);
      }
      if (RootNodeData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RootNodeData);
      }
      if (AdminUserData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AdminUserData);
      }
      if (AdminName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdminName);
      }
      if (RoleData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleData);
      }
      if (rsaKeyPair_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RsaKeyPair);
      }
      if (NumberSeats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberSeats);
      }
      if (EnterpriseType != global::Enterprise.EnterpriseType.EnterpriseStandard) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnterpriseType);
      }
      if (RolePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RolePublicKey);
      }
      if (RolePrivateKeyEncryptedWithRoleKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RolePrivateKeyEncryptedWithRoleKey);
      }
      if (RoleKeyEncryptedWithTreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleKeyEncryptedWithTreeKey);
      }
      if (eccKeyPair_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EccKeyPair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseRegistration other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedTreeKey.Length != 0) {
        EncryptedTreeKey = other.EncryptedTreeKey;
      }
      if (other.EnterpriseName.Length != 0) {
        EnterpriseName = other.EnterpriseName;
      }
      if (other.RootNodeData.Length != 0) {
        RootNodeData = other.RootNodeData;
      }
      if (other.AdminUserData.Length != 0) {
        AdminUserData = other.AdminUserData;
      }
      if (other.AdminName.Length != 0) {
        AdminName = other.AdminName;
      }
      if (other.RoleData.Length != 0) {
        RoleData = other.RoleData;
      }
      if (other.rsaKeyPair_ != null) {
        if (rsaKeyPair_ == null) {
          RsaKeyPair = new global::Enterprise.EnterpriseKeyPairRequest();
        }
        RsaKeyPair.MergeFrom(other.RsaKeyPair);
      }
      if (other.NumberSeats != 0) {
        NumberSeats = other.NumberSeats;
      }
      if (other.EnterpriseType != global::Enterprise.EnterpriseType.EnterpriseStandard) {
        EnterpriseType = other.EnterpriseType;
      }
      if (other.RolePublicKey.Length != 0) {
        RolePublicKey = other.RolePublicKey;
      }
      if (other.RolePrivateKeyEncryptedWithRoleKey.Length != 0) {
        RolePrivateKeyEncryptedWithRoleKey = other.RolePrivateKeyEncryptedWithRoleKey;
      }
      if (other.RoleKeyEncryptedWithTreeKey.Length != 0) {
        RoleKeyEncryptedWithTreeKey = other.RoleKeyEncryptedWithTreeKey;
      }
      if (other.eccKeyPair_ != null) {
        if (eccKeyPair_ == null) {
          EccKeyPair = new global::Enterprise.EnterpriseKeyPairRequest();
        }
        EccKeyPair.MergeFrom(other.EccKeyPair);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedTreeKey = input.ReadBytes();
            break;
          }
          case 18: {
            EnterpriseName = input.ReadString();
            break;
          }
          case 26: {
            RootNodeData = input.ReadBytes();
            break;
          }
          case 34: {
            AdminUserData = input.ReadBytes();
            break;
          }
          case 42: {
            AdminName = input.ReadString();
            break;
          }
          case 50: {
            RoleData = input.ReadBytes();
            break;
          }
          case 58: {
            if (rsaKeyPair_ == null) {
              RsaKeyPair = new global::Enterprise.EnterpriseKeyPairRequest();
            }
            input.ReadMessage(RsaKeyPair);
            break;
          }
          case 64: {
            NumberSeats = input.ReadInt32();
            break;
          }
          case 72: {
            EnterpriseType = (global::Enterprise.EnterpriseType) input.ReadEnum();
            break;
          }
          case 82: {
            RolePublicKey = input.ReadBytes();
            break;
          }
          case 90: {
            RolePrivateKeyEncryptedWithRoleKey = input.ReadBytes();
            break;
          }
          case 98: {
            RoleKeyEncryptedWithTreeKey = input.ReadBytes();
            break;
          }
          case 106: {
            if (eccKeyPair_ == null) {
              EccKeyPair = new global::Enterprise.EnterpriseKeyPairRequest();
            }
            input.ReadMessage(EccKeyPair);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DomainPasswordRulesRequest : pb::IMessage<DomainPasswordRulesRequest> {
    private static readonly pb::MessageParser<DomainPasswordRulesRequest> _parser = new pb::MessageParser<DomainPasswordRulesRequest>(() => new DomainPasswordRulesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DomainPasswordRulesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesRequest(DomainPasswordRulesRequest other) : this() {
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesRequest Clone() {
      return new DomainPasswordRulesRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DomainPasswordRulesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DomainPasswordRulesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DomainPasswordRulesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DomainPasswordRulesFields : pb::IMessage<DomainPasswordRulesFields> {
    private static readonly pb::MessageParser<DomainPasswordRulesFields> _parser = new pb::MessageParser<DomainPasswordRulesFields>(() => new DomainPasswordRulesFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DomainPasswordRulesFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesFields(DomainPasswordRulesFields other) : this() {
      type_ = other.type_;
      minimum_ = other.minimum_;
      maximum_ = other.maximum_;
      allowed_ = other.allowed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesFields Clone() {
      return new DomainPasswordRulesFields(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minimum" field.</summary>
    public const int MinimumFieldNumber = 2;
    private int minimum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minimum {
      get { return minimum_; }
      set {
        minimum_ = value;
      }
    }

    /// <summary>Field number for the "maximum" field.</summary>
    public const int MaximumFieldNumber = 3;
    private int maximum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Maximum {
      get { return maximum_; }
      set {
        maximum_ = value;
      }
    }

    /// <summary>Field number for the "allowed" field.</summary>
    public const int AllowedFieldNumber = 4;
    private bool allowed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Allowed {
      get { return allowed_; }
      set {
        allowed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DomainPasswordRulesFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DomainPasswordRulesFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Minimum != other.Minimum) return false;
      if (Maximum != other.Maximum) return false;
      if (Allowed != other.Allowed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Minimum != 0) hash ^= Minimum.GetHashCode();
      if (Maximum != 0) hash ^= Maximum.GetHashCode();
      if (Allowed != false) hash ^= Allowed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Minimum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Minimum);
      }
      if (Maximum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Maximum);
      }
      if (Allowed != false) {
        output.WriteRawTag(32);
        output.WriteBool(Allowed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Minimum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minimum);
      }
      if (Maximum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maximum);
      }
      if (Allowed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DomainPasswordRulesFields other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Minimum != 0) {
        Minimum = other.Minimum;
      }
      if (other.Maximum != 0) {
        Maximum = other.Maximum;
      }
      if (other.Allowed != false) {
        Allowed = other.Allowed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            Minimum = input.ReadInt32();
            break;
          }
          case 24: {
            Maximum = input.ReadInt32();
            break;
          }
          case 32: {
            Allowed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginToMcRequest : pb::IMessage<LoginToMcRequest> {
    private static readonly pb::MessageParser<LoginToMcRequest> _parser = new pb::MessageParser<LoginToMcRequest>(() => new LoginToMcRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginToMcRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcRequest(LoginToMcRequest other) : this() {
      mcEnterpriseId_ = other.mcEnterpriseId_;
      messageSessionUid_ = other.messageSessionUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcRequest Clone() {
      return new LoginToMcRequest(this);
    }

    /// <summary>Field number for the "mcEnterpriseId" field.</summary>
    public const int McEnterpriseIdFieldNumber = 1;
    private int mcEnterpriseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int McEnterpriseId {
      get { return mcEnterpriseId_; }
      set {
        mcEnterpriseId_ = value;
      }
    }

    /// <summary>Field number for the "messageSessionUid" field.</summary>
    public const int MessageSessionUidFieldNumber = 2;
    private pb::ByteString messageSessionUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageSessionUid {
      get { return messageSessionUid_; }
      set {
        messageSessionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginToMcRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginToMcRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (McEnterpriseId != other.McEnterpriseId) return false;
      if (MessageSessionUid != other.MessageSessionUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (McEnterpriseId != 0) hash ^= McEnterpriseId.GetHashCode();
      if (MessageSessionUid.Length != 0) hash ^= MessageSessionUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (McEnterpriseId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(McEnterpriseId);
      }
      if (MessageSessionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(MessageSessionUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (McEnterpriseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(McEnterpriseId);
      }
      if (MessageSessionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageSessionUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginToMcRequest other) {
      if (other == null) {
        return;
      }
      if (other.McEnterpriseId != 0) {
        McEnterpriseId = other.McEnterpriseId;
      }
      if (other.MessageSessionUid.Length != 0) {
        MessageSessionUid = other.MessageSessionUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            McEnterpriseId = input.ReadInt32();
            break;
          }
          case 18: {
            MessageSessionUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginToMcResponse : pb::IMessage<LoginToMcResponse> {
    private static readonly pb::MessageParser<LoginToMcResponse> _parser = new pb::MessageParser<LoginToMcResponse>(() => new LoginToMcResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginToMcResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcResponse(LoginToMcResponse other) : this() {
      encryptedSessionToken_ = other.encryptedSessionToken_;
      encryptedTreeKey_ = other.encryptedTreeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcResponse Clone() {
      return new LoginToMcResponse(this);
    }

    /// <summary>Field number for the "encryptedSessionToken" field.</summary>
    public const int EncryptedSessionTokenFieldNumber = 1;
    private pb::ByteString encryptedSessionToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedSessionToken {
      get { return encryptedSessionToken_; }
      set {
        encryptedSessionToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTreeKey" field.</summary>
    public const int EncryptedTreeKeyFieldNumber = 2;
    private string encryptedTreeKey_ = "";
    /// <summary>
    /// MC's tree key encrypted with MSP's tree key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedTreeKey {
      get { return encryptedTreeKey_; }
      set {
        encryptedTreeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginToMcResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginToMcResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedSessionToken != other.EncryptedSessionToken) return false;
      if (EncryptedTreeKey != other.EncryptedTreeKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedSessionToken.Length != 0) hash ^= EncryptedSessionToken.GetHashCode();
      if (EncryptedTreeKey.Length != 0) hash ^= EncryptedTreeKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedSessionToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedSessionToken);
      }
      if (EncryptedTreeKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EncryptedTreeKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedSessionToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedSessionToken);
      }
      if (EncryptedTreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedTreeKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginToMcResponse other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedSessionToken.Length != 0) {
        EncryptedSessionToken = other.EncryptedSessionToken;
      }
      if (other.EncryptedTreeKey.Length != 0) {
        EncryptedTreeKey = other.EncryptedTreeKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedSessionToken = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedTreeKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DomainPasswordRulesResponse : pb::IMessage<DomainPasswordRulesResponse> {
    private static readonly pb::MessageParser<DomainPasswordRulesResponse> _parser = new pb::MessageParser<DomainPasswordRulesResponse>(() => new DomainPasswordRulesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DomainPasswordRulesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesResponse(DomainPasswordRulesResponse other) : this() {
      domainPasswordRulesFields_ = other.domainPasswordRulesFields_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainPasswordRulesResponse Clone() {
      return new DomainPasswordRulesResponse(this);
    }

    /// <summary>Field number for the "domainPasswordRulesFields" field.</summary>
    public const int DomainPasswordRulesFieldsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.DomainPasswordRulesFields> _repeated_domainPasswordRulesFields_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.DomainPasswordRulesFields.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.DomainPasswordRulesFields> domainPasswordRulesFields_ = new pbc::RepeatedField<global::Enterprise.DomainPasswordRulesFields>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.DomainPasswordRulesFields> DomainPasswordRulesFields {
      get { return domainPasswordRulesFields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DomainPasswordRulesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DomainPasswordRulesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!domainPasswordRulesFields_.Equals(other.domainPasswordRulesFields_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= domainPasswordRulesFields_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      domainPasswordRulesFields_.WriteTo(output, _repeated_domainPasswordRulesFields_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += domainPasswordRulesFields_.CalculateSize(_repeated_domainPasswordRulesFields_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DomainPasswordRulesResponse other) {
      if (other == null) {
        return;
      }
      domainPasswordRulesFields_.Add(other.domainPasswordRulesFields_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            domainPasswordRulesFields_.AddEntriesFrom(input, _repeated_domainPasswordRulesFields_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveUserDeviceRequest : pb::IMessage<ApproveUserDeviceRequest> {
    private static readonly pb::MessageParser<ApproveUserDeviceRequest> _parser = new pb::MessageParser<ApproveUserDeviceRequest>(() => new ApproveUserDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveUserDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceRequest(ApproveUserDeviceRequest other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      encryptedDeviceDataKey_ = other.encryptedDeviceDataKey_;
      denyApproval_ = other.denyApproval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceRequest Clone() {
      return new ApproveUserDeviceRequest(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 2;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceDataKey" field.</summary>
    public const int EncryptedDeviceDataKeyFieldNumber = 3;
    private pb::ByteString encryptedDeviceDataKey_ = pb::ByteString.Empty;
    /// <summary>
    /// required for cloud sso
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceDataKey {
      get { return encryptedDeviceDataKey_; }
      set {
        encryptedDeviceDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "denyApproval" field.</summary>
    public const int DenyApprovalFieldNumber = 4;
    private bool denyApproval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DenyApproval {
      get { return denyApproval_; }
      set {
        denyApproval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveUserDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveUserDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (EncryptedDeviceDataKey != other.EncryptedDeviceDataKey) return false;
      if (DenyApproval != other.DenyApproval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (EncryptedDeviceDataKey.Length != 0) hash ^= EncryptedDeviceDataKey.GetHashCode();
      if (DenyApproval != false) hash ^= DenyApproval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (EncryptedDeviceDataKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedDeviceDataKey);
      }
      if (DenyApproval != false) {
        output.WriteRawTag(32);
        output.WriteBool(DenyApproval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (EncryptedDeviceDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceDataKey);
      }
      if (DenyApproval != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveUserDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.EncryptedDeviceDataKey.Length != 0) {
        EncryptedDeviceDataKey = other.EncryptedDeviceDataKey;
      }
      if (other.DenyApproval != false) {
        DenyApproval = other.DenyApproval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 26: {
            EncryptedDeviceDataKey = input.ReadBytes();
            break;
          }
          case 32: {
            DenyApproval = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveUserDeviceResponse : pb::IMessage<ApproveUserDeviceResponse> {
    private static readonly pb::MessageParser<ApproveUserDeviceResponse> _parser = new pb::MessageParser<ApproveUserDeviceResponse>(() => new ApproveUserDeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveUserDeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceResponse(ApproveUserDeviceResponse other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      failed_ = other.failed_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDeviceResponse Clone() {
      return new ApproveUserDeviceResponse(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 2;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "failed" field.</summary>
    public const int FailedFieldNumber = 3;
    private bool failed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Failed {
      get { return failed_; }
      set {
        failed_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveUserDeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveUserDeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (Failed != other.Failed) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (Failed != false) hash ^= Failed.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (Failed != false) {
        output.WriteRawTag(24);
        output.WriteBool(Failed);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (Failed != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveUserDeviceResponse other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.Failed != false) {
        Failed = other.Failed;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 24: {
            Failed = input.ReadBool();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveUserDevicesRequest : pb::IMessage<ApproveUserDevicesRequest> {
    private static readonly pb::MessageParser<ApproveUserDevicesRequest> _parser = new pb::MessageParser<ApproveUserDevicesRequest>(() => new ApproveUserDevicesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveUserDevicesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesRequest(ApproveUserDevicesRequest other) : this() {
      deviceRequests_ = other.deviceRequests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesRequest Clone() {
      return new ApproveUserDevicesRequest(this);
    }

    /// <summary>Field number for the "deviceRequests" field.</summary>
    public const int DeviceRequestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.ApproveUserDeviceRequest> _repeated_deviceRequests_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.ApproveUserDeviceRequest.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ApproveUserDeviceRequest> deviceRequests_ = new pbc::RepeatedField<global::Enterprise.ApproveUserDeviceRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ApproveUserDeviceRequest> DeviceRequests {
      get { return deviceRequests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveUserDevicesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveUserDevicesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deviceRequests_.Equals(other.deviceRequests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deviceRequests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deviceRequests_.WriteTo(output, _repeated_deviceRequests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deviceRequests_.CalculateSize(_repeated_deviceRequests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveUserDevicesRequest other) {
      if (other == null) {
        return;
      }
      deviceRequests_.Add(other.deviceRequests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            deviceRequests_.AddEntriesFrom(input, _repeated_deviceRequests_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveUserDevicesResponse : pb::IMessage<ApproveUserDevicesResponse> {
    private static readonly pb::MessageParser<ApproveUserDevicesResponse> _parser = new pb::MessageParser<ApproveUserDevicesResponse>(() => new ApproveUserDevicesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveUserDevicesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesResponse(ApproveUserDevicesResponse other) : this() {
      deviceResponses_ = other.deviceResponses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveUserDevicesResponse Clone() {
      return new ApproveUserDevicesResponse(this);
    }

    /// <summary>Field number for the "deviceResponses" field.</summary>
    public const int DeviceResponsesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.ApproveUserDeviceResponse> _repeated_deviceResponses_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.ApproveUserDeviceResponse.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ApproveUserDeviceResponse> deviceResponses_ = new pbc::RepeatedField<global::Enterprise.ApproveUserDeviceResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ApproveUserDeviceResponse> DeviceResponses {
      get { return deviceResponses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveUserDevicesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveUserDevicesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deviceResponses_.Equals(other.deviceResponses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deviceResponses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deviceResponses_.WriteTo(output, _repeated_deviceResponses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deviceResponses_.CalculateSize(_repeated_deviceResponses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveUserDevicesResponse other) {
      if (other == null) {
        return;
      }
      deviceResponses_.Add(other.deviceResponses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            deviceResponses_.AddEntriesFrom(input, _repeated_deviceResponses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseUserDataKey : pb::IMessage<EnterpriseUserDataKey> {
    private static readonly pb::MessageParser<EnterpriseUserDataKey> _parser = new pb::MessageParser<EnterpriseUserDataKey>(() => new EnterpriseUserDataKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseUserDataKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKey(EnterpriseUserDataKey other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      userEncryptedDataKey_ = other.userEncryptedDataKey_;
      keyTypeId_ = other.keyTypeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKey Clone() {
      return new EnterpriseUserDataKey(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "userEncryptedDataKey" field.</summary>
    public const int UserEncryptedDataKeyFieldNumber = 2;
    private pb::ByteString userEncryptedDataKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserEncryptedDataKey {
      get { return userEncryptedDataKey_; }
      set {
        userEncryptedDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyTypeId" field.</summary>
    public const int KeyTypeIdFieldNumber = 3;
    private int keyTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeyTypeId {
      get { return keyTypeId_; }
      set {
        keyTypeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseUserDataKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseUserDataKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (UserEncryptedDataKey != other.UserEncryptedDataKey) return false;
      if (KeyTypeId != other.KeyTypeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (UserEncryptedDataKey.Length != 0) hash ^= UserEncryptedDataKey.GetHashCode();
      if (KeyTypeId != 0) hash ^= KeyTypeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (UserEncryptedDataKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(UserEncryptedDataKey);
      }
      if (KeyTypeId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(KeyTypeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (UserEncryptedDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserEncryptedDataKey);
      }
      if (KeyTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyTypeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseUserDataKey other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.UserEncryptedDataKey.Length != 0) {
        UserEncryptedDataKey = other.UserEncryptedDataKey;
      }
      if (other.KeyTypeId != 0) {
        KeyTypeId = other.KeyTypeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            UserEncryptedDataKey = input.ReadBytes();
            break;
          }
          case 24: {
            KeyTypeId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseUserDataKeys : pb::IMessage<EnterpriseUserDataKeys> {
    private static readonly pb::MessageParser<EnterpriseUserDataKeys> _parser = new pb::MessageParser<EnterpriseUserDataKeys>(() => new EnterpriseUserDataKeys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseUserDataKeys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKeys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKeys(EnterpriseUserDataKeys other) : this() {
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserDataKeys Clone() {
      return new EnterpriseUserDataKeys(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.EnterpriseUserDataKey> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.EnterpriseUserDataKey.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.EnterpriseUserDataKey> keys_ = new pbc::RepeatedField<global::Enterprise.EnterpriseUserDataKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.EnterpriseUserDataKey> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseUserDataKeys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseUserDataKeys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseUserDataKeys other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseDataRequest : pb::IMessage<EnterpriseDataRequest> {
    private static readonly pb::MessageParser<EnterpriseDataRequest> _parser = new pb::MessageParser<EnterpriseDataRequest>(() => new EnterpriseDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseDataRequest(EnterpriseDataRequest other) : this() {
      continuationToken_ = other.continuationToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseDataRequest Clone() {
      return new EnterpriseDataRequest(this);
    }

    /// <summary>Field number for the "continuationToken" field.</summary>
    public const int ContinuationTokenFieldNumber = 1;
    private pb::ByteString continuationToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContinuationToken {
      get { return continuationToken_; }
      set {
        continuationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContinuationToken != other.ContinuationToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContinuationToken.Length != 0) hash ^= ContinuationToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContinuationToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ContinuationToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContinuationToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContinuationToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.ContinuationToken.Length != 0) {
        ContinuationToken = other.ContinuationToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ContinuationToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpecialProvisioning : pb::IMessage<SpecialProvisioning> {
    private static readonly pb::MessageParser<SpecialProvisioning> _parser = new pb::MessageParser<SpecialProvisioning>(() => new SpecialProvisioning());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecialProvisioning> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialProvisioning() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialProvisioning(SpecialProvisioning other) : this() {
      url_ = other.url_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialProvisioning Clone() {
      return new SpecialProvisioning(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecialProvisioning);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecialProvisioning other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecialProvisioning other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeneralDataEntity : pb::IMessage<GeneralDataEntity> {
    private static readonly pb::MessageParser<GeneralDataEntity> _parser = new pb::MessageParser<GeneralDataEntity>(() => new GeneralDataEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeneralDataEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralDataEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralDataEntity(GeneralDataEntity other) : this() {
      enterpriseName_ = other.enterpriseName_;
      restrictVisibility_ = other.restrictVisibility_;
      specialProvisioning_ = other.specialProvisioning_ != null ? other.specialProvisioning_.Clone() : null;
      userPrivilege_ = other.userPrivilege_ != null ? other.userPrivilege_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralDataEntity Clone() {
      return new GeneralDataEntity(this);
    }

    /// <summary>Field number for the "enterpriseName" field.</summary>
    public const int EnterpriseNameFieldNumber = 1;
    private string enterpriseName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnterpriseName {
      get { return enterpriseName_; }
      set {
        enterpriseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "restrictVisibility" field.</summary>
    public const int RestrictVisibilityFieldNumber = 2;
    private bool restrictVisibility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictVisibility {
      get { return restrictVisibility_; }
      set {
        restrictVisibility_ = value;
      }
    }

    /// <summary>Field number for the "specialProvisioning" field.</summary>
    public const int SpecialProvisioningFieldNumber = 4;
    private global::Enterprise.SpecialProvisioning specialProvisioning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.SpecialProvisioning SpecialProvisioning {
      get { return specialProvisioning_; }
      set {
        specialProvisioning_ = value;
      }
    }

    /// <summary>Field number for the "userPrivilege" field.</summary>
    public const int UserPrivilegeFieldNumber = 7;
    private global::Enterprise.UserPrivilege userPrivilege_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.UserPrivilege UserPrivilege {
      get { return userPrivilege_; }
      set {
        userPrivilege_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeneralDataEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeneralDataEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseName != other.EnterpriseName) return false;
      if (RestrictVisibility != other.RestrictVisibility) return false;
      if (!object.Equals(SpecialProvisioning, other.SpecialProvisioning)) return false;
      if (!object.Equals(UserPrivilege, other.UserPrivilege)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseName.Length != 0) hash ^= EnterpriseName.GetHashCode();
      if (RestrictVisibility != false) hash ^= RestrictVisibility.GetHashCode();
      if (specialProvisioning_ != null) hash ^= SpecialProvisioning.GetHashCode();
      if (userPrivilege_ != null) hash ^= UserPrivilege.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EnterpriseName);
      }
      if (RestrictVisibility != false) {
        output.WriteRawTag(16);
        output.WriteBool(RestrictVisibility);
      }
      if (specialProvisioning_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SpecialProvisioning);
      }
      if (userPrivilege_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UserPrivilege);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnterpriseName);
      }
      if (RestrictVisibility != false) {
        size += 1 + 1;
      }
      if (specialProvisioning_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpecialProvisioning);
      }
      if (userPrivilege_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPrivilege);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeneralDataEntity other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseName.Length != 0) {
        EnterpriseName = other.EnterpriseName;
      }
      if (other.RestrictVisibility != false) {
        RestrictVisibility = other.RestrictVisibility;
      }
      if (other.specialProvisioning_ != null) {
        if (specialProvisioning_ == null) {
          SpecialProvisioning = new global::Enterprise.SpecialProvisioning();
        }
        SpecialProvisioning.MergeFrom(other.SpecialProvisioning);
      }
      if (other.userPrivilege_ != null) {
        if (userPrivilege_ == null) {
          UserPrivilege = new global::Enterprise.UserPrivilege();
        }
        UserPrivilege.MergeFrom(other.UserPrivilege);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EnterpriseName = input.ReadString();
            break;
          }
          case 16: {
            RestrictVisibility = input.ReadBool();
            break;
          }
          case 34: {
            if (specialProvisioning_ == null) {
              SpecialProvisioning = new global::Enterprise.SpecialProvisioning();
            }
            input.ReadMessage(SpecialProvisioning);
            break;
          }
          case 58: {
            if (userPrivilege_ == null) {
              UserPrivilege = new global::Enterprise.UserPrivilege();
            }
            input.ReadMessage(UserPrivilege);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      nodeId_ = other.nodeId_;
      parentId_ = other.parentId_;
      bridgeId_ = other.bridgeId_;
      scimId_ = other.scimId_;
      licenseId_ = other.licenseId_;
      encryptedData_ = other.encryptedData_;
      duoEnabled_ = other.duoEnabled_;
      rsaEnabled_ = other.rsaEnabled_;
      ssoServiceProviderId_ = other.ssoServiceProviderId_;
      restrictVisibility_ = other.restrictVisibility_;
      ssoServiceProviderIds_ = other.ssoServiceProviderIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "parentId" field.</summary>
    public const int ParentIdFieldNumber = 2;
    private long parentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentId {
      get { return parentId_; }
      set {
        parentId_ = value;
      }
    }

    /// <summary>Field number for the "bridgeId" field.</summary>
    public const int BridgeIdFieldNumber = 3;
    private long bridgeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BridgeId {
      get { return bridgeId_; }
      set {
        bridgeId_ = value;
      }
    }

    /// <summary>Field number for the "scimId" field.</summary>
    public const int ScimIdFieldNumber = 4;
    private long scimId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScimId {
      get { return scimId_; }
      set {
        scimId_ = value;
      }
    }

    /// <summary>Field number for the "licenseId" field.</summary>
    public const int LicenseIdFieldNumber = 5;
    private long licenseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LicenseId {
      get { return licenseId_; }
      set {
        licenseId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 6;
    private string encryptedData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duoEnabled" field.</summary>
    public const int DuoEnabledFieldNumber = 7;
    private bool duoEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DuoEnabled {
      get { return duoEnabled_; }
      set {
        duoEnabled_ = value;
      }
    }

    /// <summary>Field number for the "rsaEnabled" field.</summary>
    public const int RsaEnabledFieldNumber = 8;
    private bool rsaEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RsaEnabled {
      get { return rsaEnabled_; }
      set {
        rsaEnabled_ = value;
      }
    }

    /// <summary>Field number for the "ssoServiceProviderId" field.</summary>
    public const int SsoServiceProviderIdFieldNumber = 9;
    private long ssoServiceProviderId_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SsoServiceProviderId {
      get { return ssoServiceProviderId_; }
      set {
        ssoServiceProviderId_ = value;
      }
    }

    /// <summary>Field number for the "restrictVisibility" field.</summary>
    public const int RestrictVisibilityFieldNumber = 10;
    private bool restrictVisibility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictVisibility {
      get { return restrictVisibility_; }
      set {
        restrictVisibility_ = value;
      }
    }

    /// <summary>Field number for the "ssoServiceProviderIds" field.</summary>
    public const int SsoServiceProviderIdsFieldNumber = 11;
    private static readonly pb::FieldCodec<long> _repeated_ssoServiceProviderIds_codec
        = pb::FieldCodec.ForInt64(90);
    private readonly pbc::RepeatedField<long> ssoServiceProviderIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// Nov 2021 - Nodes can now have more than one sso ServiceProviderId.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> SsoServiceProviderIds {
      get { return ssoServiceProviderIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (ParentId != other.ParentId) return false;
      if (BridgeId != other.BridgeId) return false;
      if (ScimId != other.ScimId) return false;
      if (LicenseId != other.LicenseId) return false;
      if (EncryptedData != other.EncryptedData) return false;
      if (DuoEnabled != other.DuoEnabled) return false;
      if (RsaEnabled != other.RsaEnabled) return false;
      if (SsoServiceProviderId != other.SsoServiceProviderId) return false;
      if (RestrictVisibility != other.RestrictVisibility) return false;
      if(!ssoServiceProviderIds_.Equals(other.ssoServiceProviderIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (ParentId != 0L) hash ^= ParentId.GetHashCode();
      if (BridgeId != 0L) hash ^= BridgeId.GetHashCode();
      if (ScimId != 0L) hash ^= ScimId.GetHashCode();
      if (LicenseId != 0L) hash ^= LicenseId.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (DuoEnabled != false) hash ^= DuoEnabled.GetHashCode();
      if (RsaEnabled != false) hash ^= RsaEnabled.GetHashCode();
      if (SsoServiceProviderId != 0L) hash ^= SsoServiceProviderId.GetHashCode();
      if (RestrictVisibility != false) hash ^= RestrictVisibility.GetHashCode();
      hash ^= ssoServiceProviderIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NodeId);
      }
      if (ParentId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ParentId);
      }
      if (BridgeId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BridgeId);
      }
      if (ScimId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ScimId);
      }
      if (LicenseId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LicenseId);
      }
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EncryptedData);
      }
      if (DuoEnabled != false) {
        output.WriteRawTag(56);
        output.WriteBool(DuoEnabled);
      }
      if (RsaEnabled != false) {
        output.WriteRawTag(64);
        output.WriteBool(RsaEnabled);
      }
      if (SsoServiceProviderId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(SsoServiceProviderId);
      }
      if (RestrictVisibility != false) {
        output.WriteRawTag(80);
        output.WriteBool(RestrictVisibility);
      }
      ssoServiceProviderIds_.WriteTo(output, _repeated_ssoServiceProviderIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (ParentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentId);
      }
      if (BridgeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BridgeId);
      }
      if (ScimId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScimId);
      }
      if (LicenseId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LicenseId);
      }
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedData);
      }
      if (DuoEnabled != false) {
        size += 1 + 1;
      }
      if (RsaEnabled != false) {
        size += 1 + 1;
      }
      if (SsoServiceProviderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SsoServiceProviderId);
      }
      if (RestrictVisibility != false) {
        size += 1 + 1;
      }
      size += ssoServiceProviderIds_.CalculateSize(_repeated_ssoServiceProviderIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.ParentId != 0L) {
        ParentId = other.ParentId;
      }
      if (other.BridgeId != 0L) {
        BridgeId = other.BridgeId;
      }
      if (other.ScimId != 0L) {
        ScimId = other.ScimId;
      }
      if (other.LicenseId != 0L) {
        LicenseId = other.LicenseId;
      }
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      if (other.DuoEnabled != false) {
        DuoEnabled = other.DuoEnabled;
      }
      if (other.RsaEnabled != false) {
        RsaEnabled = other.RsaEnabled;
      }
      if (other.SsoServiceProviderId != 0L) {
        SsoServiceProviderId = other.SsoServiceProviderId;
      }
      if (other.RestrictVisibility != false) {
        RestrictVisibility = other.RestrictVisibility;
      }
      ssoServiceProviderIds_.Add(other.ssoServiceProviderIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadInt64();
            break;
          }
          case 16: {
            ParentId = input.ReadInt64();
            break;
          }
          case 24: {
            BridgeId = input.ReadInt64();
            break;
          }
          case 32: {
            ScimId = input.ReadInt64();
            break;
          }
          case 40: {
            LicenseId = input.ReadInt64();
            break;
          }
          case 50: {
            EncryptedData = input.ReadString();
            break;
          }
          case 56: {
            DuoEnabled = input.ReadBool();
            break;
          }
          case 64: {
            RsaEnabled = input.ReadBool();
            break;
          }
          case 72: {
            SsoServiceProviderId = input.ReadInt64();
            break;
          }
          case 80: {
            RestrictVisibility = input.ReadBool();
            break;
          }
          case 90:
          case 88: {
            ssoServiceProviderIds_.AddEntriesFrom(input, _repeated_ssoServiceProviderIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Role : pb::IMessage<Role> {
    private static readonly pb::MessageParser<Role> _parser = new pb::MessageParser<Role>(() => new Role());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Role> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role(Role other) : this() {
      roleId_ = other.roleId_;
      nodeId_ = other.nodeId_;
      encryptedData_ = other.encryptedData_;
      keyType_ = other.keyType_;
      visibleBelow_ = other.visibleBelow_;
      newUserInherit_ = other.newUserInherit_;
      roleType_ = other.roleType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role Clone() {
      return new Role(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 3;
    private string encryptedData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyType" field.</summary>
    public const int KeyTypeFieldNumber = 4;
    private string keyType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyType {
      get { return keyType_; }
      set {
        keyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visibleBelow" field.</summary>
    public const int VisibleBelowFieldNumber = 5;
    private bool visibleBelow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VisibleBelow {
      get { return visibleBelow_; }
      set {
        visibleBelow_ = value;
      }
    }

    /// <summary>Field number for the "newUserInherit" field.</summary>
    public const int NewUserInheritFieldNumber = 6;
    private bool newUserInherit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NewUserInherit {
      get { return newUserInherit_; }
      set {
        newUserInherit_ = value;
      }
    }

    /// <summary>Field number for the "roleType" field.</summary>
    public const int RoleTypeFieldNumber = 7;
    private string roleType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleType {
      get { return roleType_; }
      set {
        roleType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Role);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Role other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (NodeId != other.NodeId) return false;
      if (EncryptedData != other.EncryptedData) return false;
      if (KeyType != other.KeyType) return false;
      if (VisibleBelow != other.VisibleBelow) return false;
      if (NewUserInherit != other.NewUserInherit) return false;
      if (RoleType != other.RoleType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (KeyType.Length != 0) hash ^= KeyType.GetHashCode();
      if (VisibleBelow != false) hash ^= VisibleBelow.GetHashCode();
      if (NewUserInherit != false) hash ^= NewUserInherit.GetHashCode();
      if (RoleType.Length != 0) hash ^= RoleType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NodeId);
      }
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EncryptedData);
      }
      if (KeyType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(KeyType);
      }
      if (VisibleBelow != false) {
        output.WriteRawTag(40);
        output.WriteBool(VisibleBelow);
      }
      if (NewUserInherit != false) {
        output.WriteRawTag(48);
        output.WriteBool(NewUserInherit);
      }
      if (RoleType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RoleType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedData);
      }
      if (KeyType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyType);
      }
      if (VisibleBelow != false) {
        size += 1 + 1;
      }
      if (NewUserInherit != false) {
        size += 1 + 1;
      }
      if (RoleType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Role other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      if (other.KeyType.Length != 0) {
        KeyType = other.KeyType;
      }
      if (other.VisibleBelow != false) {
        VisibleBelow = other.VisibleBelow;
      }
      if (other.NewUserInherit != false) {
        NewUserInherit = other.NewUserInherit;
      }
      if (other.RoleType.Length != 0) {
        RoleType = other.RoleType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 16: {
            NodeId = input.ReadInt64();
            break;
          }
          case 26: {
            EncryptedData = input.ReadString();
            break;
          }
          case 34: {
            KeyType = input.ReadString();
            break;
          }
          case 40: {
            VisibleBelow = input.ReadBool();
            break;
          }
          case 48: {
            NewUserInherit = input.ReadBool();
            break;
          }
          case 58: {
            RoleType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      nodeId_ = other.nodeId_;
      encryptedData_ = other.encryptedData_;
      keyType_ = other.keyType_;
      username_ = other.username_;
      status_ = other.status_;
      lock_ = other.lock_;
      userId_ = other.userId_;
      accountShareExpiration_ = other.accountShareExpiration_;
      fullName_ = other.fullName_;
      jobTitle_ = other.jobTitle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 3;
    private string encryptedData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyType" field.</summary>
    public const int KeyTypeFieldNumber = 4;
    private string keyType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyType {
      get { return keyType_; }
      set {
        keyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 5;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lock" field.</summary>
    public const int LockFieldNumber = 7;
    private int lock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lock {
      get { return lock_; }
      set {
        lock_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 8;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "accountShareExpiration" field.</summary>
    public const int AccountShareExpirationFieldNumber = 9;
    private long accountShareExpiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountShareExpiration {
      get { return accountShareExpiration_; }
      set {
        accountShareExpiration_ = value;
      }
    }

    /// <summary>Field number for the "fullName" field.</summary>
    public const int FullNameFieldNumber = 10;
    private string fullName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jobTitle" field.</summary>
    public const int JobTitleFieldNumber = 11;
    private string jobTitle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobTitle {
      get { return jobTitle_; }
      set {
        jobTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (NodeId != other.NodeId) return false;
      if (EncryptedData != other.EncryptedData) return false;
      if (KeyType != other.KeyType) return false;
      if (Username != other.Username) return false;
      if (Status != other.Status) return false;
      if (Lock != other.Lock) return false;
      if (UserId != other.UserId) return false;
      if (AccountShareExpiration != other.AccountShareExpiration) return false;
      if (FullName != other.FullName) return false;
      if (JobTitle != other.JobTitle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (KeyType.Length != 0) hash ^= KeyType.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Lock != 0) hash ^= Lock.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (AccountShareExpiration != 0L) hash ^= AccountShareExpiration.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      if (JobTitle.Length != 0) hash ^= JobTitle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NodeId);
      }
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EncryptedData);
      }
      if (KeyType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(KeyType);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Username);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Status);
      }
      if (Lock != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Lock);
      }
      if (UserId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UserId);
      }
      if (AccountShareExpiration != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(AccountShareExpiration);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(FullName);
      }
      if (JobTitle.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(JobTitle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedData);
      }
      if (KeyType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyType);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Lock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lock);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (AccountShareExpiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountShareExpiration);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      if (JobTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobTitle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      if (other.KeyType.Length != 0) {
        KeyType = other.KeyType;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Lock != 0) {
        Lock = other.Lock;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.AccountShareExpiration != 0L) {
        AccountShareExpiration = other.AccountShareExpiration;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
      if (other.JobTitle.Length != 0) {
        JobTitle = other.JobTitle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 16: {
            NodeId = input.ReadInt64();
            break;
          }
          case 26: {
            EncryptedData = input.ReadString();
            break;
          }
          case 34: {
            KeyType = input.ReadString();
            break;
          }
          case 42: {
            Username = input.ReadString();
            break;
          }
          case 50: {
            Status = input.ReadString();
            break;
          }
          case 56: {
            Lock = input.ReadInt32();
            break;
          }
          case 64: {
            UserId = input.ReadInt32();
            break;
          }
          case 72: {
            AccountShareExpiration = input.ReadInt64();
            break;
          }
          case 82: {
            FullName = input.ReadString();
            break;
          }
          case 90: {
            JobTitle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserAlias : pb::IMessage<UserAlias> {
    private static readonly pb::MessageParser<UserAlias> _parser = new pb::MessageParser<UserAlias>(() => new UserAlias());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAlias> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAlias() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAlias(UserAlias other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAlias Clone() {
      return new UserAlias(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAlias);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAlias other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAlias other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComplianceReportMetaData : pb::IMessage<ComplianceReportMetaData> {
    private static readonly pb::MessageParser<ComplianceReportMetaData> _parser = new pb::MessageParser<ComplianceReportMetaData>(() => new ComplianceReportMetaData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComplianceReportMetaData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportMetaData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportMetaData(ComplianceReportMetaData other) : this() {
      reportUid_ = other.reportUid_;
      nodeId_ = other.nodeId_;
      reportName_ = other.reportName_;
      dateGenerated_ = other.dateGenerated_;
      runByName_ = other.runByName_;
      numberOfOwners_ = other.numberOfOwners_;
      numberOfRecords_ = other.numberOfRecords_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportMetaData Clone() {
      return new ComplianceReportMetaData(this);
    }

    /// <summary>Field number for the "reportUid" field.</summary>
    public const int ReportUidFieldNumber = 1;
    private pb::ByteString reportUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReportUid {
      get { return reportUid_; }
      set {
        reportUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private long nodeId_;
    /// <summary>
    ///  node where the report was generated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "reportName" field.</summary>
    public const int ReportNameFieldNumber = 3;
    private string reportName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReportName {
      get { return reportName_; }
      set {
        reportName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dateGenerated" field.</summary>
    public const int DateGeneratedFieldNumber = 4;
    private long dateGenerated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DateGenerated {
      get { return dateGenerated_; }
      set {
        dateGenerated_ = value;
      }
    }

    /// <summary>Field number for the "runByName" field.</summary>
    public const int RunByNameFieldNumber = 5;
    private string runByName_ = "";
    /// <summary>
    ///  user who generated the report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunByName {
      get { return runByName_; }
      set {
        runByName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "numberOfOwners" field.</summary>
    public const int NumberOfOwnersFieldNumber = 7;
    private int numberOfOwners_;
    /// <summary>
    ///  number of record owners included in the report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfOwners {
      get { return numberOfOwners_; }
      set {
        numberOfOwners_ = value;
      }
    }

    /// <summary>Field number for the "numberOfRecords" field.</summary>
    public const int NumberOfRecordsFieldNumber = 8;
    private int numberOfRecords_;
    /// <summary>
    ///  number of records included in the report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfRecords {
      get { return numberOfRecords_; }
      set {
        numberOfRecords_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComplianceReportMetaData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComplianceReportMetaData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReportUid != other.ReportUid) return false;
      if (NodeId != other.NodeId) return false;
      if (ReportName != other.ReportName) return false;
      if (DateGenerated != other.DateGenerated) return false;
      if (RunByName != other.RunByName) return false;
      if (NumberOfOwners != other.NumberOfOwners) return false;
      if (NumberOfRecords != other.NumberOfRecords) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReportUid.Length != 0) hash ^= ReportUid.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (ReportName.Length != 0) hash ^= ReportName.GetHashCode();
      if (DateGenerated != 0L) hash ^= DateGenerated.GetHashCode();
      if (RunByName.Length != 0) hash ^= RunByName.GetHashCode();
      if (NumberOfOwners != 0) hash ^= NumberOfOwners.GetHashCode();
      if (NumberOfRecords != 0) hash ^= NumberOfRecords.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ReportUid);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NodeId);
      }
      if (ReportName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReportName);
      }
      if (DateGenerated != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DateGenerated);
      }
      if (RunByName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RunByName);
      }
      if (NumberOfOwners != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NumberOfOwners);
      }
      if (NumberOfRecords != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NumberOfRecords);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReportUid);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (ReportName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportName);
      }
      if (DateGenerated != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DateGenerated);
      }
      if (RunByName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunByName);
      }
      if (NumberOfOwners != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfOwners);
      }
      if (NumberOfRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfRecords);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComplianceReportMetaData other) {
      if (other == null) {
        return;
      }
      if (other.ReportUid.Length != 0) {
        ReportUid = other.ReportUid;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.ReportName.Length != 0) {
        ReportName = other.ReportName;
      }
      if (other.DateGenerated != 0L) {
        DateGenerated = other.DateGenerated;
      }
      if (other.RunByName.Length != 0) {
        RunByName = other.RunByName;
      }
      if (other.NumberOfOwners != 0) {
        NumberOfOwners = other.NumberOfOwners;
      }
      if (other.NumberOfRecords != 0) {
        NumberOfRecords = other.NumberOfRecords;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReportUid = input.ReadBytes();
            break;
          }
          case 16: {
            NodeId = input.ReadInt64();
            break;
          }
          case 26: {
            ReportName = input.ReadString();
            break;
          }
          case 32: {
            DateGenerated = input.ReadInt64();
            break;
          }
          case 42: {
            RunByName = input.ReadString();
            break;
          }
          case 56: {
            NumberOfOwners = input.ReadInt32();
            break;
          }
          case 64: {
            NumberOfRecords = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ManagedNode : pb::IMessage<ManagedNode> {
    private static readonly pb::MessageParser<ManagedNode> _parser = new pb::MessageParser<ManagedNode>(() => new ManagedNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManagedNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedNode(ManagedNode other) : this() {
      roleId_ = other.roleId_;
      managedNodeId_ = other.managedNodeId_;
      cascadeNodeManagement_ = other.cascadeNodeManagement_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedNode Clone() {
      return new ManagedNode(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "managedNodeId" field.</summary>
    public const int ManagedNodeIdFieldNumber = 2;
    private long managedNodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ManagedNodeId {
      get { return managedNodeId_; }
      set {
        managedNodeId_ = value;
      }
    }

    /// <summary>Field number for the "cascadeNodeManagement" field.</summary>
    public const int CascadeNodeManagementFieldNumber = 3;
    private bool cascadeNodeManagement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CascadeNodeManagement {
      get { return cascadeNodeManagement_; }
      set {
        cascadeNodeManagement_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManagedNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManagedNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (ManagedNodeId != other.ManagedNodeId) return false;
      if (CascadeNodeManagement != other.CascadeNodeManagement) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (ManagedNodeId != 0L) hash ^= ManagedNodeId.GetHashCode();
      if (CascadeNodeManagement != false) hash ^= CascadeNodeManagement.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (ManagedNodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ManagedNodeId);
      }
      if (CascadeNodeManagement != false) {
        output.WriteRawTag(24);
        output.WriteBool(CascadeNodeManagement);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (ManagedNodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ManagedNodeId);
      }
      if (CascadeNodeManagement != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManagedNode other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.ManagedNodeId != 0L) {
        ManagedNodeId = other.ManagedNodeId;
      }
      if (other.CascadeNodeManagement != false) {
        CascadeNodeManagement = other.CascadeNodeManagement;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 16: {
            ManagedNodeId = input.ReadInt64();
            break;
          }
          case 24: {
            CascadeNodeManagement = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserManagedNode : pb::IMessage<UserManagedNode> {
    private static readonly pb::MessageParser<UserManagedNode> _parser = new pb::MessageParser<UserManagedNode>(() => new UserManagedNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserManagedNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserManagedNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserManagedNode(UserManagedNode other) : this() {
      nodeId_ = other.nodeId_;
      cascadeNodeManagement_ = other.cascadeNodeManagement_;
      privileges_ = other.privileges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserManagedNode Clone() {
      return new UserManagedNode(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "cascadeNodeManagement" field.</summary>
    public const int CascadeNodeManagementFieldNumber = 2;
    private bool cascadeNodeManagement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CascadeNodeManagement {
      get { return cascadeNodeManagement_; }
      set {
        cascadeNodeManagement_ = value;
      }
    }

    /// <summary>Field number for the "privileges" field.</summary>
    public const int PrivilegesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_privileges_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> privileges_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Privileges {
      get { return privileges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserManagedNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserManagedNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (CascadeNodeManagement != other.CascadeNodeManagement) return false;
      if(!privileges_.Equals(other.privileges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (CascadeNodeManagement != false) hash ^= CascadeNodeManagement.GetHashCode();
      hash ^= privileges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NodeId);
      }
      if (CascadeNodeManagement != false) {
        output.WriteRawTag(16);
        output.WriteBool(CascadeNodeManagement);
      }
      privileges_.WriteTo(output, _repeated_privileges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (CascadeNodeManagement != false) {
        size += 1 + 1;
      }
      size += privileges_.CalculateSize(_repeated_privileges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserManagedNode other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.CascadeNodeManagement != false) {
        CascadeNodeManagement = other.CascadeNodeManagement;
      }
      privileges_.Add(other.privileges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadInt64();
            break;
          }
          case 16: {
            CascadeNodeManagement = input.ReadBool();
            break;
          }
          case 26: {
            privileges_.AddEntriesFrom(input, _repeated_privileges_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserPrivilege : pb::IMessage<UserPrivilege> {
    private static readonly pb::MessageParser<UserPrivilege> _parser = new pb::MessageParser<UserPrivilege>(() => new UserPrivilege());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserPrivilege> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPrivilege() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPrivilege(UserPrivilege other) : this() {
      userManagedNodes_ = other.userManagedNodes_.Clone();
      enterpriseUserId_ = other.enterpriseUserId_;
      encryptedData_ = other.encryptedData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPrivilege Clone() {
      return new UserPrivilege(this);
    }

    /// <summary>Field number for the "userManagedNodes" field.</summary>
    public const int UserManagedNodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.UserManagedNode> _repeated_userManagedNodes_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.UserManagedNode.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.UserManagedNode> userManagedNodes_ = new pbc::RepeatedField<global::Enterprise.UserManagedNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.UserManagedNode> UserManagedNodes {
      get { return userManagedNodes_; }
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 2;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 3;
    private string encryptedData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserPrivilege);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserPrivilege other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userManagedNodes_.Equals(other.userManagedNodes_)) return false;
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (EncryptedData != other.EncryptedData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userManagedNodes_.GetHashCode();
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userManagedNodes_.WriteTo(output, _repeated_userManagedNodes_codec);
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EnterpriseUserId);
      }
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EncryptedData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userManagedNodes_.CalculateSize(_repeated_userManagedNodes_codec);
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserPrivilege other) {
      if (other == null) {
        return;
      }
      userManagedNodes_.Add(other.userManagedNodes_);
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            userManagedNodes_.AddEntriesFrom(input, _repeated_userManagedNodes_codec);
            break;
          }
          case 16: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 26: {
            EncryptedData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleUser : pb::IMessage<RoleUser> {
    private static readonly pb::MessageParser<RoleUser> _parser = new pb::MessageParser<RoleUser>(() => new RoleUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleUser(RoleUser other) : this() {
      roleId_ = other.roleId_;
      enterpriseUserId_ = other.enterpriseUserId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleUser Clone() {
      return new RoleUser(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 2;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EnterpriseUserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleUser other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 16: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///possible values for privilegeType
  ///UNKNOWN = 0
  ///MANAGE_USER = 1
  ///MANAGE_NODES = 2
  ///MANAGE_LICENCES = 3
  ///MANAGE_ROLES = 4
  ///MANAGE_TEAMS = 5
  ///TRANSFER_ACCOUNT = 6
  ///RUN_REPORTS = 7
  ///VIEW_TREE = 8
  ///MANAGE_BRIDGE = 9
  ///MANAGE_COMPANIES = 10
  ///ALLOCATE_POOL_LICENSES = 11
  ///APPROVE_DEVICE = 13
  /// </summary>
  public sealed partial class RolePrivilege : pb::IMessage<RolePrivilege> {
    private static readonly pb::MessageParser<RolePrivilege> _parser = new pb::MessageParser<RolePrivilege>(() => new RolePrivilege());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RolePrivilege> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePrivilege() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePrivilege(RolePrivilege other) : this() {
      managedNodeId_ = other.managedNodeId_;
      roleId_ = other.roleId_;
      privilegeType_ = other.privilegeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RolePrivilege Clone() {
      return new RolePrivilege(this);
    }

    /// <summary>Field number for the "managedNodeId" field.</summary>
    public const int ManagedNodeIdFieldNumber = 1;
    private long managedNodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ManagedNodeId {
      get { return managedNodeId_; }
      set {
        managedNodeId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "privilegeType" field.</summary>
    public const int PrivilegeTypeFieldNumber = 3;
    private string privilegeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivilegeType {
      get { return privilegeType_; }
      set {
        privilegeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RolePrivilege);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RolePrivilege other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManagedNodeId != other.ManagedNodeId) return false;
      if (RoleId != other.RoleId) return false;
      if (PrivilegeType != other.PrivilegeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ManagedNodeId != 0L) hash ^= ManagedNodeId.GetHashCode();
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (PrivilegeType.Length != 0) hash ^= PrivilegeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManagedNodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ManagedNodeId);
      }
      if (RoleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoleId);
      }
      if (PrivilegeType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PrivilegeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManagedNodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ManagedNodeId);
      }
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (PrivilegeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivilegeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RolePrivilege other) {
      if (other == null) {
        return;
      }
      if (other.ManagedNodeId != 0L) {
        ManagedNodeId = other.ManagedNodeId;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.PrivilegeType.Length != 0) {
        PrivilegeType = other.PrivilegeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ManagedNodeId = input.ReadInt64();
            break;
          }
          case 16: {
            RoleId = input.ReadInt64();
            break;
          }
          case 26: {
            PrivilegeType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleEnforcement : pb::IMessage<RoleEnforcement> {
    private static readonly pb::MessageParser<RoleEnforcement> _parser = new pb::MessageParser<RoleEnforcement>(() => new RoleEnforcement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleEnforcement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleEnforcement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleEnforcement(RoleEnforcement other) : this() {
      roleId_ = other.roleId_;
      enforcementType_ = other.enforcementType_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleEnforcement Clone() {
      return new RoleEnforcement(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "enforcementType" field.</summary>
    public const int EnforcementTypeFieldNumber = 2;
    private string enforcementType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnforcementType {
      get { return enforcementType_; }
      set {
        enforcementType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleEnforcement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleEnforcement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (EnforcementType != other.EnforcementType) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (EnforcementType.Length != 0) hash ^= EnforcementType.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (EnforcementType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EnforcementType);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (EnforcementType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnforcementType);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleEnforcement other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.EnforcementType.Length != 0) {
        EnforcementType = other.EnforcementType;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            EnforcementType = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Team : pb::IMessage<Team> {
    private static readonly pb::MessageParser<Team> _parser = new pb::MessageParser<Team>(() => new Team());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Team> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team(Team other) : this() {
      teamUid_ = other.teamUid_;
      name_ = other.name_;
      nodeId_ = other.nodeId_;
      restrictEdit_ = other.restrictEdit_;
      restrictShare_ = other.restrictShare_;
      restrictView_ = other.restrictView_;
      encryptedData_ = other.encryptedData_;
      encryptedTeamKey_ = other.encryptedTeamKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team Clone() {
      return new Team(this);
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 1;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 3;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "restrictEdit" field.</summary>
    public const int RestrictEditFieldNumber = 4;
    private bool restrictEdit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictEdit {
      get { return restrictEdit_; }
      set {
        restrictEdit_ = value;
      }
    }

    /// <summary>Field number for the "restrictShare" field.</summary>
    public const int RestrictShareFieldNumber = 5;
    private bool restrictShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictShare {
      get { return restrictShare_; }
      set {
        restrictShare_ = value;
      }
    }

    /// <summary>Field number for the "restrictView" field.</summary>
    public const int RestrictViewFieldNumber = 6;
    private bool restrictView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictView {
      get { return restrictView_; }
      set {
        restrictView_ = value;
      }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 7;
    private string encryptedData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamKey" field.</summary>
    public const int EncryptedTeamKeyFieldNumber = 8;
    private string encryptedTeamKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedTeamKey {
      get { return encryptedTeamKey_; }
      set {
        encryptedTeamKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Team);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Team other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamUid != other.TeamUid) return false;
      if (Name != other.Name) return false;
      if (NodeId != other.NodeId) return false;
      if (RestrictEdit != other.RestrictEdit) return false;
      if (RestrictShare != other.RestrictShare) return false;
      if (RestrictView != other.RestrictView) return false;
      if (EncryptedData != other.EncryptedData) return false;
      if (EncryptedTeamKey != other.EncryptedTeamKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (RestrictEdit != false) hash ^= RestrictEdit.GetHashCode();
      if (RestrictShare != false) hash ^= RestrictShare.GetHashCode();
      if (RestrictView != false) hash ^= RestrictView.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (EncryptedTeamKey.Length != 0) hash ^= EncryptedTeamKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NodeId);
      }
      if (RestrictEdit != false) {
        output.WriteRawTag(32);
        output.WriteBool(RestrictEdit);
      }
      if (RestrictShare != false) {
        output.WriteRawTag(40);
        output.WriteBool(RestrictShare);
      }
      if (RestrictView != false) {
        output.WriteRawTag(48);
        output.WriteBool(RestrictView);
      }
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(EncryptedData);
      }
      if (EncryptedTeamKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(EncryptedTeamKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (RestrictEdit != false) {
        size += 1 + 1;
      }
      if (RestrictShare != false) {
        size += 1 + 1;
      }
      if (RestrictView != false) {
        size += 1 + 1;
      }
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedData);
      }
      if (EncryptedTeamKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedTeamKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Team other) {
      if (other == null) {
        return;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.RestrictEdit != false) {
        RestrictEdit = other.RestrictEdit;
      }
      if (other.RestrictShare != false) {
        RestrictShare = other.RestrictShare;
      }
      if (other.RestrictView != false) {
        RestrictView = other.RestrictView;
      }
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      if (other.EncryptedTeamKey.Length != 0) {
        EncryptedTeamKey = other.EncryptedTeamKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            NodeId = input.ReadInt64();
            break;
          }
          case 32: {
            RestrictEdit = input.ReadBool();
            break;
          }
          case 40: {
            RestrictShare = input.ReadBool();
            break;
          }
          case 48: {
            RestrictView = input.ReadBool();
            break;
          }
          case 58: {
            EncryptedData = input.ReadString();
            break;
          }
          case 66: {
            EncryptedTeamKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///possible value for userType
  ///USER = 0;
  ///ADMIN = 1;
  ///ADMIN_HIDE_SHARED_FOLDERS = 2;
  /// </summary>
  public sealed partial class TeamUser : pb::IMessage<TeamUser> {
    private static readonly pb::MessageParser<TeamUser> _parser = new pb::MessageParser<TeamUser>(() => new TeamUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamUser(TeamUser other) : this() {
      teamUid_ = other.teamUid_;
      enterpriseUserId_ = other.enterpriseUserId_;
      userType_ = other.userType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamUser Clone() {
      return new TeamUser(this);
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 1;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 2;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "userType" field.</summary>
    public const int UserTypeFieldNumber = 3;
    private string userType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserType {
      get { return userType_; }
      set {
        userType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamUid != other.TeamUid) return false;
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (UserType != other.UserType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (UserType.Length != 0) hash ^= UserType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EnterpriseUserId);
      }
      if (UserType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (UserType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamUser other) {
      if (other == null) {
        return;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.UserType.Length != 0) {
        UserType = other.UserType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 16: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 26: {
            UserType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ManagedCompany : pb::IMessage<ManagedCompany> {
    private static readonly pb::MessageParser<ManagedCompany> _parser = new pb::MessageParser<ManagedCompany>(() => new ManagedCompany());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManagedCompany> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedCompany() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedCompany(ManagedCompany other) : this() {
      mcEnterpriseId_ = other.mcEnterpriseId_;
      mcEnterpriseName_ = other.mcEnterpriseName_;
      mspNodeId_ = other.mspNodeId_;
      numberOfSeats_ = other.numberOfSeats_;
      numberOfUsers_ = other.numberOfUsers_;
      productId_ = other.productId_;
      isExpired_ = other.isExpired_;
      treeKey_ = other.treeKey_;
      treeKeyRole_ = other.treeKeyRole_;
      filePlanType_ = other.filePlanType_;
      addOns_ = other.addOns_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedCompany Clone() {
      return new ManagedCompany(this);
    }

    /// <summary>Field number for the "mcEnterpriseId" field.</summary>
    public const int McEnterpriseIdFieldNumber = 1;
    private int mcEnterpriseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int McEnterpriseId {
      get { return mcEnterpriseId_; }
      set {
        mcEnterpriseId_ = value;
      }
    }

    /// <summary>Field number for the "mcEnterpriseName" field.</summary>
    public const int McEnterpriseNameFieldNumber = 2;
    private string mcEnterpriseName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string McEnterpriseName {
      get { return mcEnterpriseName_; }
      set {
        mcEnterpriseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mspNodeId" field.</summary>
    public const int MspNodeIdFieldNumber = 3;
    private long mspNodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MspNodeId {
      get { return mspNodeId_; }
      set {
        mspNodeId_ = value;
      }
    }

    /// <summary>Field number for the "numberOfSeats" field.</summary>
    public const int NumberOfSeatsFieldNumber = 4;
    private int numberOfSeats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfSeats {
      get { return numberOfSeats_; }
      set {
        numberOfSeats_ = value;
      }
    }

    /// <summary>Field number for the "numberOfUsers" field.</summary>
    public const int NumberOfUsersFieldNumber = 5;
    private int numberOfUsers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfUsers {
      get { return numberOfUsers_; }
      set {
        numberOfUsers_ = value;
      }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 6;
    private string productId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isExpired" field.</summary>
    public const int IsExpiredFieldNumber = 7;
    private bool isExpired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsExpired {
      get { return isExpired_; }
      set {
        isExpired_ = value;
      }
    }

    /// <summary>Field number for the "treeKey" field.</summary>
    public const int TreeKeyFieldNumber = 8;
    private string treeKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TreeKey {
      get { return treeKey_; }
      set {
        treeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tree_key_role" field.</summary>
    public const int TreeKeyRoleFieldNumber = 9;
    private long treeKeyRole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TreeKeyRole {
      get { return treeKeyRole_; }
      set {
        treeKeyRole_ = value;
      }
    }

    /// <summary>Field number for the "filePlanType" field.</summary>
    public const int FilePlanTypeFieldNumber = 10;
    private string filePlanType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePlanType {
      get { return filePlanType_; }
      set {
        filePlanType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addOns" field.</summary>
    public const int AddOnsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Enterprise.LicenseAddOn> _repeated_addOns_codec
        = pb::FieldCodec.ForMessage(90, global::Enterprise.LicenseAddOn.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.LicenseAddOn> addOns_ = new pbc::RepeatedField<global::Enterprise.LicenseAddOn>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.LicenseAddOn> AddOns {
      get { return addOns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManagedCompany);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManagedCompany other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (McEnterpriseId != other.McEnterpriseId) return false;
      if (McEnterpriseName != other.McEnterpriseName) return false;
      if (MspNodeId != other.MspNodeId) return false;
      if (NumberOfSeats != other.NumberOfSeats) return false;
      if (NumberOfUsers != other.NumberOfUsers) return false;
      if (ProductId != other.ProductId) return false;
      if (IsExpired != other.IsExpired) return false;
      if (TreeKey != other.TreeKey) return false;
      if (TreeKeyRole != other.TreeKeyRole) return false;
      if (FilePlanType != other.FilePlanType) return false;
      if(!addOns_.Equals(other.addOns_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (McEnterpriseId != 0) hash ^= McEnterpriseId.GetHashCode();
      if (McEnterpriseName.Length != 0) hash ^= McEnterpriseName.GetHashCode();
      if (MspNodeId != 0L) hash ^= MspNodeId.GetHashCode();
      if (NumberOfSeats != 0) hash ^= NumberOfSeats.GetHashCode();
      if (NumberOfUsers != 0) hash ^= NumberOfUsers.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (IsExpired != false) hash ^= IsExpired.GetHashCode();
      if (TreeKey.Length != 0) hash ^= TreeKey.GetHashCode();
      if (TreeKeyRole != 0L) hash ^= TreeKeyRole.GetHashCode();
      if (FilePlanType.Length != 0) hash ^= FilePlanType.GetHashCode();
      hash ^= addOns_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (McEnterpriseId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(McEnterpriseId);
      }
      if (McEnterpriseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(McEnterpriseName);
      }
      if (MspNodeId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MspNodeId);
      }
      if (NumberOfSeats != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NumberOfSeats);
      }
      if (NumberOfUsers != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NumberOfUsers);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ProductId);
      }
      if (IsExpired != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsExpired);
      }
      if (TreeKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TreeKey);
      }
      if (TreeKeyRole != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(TreeKeyRole);
      }
      if (FilePlanType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(FilePlanType);
      }
      addOns_.WriteTo(output, _repeated_addOns_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (McEnterpriseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(McEnterpriseId);
      }
      if (McEnterpriseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(McEnterpriseName);
      }
      if (MspNodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MspNodeId);
      }
      if (NumberOfSeats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfSeats);
      }
      if (NumberOfUsers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfUsers);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (IsExpired != false) {
        size += 1 + 1;
      }
      if (TreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TreeKey);
      }
      if (TreeKeyRole != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TreeKeyRole);
      }
      if (FilePlanType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePlanType);
      }
      size += addOns_.CalculateSize(_repeated_addOns_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManagedCompany other) {
      if (other == null) {
        return;
      }
      if (other.McEnterpriseId != 0) {
        McEnterpriseId = other.McEnterpriseId;
      }
      if (other.McEnterpriseName.Length != 0) {
        McEnterpriseName = other.McEnterpriseName;
      }
      if (other.MspNodeId != 0L) {
        MspNodeId = other.MspNodeId;
      }
      if (other.NumberOfSeats != 0) {
        NumberOfSeats = other.NumberOfSeats;
      }
      if (other.NumberOfUsers != 0) {
        NumberOfUsers = other.NumberOfUsers;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.IsExpired != false) {
        IsExpired = other.IsExpired;
      }
      if (other.TreeKey.Length != 0) {
        TreeKey = other.TreeKey;
      }
      if (other.TreeKeyRole != 0L) {
        TreeKeyRole = other.TreeKeyRole;
      }
      if (other.FilePlanType.Length != 0) {
        FilePlanType = other.FilePlanType;
      }
      addOns_.Add(other.addOns_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            McEnterpriseId = input.ReadInt32();
            break;
          }
          case 18: {
            McEnterpriseName = input.ReadString();
            break;
          }
          case 24: {
            MspNodeId = input.ReadInt64();
            break;
          }
          case 32: {
            NumberOfSeats = input.ReadInt32();
            break;
          }
          case 40: {
            NumberOfUsers = input.ReadInt32();
            break;
          }
          case 50: {
            ProductId = input.ReadString();
            break;
          }
          case 56: {
            IsExpired = input.ReadBool();
            break;
          }
          case 66: {
            TreeKey = input.ReadString();
            break;
          }
          case 72: {
            TreeKeyRole = input.ReadInt64();
            break;
          }
          case 82: {
            FilePlanType = input.ReadString();
            break;
          }
          case 90: {
            addOns_.AddEntriesFrom(input, _repeated_addOns_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MSPPool : pb::IMessage<MSPPool> {
    private static readonly pb::MessageParser<MSPPool> _parser = new pb::MessageParser<MSPPool>(() => new MSPPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MSPPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSPPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSPPool(MSPPool other) : this() {
      productId_ = other.productId_;
      seats_ = other.seats_;
      availableSeats_ = other.availableSeats_;
      stash_ = other.stash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSPPool Clone() {
      return new MSPPool(this);
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 1;
    private string productId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seats" field.</summary>
    public const int SeatsFieldNumber = 2;
    private int seats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seats {
      get { return seats_; }
      set {
        seats_ = value;
      }
    }

    /// <summary>Field number for the "availableSeats" field.</summary>
    public const int AvailableSeatsFieldNumber = 3;
    private int availableSeats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvailableSeats {
      get { return availableSeats_; }
      set {
        availableSeats_ = value;
      }
    }

    /// <summary>Field number for the "stash" field.</summary>
    public const int StashFieldNumber = 4;
    private int stash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stash {
      get { return stash_; }
      set {
        stash_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MSPPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MSPPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      if (Seats != other.Seats) return false;
      if (AvailableSeats != other.AvailableSeats) return false;
      if (Stash != other.Stash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (Seats != 0) hash ^= Seats.GetHashCode();
      if (AvailableSeats != 0) hash ^= AvailableSeats.GetHashCode();
      if (Stash != 0) hash ^= Stash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
      if (Seats != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Seats);
      }
      if (AvailableSeats != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AvailableSeats);
      }
      if (Stash != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (Seats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seats);
      }
      if (AvailableSeats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableSeats);
      }
      if (Stash != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MSPPool other) {
      if (other == null) {
        return;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.Seats != 0) {
        Seats = other.Seats;
      }
      if (other.AvailableSeats != 0) {
        AvailableSeats = other.AvailableSeats;
      }
      if (other.Stash != 0) {
        Stash = other.Stash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
          case 16: {
            Seats = input.ReadInt32();
            break;
          }
          case 24: {
            AvailableSeats = input.ReadInt32();
            break;
          }
          case 32: {
            Stash = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MSPContact : pb::IMessage<MSPContact> {
    private static readonly pb::MessageParser<MSPContact> _parser = new pb::MessageParser<MSPContact>(() => new MSPContact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MSPContact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSPContact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSPContact(MSPContact other) : this() {
      enterpriseId_ = other.enterpriseId_;
      enterpriseName_ = other.enterpriseName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSPContact Clone() {
      return new MSPContact(this);
    }

    /// <summary>Field number for the "enterpriseId" field.</summary>
    public const int EnterpriseIdFieldNumber = 1;
    private int enterpriseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnterpriseId {
      get { return enterpriseId_; }
      set {
        enterpriseId_ = value;
      }
    }

    /// <summary>Field number for the "enterpriseName" field.</summary>
    public const int EnterpriseNameFieldNumber = 2;
    private string enterpriseName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnterpriseName {
      get { return enterpriseName_; }
      set {
        enterpriseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MSPContact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MSPContact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseId != other.EnterpriseId) return false;
      if (EnterpriseName != other.EnterpriseName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseId != 0) hash ^= EnterpriseId.GetHashCode();
      if (EnterpriseName.Length != 0) hash ^= EnterpriseName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EnterpriseId);
      }
      if (EnterpriseName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EnterpriseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnterpriseId);
      }
      if (EnterpriseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnterpriseName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MSPContact other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseId != 0) {
        EnterpriseId = other.EnterpriseId;
      }
      if (other.EnterpriseName.Length != 0) {
        EnterpriseName = other.EnterpriseName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseId = input.ReadInt32();
            break;
          }
          case 18: {
            EnterpriseName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LicenseAddOn : pb::IMessage<LicenseAddOn> {
    private static readonly pb::MessageParser<LicenseAddOn> _parser = new pb::MessageParser<LicenseAddOn>(() => new LicenseAddOn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LicenseAddOn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LicenseAddOn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LicenseAddOn(LicenseAddOn other) : this() {
      name_ = other.name_;
      enabled_ = other.enabled_;
      isTrial_ = other.isTrial_;
      expiration_ = other.expiration_;
      created_ = other.created_;
      seats_ = other.seats_;
      activationTime_ = other.activationTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LicenseAddOn Clone() {
      return new LicenseAddOn(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "isTrial" field.</summary>
    public const int IsTrialFieldNumber = 3;
    private bool isTrial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTrial {
      get { return isTrial_; }
      set {
        isTrial_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 4;
    private long expiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 5;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "seats" field.</summary>
    public const int SeatsFieldNumber = 6;
    private int seats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seats {
      get { return seats_; }
      set {
        seats_ = value;
      }
    }

    /// <summary>Field number for the "activationTime" field.</summary>
    public const int ActivationTimeFieldNumber = 7;
    private long activationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActivationTime {
      get { return activationTime_; }
      set {
        activationTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LicenseAddOn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LicenseAddOn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Enabled != other.Enabled) return false;
      if (IsTrial != other.IsTrial) return false;
      if (Expiration != other.Expiration) return false;
      if (Created != other.Created) return false;
      if (Seats != other.Seats) return false;
      if (ActivationTime != other.ActivationTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (IsTrial != false) hash ^= IsTrial.GetHashCode();
      if (Expiration != 0L) hash ^= Expiration.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (Seats != 0) hash ^= Seats.GetHashCode();
      if (ActivationTime != 0L) hash ^= ActivationTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (IsTrial != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTrial);
      }
      if (Expiration != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Expiration);
      }
      if (Created != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Created);
      }
      if (Seats != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Seats);
      }
      if (ActivationTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ActivationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (IsTrial != false) {
        size += 1 + 1;
      }
      if (Expiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
      }
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (Seats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seats);
      }
      if (ActivationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActivationTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LicenseAddOn other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.IsTrial != false) {
        IsTrial = other.IsTrial;
      }
      if (other.Expiration != 0L) {
        Expiration = other.Expiration;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.Seats != 0) {
        Seats = other.Seats;
      }
      if (other.ActivationTime != 0L) {
        ActivationTime = other.ActivationTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
          case 24: {
            IsTrial = input.ReadBool();
            break;
          }
          case 32: {
            Expiration = input.ReadInt64();
            break;
          }
          case 40: {
            Created = input.ReadInt64();
            break;
          }
          case 48: {
            Seats = input.ReadInt32();
            break;
          }
          case 56: {
            ActivationTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class License : pb::IMessage<License> {
    private static readonly pb::MessageParser<License> _parser = new pb::MessageParser<License>(() => new License());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<License> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License(License other) : this() {
      paid_ = other.paid_;
      numberOfSeats_ = other.numberOfSeats_;
      expiration_ = other.expiration_;
      licenseKeyId_ = other.licenseKeyId_;
      productTypeId_ = other.productTypeId_;
      name_ = other.name_;
      enterpriseLicenseId_ = other.enterpriseLicenseId_;
      seatsAllocated_ = other.seatsAllocated_;
      seatsPending_ = other.seatsPending_;
      tier_ = other.tier_;
      filePlanTypeId_ = other.filePlanTypeId_;
      maxBytes_ = other.maxBytes_;
      storageExpiration_ = other.storageExpiration_;
      licenseStatus_ = other.licenseStatus_;
      mspPool_ = other.mspPool_.Clone();
      managedBy_ = other.managedBy_ != null ? other.managedBy_.Clone() : null;
      addOns_ = other.addOns_.Clone();
      nextBillingDate_ = other.nextBillingDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License Clone() {
      return new License(this);
    }

    /// <summary>Field number for the "paid" field.</summary>
    public const int PaidFieldNumber = 1;
    private bool paid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Paid {
      get { return paid_; }
      set {
        paid_ = value;
      }
    }

    /// <summary>Field number for the "numberOfSeats" field.</summary>
    public const int NumberOfSeatsFieldNumber = 2;
    private int numberOfSeats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfSeats {
      get { return numberOfSeats_; }
      set {
        numberOfSeats_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 3;
    private long expiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "licenseKeyId" field.</summary>
    public const int LicenseKeyIdFieldNumber = 4;
    private int licenseKeyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LicenseKeyId {
      get { return licenseKeyId_; }
      set {
        licenseKeyId_ = value;
      }
    }

    /// <summary>Field number for the "productTypeId" field.</summary>
    public const int ProductTypeIdFieldNumber = 5;
    private int productTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProductTypeId {
      get { return productTypeId_; }
      set {
        productTypeId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterpriseLicenseId" field.</summary>
    public const int EnterpriseLicenseIdFieldNumber = 7;
    private long enterpriseLicenseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseLicenseId {
      get { return enterpriseLicenseId_; }
      set {
        enterpriseLicenseId_ = value;
      }
    }

    /// <summary>Field number for the "seatsAllocated" field.</summary>
    public const int SeatsAllocatedFieldNumber = 8;
    private int seatsAllocated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatsAllocated {
      get { return seatsAllocated_; }
      set {
        seatsAllocated_ = value;
      }
    }

    /// <summary>Field number for the "seatsPending" field.</summary>
    public const int SeatsPendingFieldNumber = 9;
    private int seatsPending_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatsPending {
      get { return seatsPending_; }
      set {
        seatsPending_ = value;
      }
    }

    /// <summary>Field number for the "tier" field.</summary>
    public const int TierFieldNumber = 10;
    private int tier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tier {
      get { return tier_; }
      set {
        tier_ = value;
      }
    }

    /// <summary>Field number for the "filePlanTypeId" field.</summary>
    public const int FilePlanTypeIdFieldNumber = 11;
    private int filePlanTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FilePlanTypeId {
      get { return filePlanTypeId_; }
      set {
        filePlanTypeId_ = value;
      }
    }

    /// <summary>Field number for the "maxBytes" field.</summary>
    public const int MaxBytesFieldNumber = 12;
    private long maxBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxBytes {
      get { return maxBytes_; }
      set {
        maxBytes_ = value;
      }
    }

    /// <summary>Field number for the "storageExpiration" field.</summary>
    public const int StorageExpirationFieldNumber = 13;
    private long storageExpiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StorageExpiration {
      get { return storageExpiration_; }
      set {
        storageExpiration_ = value;
      }
    }

    /// <summary>Field number for the "licenseStatus" field.</summary>
    public const int LicenseStatusFieldNumber = 14;
    private string licenseStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LicenseStatus {
      get { return licenseStatus_; }
      set {
        licenseStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mspPool" field.</summary>
    public const int MspPoolFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Enterprise.MSPPool> _repeated_mspPool_codec
        = pb::FieldCodec.ForMessage(122, global::Enterprise.MSPPool.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.MSPPool> mspPool_ = new pbc::RepeatedField<global::Enterprise.MSPPool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.MSPPool> MspPool {
      get { return mspPool_; }
    }

    /// <summary>Field number for the "managedBy" field.</summary>
    public const int ManagedByFieldNumber = 16;
    private global::Enterprise.MSPContact managedBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.MSPContact ManagedBy {
      get { return managedBy_; }
      set {
        managedBy_ = value;
      }
    }

    /// <summary>Field number for the "addOns" field.</summary>
    public const int AddOnsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Enterprise.LicenseAddOn> _repeated_addOns_codec
        = pb::FieldCodec.ForMessage(138, global::Enterprise.LicenseAddOn.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.LicenseAddOn> addOns_ = new pbc::RepeatedField<global::Enterprise.LicenseAddOn>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.LicenseAddOn> AddOns {
      get { return addOns_; }
    }

    /// <summary>Field number for the "nextBillingDate" field.</summary>
    public const int NextBillingDateFieldNumber = 18;
    private long nextBillingDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextBillingDate {
      get { return nextBillingDate_; }
      set {
        nextBillingDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as License);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(License other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Paid != other.Paid) return false;
      if (NumberOfSeats != other.NumberOfSeats) return false;
      if (Expiration != other.Expiration) return false;
      if (LicenseKeyId != other.LicenseKeyId) return false;
      if (ProductTypeId != other.ProductTypeId) return false;
      if (Name != other.Name) return false;
      if (EnterpriseLicenseId != other.EnterpriseLicenseId) return false;
      if (SeatsAllocated != other.SeatsAllocated) return false;
      if (SeatsPending != other.SeatsPending) return false;
      if (Tier != other.Tier) return false;
      if (FilePlanTypeId != other.FilePlanTypeId) return false;
      if (MaxBytes != other.MaxBytes) return false;
      if (StorageExpiration != other.StorageExpiration) return false;
      if (LicenseStatus != other.LicenseStatus) return false;
      if(!mspPool_.Equals(other.mspPool_)) return false;
      if (!object.Equals(ManagedBy, other.ManagedBy)) return false;
      if(!addOns_.Equals(other.addOns_)) return false;
      if (NextBillingDate != other.NextBillingDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Paid != false) hash ^= Paid.GetHashCode();
      if (NumberOfSeats != 0) hash ^= NumberOfSeats.GetHashCode();
      if (Expiration != 0L) hash ^= Expiration.GetHashCode();
      if (LicenseKeyId != 0) hash ^= LicenseKeyId.GetHashCode();
      if (ProductTypeId != 0) hash ^= ProductTypeId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (EnterpriseLicenseId != 0L) hash ^= EnterpriseLicenseId.GetHashCode();
      if (SeatsAllocated != 0) hash ^= SeatsAllocated.GetHashCode();
      if (SeatsPending != 0) hash ^= SeatsPending.GetHashCode();
      if (Tier != 0) hash ^= Tier.GetHashCode();
      if (FilePlanTypeId != 0) hash ^= FilePlanTypeId.GetHashCode();
      if (MaxBytes != 0L) hash ^= MaxBytes.GetHashCode();
      if (StorageExpiration != 0L) hash ^= StorageExpiration.GetHashCode();
      if (LicenseStatus.Length != 0) hash ^= LicenseStatus.GetHashCode();
      hash ^= mspPool_.GetHashCode();
      if (managedBy_ != null) hash ^= ManagedBy.GetHashCode();
      hash ^= addOns_.GetHashCode();
      if (NextBillingDate != 0L) hash ^= NextBillingDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Paid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Paid);
      }
      if (NumberOfSeats != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumberOfSeats);
      }
      if (Expiration != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Expiration);
      }
      if (LicenseKeyId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LicenseKeyId);
      }
      if (ProductTypeId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ProductTypeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (EnterpriseLicenseId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(EnterpriseLicenseId);
      }
      if (SeatsAllocated != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SeatsAllocated);
      }
      if (SeatsPending != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SeatsPending);
      }
      if (Tier != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Tier);
      }
      if (FilePlanTypeId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FilePlanTypeId);
      }
      if (MaxBytes != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(MaxBytes);
      }
      if (StorageExpiration != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(StorageExpiration);
      }
      if (LicenseStatus.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(LicenseStatus);
      }
      mspPool_.WriteTo(output, _repeated_mspPool_codec);
      if (managedBy_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ManagedBy);
      }
      addOns_.WriteTo(output, _repeated_addOns_codec);
      if (NextBillingDate != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(NextBillingDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Paid != false) {
        size += 1 + 1;
      }
      if (NumberOfSeats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfSeats);
      }
      if (Expiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
      }
      if (LicenseKeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LicenseKeyId);
      }
      if (ProductTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProductTypeId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (EnterpriseLicenseId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseLicenseId);
      }
      if (SeatsAllocated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatsAllocated);
      }
      if (SeatsPending != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatsPending);
      }
      if (Tier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tier);
      }
      if (FilePlanTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FilePlanTypeId);
      }
      if (MaxBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxBytes);
      }
      if (StorageExpiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StorageExpiration);
      }
      if (LicenseStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LicenseStatus);
      }
      size += mspPool_.CalculateSize(_repeated_mspPool_codec);
      if (managedBy_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ManagedBy);
      }
      size += addOns_.CalculateSize(_repeated_addOns_codec);
      if (NextBillingDate != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NextBillingDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(License other) {
      if (other == null) {
        return;
      }
      if (other.Paid != false) {
        Paid = other.Paid;
      }
      if (other.NumberOfSeats != 0) {
        NumberOfSeats = other.NumberOfSeats;
      }
      if (other.Expiration != 0L) {
        Expiration = other.Expiration;
      }
      if (other.LicenseKeyId != 0) {
        LicenseKeyId = other.LicenseKeyId;
      }
      if (other.ProductTypeId != 0) {
        ProductTypeId = other.ProductTypeId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.EnterpriseLicenseId != 0L) {
        EnterpriseLicenseId = other.EnterpriseLicenseId;
      }
      if (other.SeatsAllocated != 0) {
        SeatsAllocated = other.SeatsAllocated;
      }
      if (other.SeatsPending != 0) {
        SeatsPending = other.SeatsPending;
      }
      if (other.Tier != 0) {
        Tier = other.Tier;
      }
      if (other.FilePlanTypeId != 0) {
        FilePlanTypeId = other.FilePlanTypeId;
      }
      if (other.MaxBytes != 0L) {
        MaxBytes = other.MaxBytes;
      }
      if (other.StorageExpiration != 0L) {
        StorageExpiration = other.StorageExpiration;
      }
      if (other.LicenseStatus.Length != 0) {
        LicenseStatus = other.LicenseStatus;
      }
      mspPool_.Add(other.mspPool_);
      if (other.managedBy_ != null) {
        if (managedBy_ == null) {
          ManagedBy = new global::Enterprise.MSPContact();
        }
        ManagedBy.MergeFrom(other.ManagedBy);
      }
      addOns_.Add(other.addOns_);
      if (other.NextBillingDate != 0L) {
        NextBillingDate = other.NextBillingDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Paid = input.ReadBool();
            break;
          }
          case 16: {
            NumberOfSeats = input.ReadInt32();
            break;
          }
          case 24: {
            Expiration = input.ReadInt64();
            break;
          }
          case 32: {
            LicenseKeyId = input.ReadInt32();
            break;
          }
          case 40: {
            ProductTypeId = input.ReadInt32();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 56: {
            EnterpriseLicenseId = input.ReadInt64();
            break;
          }
          case 64: {
            SeatsAllocated = input.ReadInt32();
            break;
          }
          case 72: {
            SeatsPending = input.ReadInt32();
            break;
          }
          case 80: {
            Tier = input.ReadInt32();
            break;
          }
          case 88: {
            FilePlanTypeId = input.ReadInt32();
            break;
          }
          case 96: {
            MaxBytes = input.ReadInt64();
            break;
          }
          case 104: {
            StorageExpiration = input.ReadInt64();
            break;
          }
          case 114: {
            LicenseStatus = input.ReadString();
            break;
          }
          case 122: {
            mspPool_.AddEntriesFrom(input, _repeated_mspPool_codec);
            break;
          }
          case 130: {
            if (managedBy_ == null) {
              ManagedBy = new global::Enterprise.MSPContact();
            }
            input.ReadMessage(ManagedBy);
            break;
          }
          case 138: {
            addOns_.AddEntriesFrom(input, _repeated_addOns_codec);
            break;
          }
          case 144: {
            NextBillingDate = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Bridge : pb::IMessage<Bridge> {
    private static readonly pb::MessageParser<Bridge> _parser = new pb::MessageParser<Bridge>(() => new Bridge());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bridge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bridge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bridge(Bridge other) : this() {
      bridgeId_ = other.bridgeId_;
      nodeId_ = other.nodeId_;
      wanIpEnforcement_ = other.wanIpEnforcement_;
      lanIpEnforcement_ = other.lanIpEnforcement_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bridge Clone() {
      return new Bridge(this);
    }

    /// <summary>Field number for the "bridgeId" field.</summary>
    public const int BridgeIdFieldNumber = 1;
    private long bridgeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BridgeId {
      get { return bridgeId_; }
      set {
        bridgeId_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "wanIpEnforcement" field.</summary>
    public const int WanIpEnforcementFieldNumber = 3;
    private string wanIpEnforcement_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WanIpEnforcement {
      get { return wanIpEnforcement_; }
      set {
        wanIpEnforcement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lanIpEnforcement" field.</summary>
    public const int LanIpEnforcementFieldNumber = 4;
    private string lanIpEnforcement_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanIpEnforcement {
      get { return lanIpEnforcement_; }
      set {
        lanIpEnforcement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bridge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bridge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BridgeId != other.BridgeId) return false;
      if (NodeId != other.NodeId) return false;
      if (WanIpEnforcement != other.WanIpEnforcement) return false;
      if (LanIpEnforcement != other.LanIpEnforcement) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BridgeId != 0L) hash ^= BridgeId.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (WanIpEnforcement.Length != 0) hash ^= WanIpEnforcement.GetHashCode();
      if (LanIpEnforcement.Length != 0) hash ^= LanIpEnforcement.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BridgeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BridgeId);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NodeId);
      }
      if (WanIpEnforcement.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WanIpEnforcement);
      }
      if (LanIpEnforcement.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LanIpEnforcement);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BridgeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BridgeId);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (WanIpEnforcement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WanIpEnforcement);
      }
      if (LanIpEnforcement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanIpEnforcement);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bridge other) {
      if (other == null) {
        return;
      }
      if (other.BridgeId != 0L) {
        BridgeId = other.BridgeId;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.WanIpEnforcement.Length != 0) {
        WanIpEnforcement = other.WanIpEnforcement;
      }
      if (other.LanIpEnforcement.Length != 0) {
        LanIpEnforcement = other.LanIpEnforcement;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BridgeId = input.ReadInt64();
            break;
          }
          case 16: {
            NodeId = input.ReadInt64();
            break;
          }
          case 26: {
            WanIpEnforcement = input.ReadString();
            break;
          }
          case 34: {
            LanIpEnforcement = input.ReadString();
            break;
          }
          case 42: {
            Status = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scim : pb::IMessage<Scim> {
    private static readonly pb::MessageParser<Scim> _parser = new pb::MessageParser<Scim>(() => new Scim());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scim> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scim() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scim(Scim other) : this() {
      scimId_ = other.scimId_;
      nodeId_ = other.nodeId_;
      status_ = other.status_;
      lastSynced_ = other.lastSynced_;
      rolePrefix_ = other.rolePrefix_;
      uniqueGroups_ = other.uniqueGroups_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scim Clone() {
      return new Scim(this);
    }

    /// <summary>Field number for the "scimId" field.</summary>
    public const int ScimIdFieldNumber = 1;
    private long scimId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScimId {
      get { return scimId_; }
      set {
        scimId_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastSynced" field.</summary>
    public const int LastSyncedFieldNumber = 4;
    private long lastSynced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSynced {
      get { return lastSynced_; }
      set {
        lastSynced_ = value;
      }
    }

    /// <summary>Field number for the "rolePrefix" field.</summary>
    public const int RolePrefixFieldNumber = 5;
    private string rolePrefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RolePrefix {
      get { return rolePrefix_; }
      set {
        rolePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uniqueGroups" field.</summary>
    public const int UniqueGroupsFieldNumber = 6;
    private bool uniqueGroups_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UniqueGroups {
      get { return uniqueGroups_; }
      set {
        uniqueGroups_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scim);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scim other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScimId != other.ScimId) return false;
      if (NodeId != other.NodeId) return false;
      if (Status != other.Status) return false;
      if (LastSynced != other.LastSynced) return false;
      if (RolePrefix != other.RolePrefix) return false;
      if (UniqueGroups != other.UniqueGroups) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScimId != 0L) hash ^= ScimId.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (LastSynced != 0L) hash ^= LastSynced.GetHashCode();
      if (RolePrefix.Length != 0) hash ^= RolePrefix.GetHashCode();
      if (UniqueGroups != false) hash ^= UniqueGroups.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScimId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ScimId);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NodeId);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Status);
      }
      if (LastSynced != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LastSynced);
      }
      if (RolePrefix.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RolePrefix);
      }
      if (UniqueGroups != false) {
        output.WriteRawTag(48);
        output.WriteBool(UniqueGroups);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScimId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScimId);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (LastSynced != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastSynced);
      }
      if (RolePrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RolePrefix);
      }
      if (UniqueGroups != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scim other) {
      if (other == null) {
        return;
      }
      if (other.ScimId != 0L) {
        ScimId = other.ScimId;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.LastSynced != 0L) {
        LastSynced = other.LastSynced;
      }
      if (other.RolePrefix.Length != 0) {
        RolePrefix = other.RolePrefix;
      }
      if (other.UniqueGroups != false) {
        UniqueGroups = other.UniqueGroups;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ScimId = input.ReadInt64();
            break;
          }
          case 16: {
            NodeId = input.ReadInt64();
            break;
          }
          case 26: {
            Status = input.ReadString();
            break;
          }
          case 32: {
            LastSynced = input.ReadInt64();
            break;
          }
          case 42: {
            RolePrefix = input.ReadString();
            break;
          }
          case 48: {
            UniqueGroups = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmailProvision : pb::IMessage<EmailProvision> {
    private static readonly pb::MessageParser<EmailProvision> _parser = new pb::MessageParser<EmailProvision>(() => new EmailProvision());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmailProvision> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmailProvision() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmailProvision(EmailProvision other) : this() {
      id_ = other.id_;
      nodeId_ = other.nodeId_;
      domain_ = other.domain_;
      method_ = other.method_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmailProvision Clone() {
      return new EmailProvision(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 3;
    private string domain_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 4;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmailProvision);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmailProvision other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NodeId != other.NodeId) return false;
      if (Domain != other.Domain) return false;
      if (Method != other.Method) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NodeId);
      }
      if (Domain.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Domain);
      }
      if (Method.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Method);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmailProvision other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            NodeId = input.ReadInt64();
            break;
          }
          case 26: {
            Domain = input.ReadString();
            break;
          }
          case 34: {
            Method = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueuedTeam : pb::IMessage<QueuedTeam> {
    private static readonly pb::MessageParser<QueuedTeam> _parser = new pb::MessageParser<QueuedTeam>(() => new QueuedTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueuedTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueuedTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueuedTeam(QueuedTeam other) : this() {
      teamUid_ = other.teamUid_;
      name_ = other.name_;
      nodeId_ = other.nodeId_;
      encryptedData_ = other.encryptedData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueuedTeam Clone() {
      return new QueuedTeam(this);
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 1;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 3;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 4;
    private string encryptedData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueuedTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueuedTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamUid != other.TeamUid) return false;
      if (Name != other.Name) return false;
      if (NodeId != other.NodeId) return false;
      if (EncryptedData != other.EncryptedData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NodeId);
      }
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EncryptedData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueuedTeam other) {
      if (other == null) {
        return;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            NodeId = input.ReadInt64();
            break;
          }
          case 34: {
            EncryptedData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueuedTeamUser : pb::IMessage<QueuedTeamUser> {
    private static readonly pb::MessageParser<QueuedTeamUser> _parser = new pb::MessageParser<QueuedTeamUser>(() => new QueuedTeamUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueuedTeamUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueuedTeamUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueuedTeamUser(QueuedTeamUser other) : this() {
      teamUid_ = other.teamUid_;
      users_ = other.users_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueuedTeamUser Clone() {
      return new QueuedTeamUser(this);
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 1;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_users_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> users_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueuedTeamUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueuedTeamUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamUid != other.TeamUid) return false;
      if(!users_.Equals(other.users_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      hash ^= users_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueuedTeamUser other) {
      if (other == null) {
        return;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      users_.Add(other.users_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 18:
          case 16: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SsoService : pb::IMessage<SsoService> {
    private static readonly pb::MessageParser<SsoService> _parser = new pb::MessageParser<SsoService>(() => new SsoService());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SsoService> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoService() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoService(SsoService other) : this() {
      ssoServiceProviderId_ = other.ssoServiceProviderId_;
      nodeId_ = other.nodeId_;
      name_ = other.name_;
      spUrl_ = other.spUrl_;
      inviteNewUsers_ = other.inviteNewUsers_;
      active_ = other.active_;
      isCloud_ = other.isCloud_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoService Clone() {
      return new SsoService(this);
    }

    /// <summary>Field number for the "ssoServiceProviderId" field.</summary>
    public const int SsoServiceProviderIdFieldNumber = 1;
    private long ssoServiceProviderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SsoServiceProviderId {
      get { return ssoServiceProviderId_; }
      set {
        ssoServiceProviderId_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sp_url" field.</summary>
    public const int SpUrlFieldNumber = 4;
    private string spUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpUrl {
      get { return spUrl_; }
      set {
        spUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inviteNewUsers" field.</summary>
    public const int InviteNewUsersFieldNumber = 5;
    private bool inviteNewUsers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InviteNewUsers {
      get { return inviteNewUsers_; }
      set {
        inviteNewUsers_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 6;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "isCloud" field.</summary>
    public const int IsCloudFieldNumber = 7;
    private bool isCloud_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCloud {
      get { return isCloud_; }
      set {
        isCloud_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SsoService);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SsoService other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SsoServiceProviderId != other.SsoServiceProviderId) return false;
      if (NodeId != other.NodeId) return false;
      if (Name != other.Name) return false;
      if (SpUrl != other.SpUrl) return false;
      if (InviteNewUsers != other.InviteNewUsers) return false;
      if (Active != other.Active) return false;
      if (IsCloud != other.IsCloud) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SsoServiceProviderId != 0L) hash ^= SsoServiceProviderId.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SpUrl.Length != 0) hash ^= SpUrl.GetHashCode();
      if (InviteNewUsers != false) hash ^= InviteNewUsers.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (IsCloud != false) hash ^= IsCloud.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SsoServiceProviderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SsoServiceProviderId);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NodeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (SpUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SpUrl);
      }
      if (InviteNewUsers != false) {
        output.WriteRawTag(40);
        output.WriteBool(InviteNewUsers);
      }
      if (Active != false) {
        output.WriteRawTag(48);
        output.WriteBool(Active);
      }
      if (IsCloud != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsCloud);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SsoServiceProviderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SsoServiceProviderId);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SpUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpUrl);
      }
      if (InviteNewUsers != false) {
        size += 1 + 1;
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (IsCloud != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SsoService other) {
      if (other == null) {
        return;
      }
      if (other.SsoServiceProviderId != 0L) {
        SsoServiceProviderId = other.SsoServiceProviderId;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SpUrl.Length != 0) {
        SpUrl = other.SpUrl;
      }
      if (other.InviteNewUsers != false) {
        InviteNewUsers = other.InviteNewUsers;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.IsCloud != false) {
        IsCloud = other.IsCloud;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SsoServiceProviderId = input.ReadInt64();
            break;
          }
          case 16: {
            NodeId = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            SpUrl = input.ReadString();
            break;
          }
          case 40: {
            InviteNewUsers = input.ReadBool();
            break;
          }
          case 48: {
            Active = input.ReadBool();
            break;
          }
          case 56: {
            IsCloud = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportFilterUser : pb::IMessage<ReportFilterUser> {
    private static readonly pb::MessageParser<ReportFilterUser> _parser = new pb::MessageParser<ReportFilterUser>(() => new ReportFilterUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportFilterUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportFilterUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportFilterUser(ReportFilterUser other) : this() {
      userId_ = other.userId_;
      email_ = other.email_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportFilterUser Clone() {
      return new ReportFilterUser(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportFilterUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportFilterUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Email != other.Email) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportFilterUser other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceRequestForAdminApproval : pb::IMessage<DeviceRequestForAdminApproval> {
    private static readonly pb::MessageParser<DeviceRequestForAdminApproval> _parser = new pb::MessageParser<DeviceRequestForAdminApproval>(() => new DeviceRequestForAdminApproval());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceRequestForAdminApproval> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRequestForAdminApproval() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRequestForAdminApproval(DeviceRequestForAdminApproval other) : this() {
      deviceId_ = other.deviceId_;
      enterpriseUserId_ = other.enterpriseUserId_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      devicePublicKey_ = other.devicePublicKey_;
      deviceName_ = other.deviceName_;
      clientVersion_ = other.clientVersion_;
      deviceType_ = other.deviceType_;
      date_ = other.date_;
      ipAddress_ = other.ipAddress_;
      location_ = other.location_;
      email_ = other.email_;
      accountUid_ = other.accountUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRequestForAdminApproval Clone() {
      return new DeviceRequestForAdminApproval(this);
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private long deviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 2;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 3;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "devicePublicKey" field.</summary>
    public const int DevicePublicKeyFieldNumber = 4;
    private pb::ByteString devicePublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DevicePublicKey {
      get { return devicePublicKey_; }
      set {
        devicePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceName" field.</summary>
    public const int DeviceNameFieldNumber = 5;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 6;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceType" field.</summary>
    public const int DeviceTypeFieldNumber = 7;
    private string deviceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 8;
    private long date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 9;
    private string ipAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 10;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 11;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountUid" field.</summary>
    public const int AccountUidFieldNumber = 12;
    private pb::ByteString accountUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AccountUid {
      get { return accountUid_; }
      set {
        accountUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceRequestForAdminApproval);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceRequestForAdminApproval other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (DevicePublicKey != other.DevicePublicKey) return false;
      if (DeviceName != other.DeviceName) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (DeviceType != other.DeviceType) return false;
      if (Date != other.Date) return false;
      if (IpAddress != other.IpAddress) return false;
      if (Location != other.Location) return false;
      if (Email != other.Email) return false;
      if (AccountUid != other.AccountUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId != 0L) hash ^= DeviceId.GetHashCode();
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (DevicePublicKey.Length != 0) hash ^= DevicePublicKey.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
      if (Date != 0L) hash ^= Date.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (AccountUid.Length != 0) hash ^= AccountUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DeviceId);
      }
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EnterpriseUserId);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (DevicePublicKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(DevicePublicKey);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DeviceName);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ClientVersion);
      }
      if (DeviceType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DeviceType);
      }
      if (Date != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Date);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IpAddress);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Location);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Email);
      }
      if (AccountUid.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(AccountUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeviceId);
      }
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (DevicePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DevicePublicKey);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (DeviceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
      }
      if (Date != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Date);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (AccountUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AccountUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceRequestForAdminApproval other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId != 0L) {
        DeviceId = other.DeviceId;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.DevicePublicKey.Length != 0) {
        DevicePublicKey = other.DevicePublicKey;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.DeviceType.Length != 0) {
        DeviceType = other.DeviceType;
      }
      if (other.Date != 0L) {
        Date = other.Date;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.AccountUid.Length != 0) {
        AccountUid = other.AccountUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeviceId = input.ReadInt64();
            break;
          }
          case 16: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 26: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 34: {
            DevicePublicKey = input.ReadBytes();
            break;
          }
          case 42: {
            DeviceName = input.ReadString();
            break;
          }
          case 50: {
            ClientVersion = input.ReadString();
            break;
          }
          case 58: {
            DeviceType = input.ReadString();
            break;
          }
          case 64: {
            Date = input.ReadInt64();
            break;
          }
          case 74: {
            IpAddress = input.ReadString();
            break;
          }
          case 82: {
            Location = input.ReadString();
            break;
          }
          case 90: {
            Email = input.ReadString();
            break;
          }
          case 98: {
            AccountUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseData : pb::IMessage<EnterpriseData> {
    private static readonly pb::MessageParser<EnterpriseData> _parser = new pb::MessageParser<EnterpriseData>(() => new EnterpriseData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseData(EnterpriseData other) : this() {
      entity_ = other.entity_;
      delete_ = other.delete_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseData Clone() {
      return new EnterpriseData(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private global::Enterprise.EnterpriseDataEntity entity_ = global::Enterprise.EnterpriseDataEntity.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EnterpriseDataEntity Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 2;
    private bool delete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Delete {
      get { return delete_; }
      set {
        delete_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_data_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> data_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// If delete==false then it's list of entity objects (Node, Users etc...). If delete==true then those objects have only ids but no other info.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (Delete != other.Delete) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entity != global::Enterprise.EnterpriseDataEntity.Unknown) hash ^= Entity.GetHashCode();
      if (Delete != false) hash ^= Delete.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entity != global::Enterprise.EnterpriseDataEntity.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Entity);
      }
      if (Delete != false) {
        output.WriteRawTag(16);
        output.WriteBool(Delete);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entity != global::Enterprise.EnterpriseDataEntity.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Entity);
      }
      if (Delete != false) {
        size += 1 + 1;
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseData other) {
      if (other == null) {
        return;
      }
      if (other.Entity != global::Enterprise.EnterpriseDataEntity.Unknown) {
        Entity = other.Entity;
      }
      if (other.Delete != false) {
        Delete = other.Delete;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Entity = (global::Enterprise.EnterpriseDataEntity) input.ReadEnum();
            break;
          }
          case 16: {
            Delete = input.ReadBool();
            break;
          }
          case 26: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseDataResponse : pb::IMessage<EnterpriseDataResponse> {
    private static readonly pb::MessageParser<EnterpriseDataResponse> _parser = new pb::MessageParser<EnterpriseDataResponse>(() => new EnterpriseDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseDataResponse(EnterpriseDataResponse other) : this() {
      continuationToken_ = other.continuationToken_;
      hasMore_ = other.hasMore_;
      cacheStatus_ = other.cacheStatus_;
      data_ = other.data_.Clone();
      generalData_ = other.generalData_ != null ? other.generalData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseDataResponse Clone() {
      return new EnterpriseDataResponse(this);
    }

    /// <summary>Field number for the "continuationToken" field.</summary>
    public const int ContinuationTokenFieldNumber = 1;
    private pb::ByteString continuationToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContinuationToken {
      get { return continuationToken_; }
      set {
        continuationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hasMore" field.</summary>
    public const int HasMoreFieldNumber = 2;
    private bool hasMore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMore {
      get { return hasMore_; }
      set {
        hasMore_ = value;
      }
    }

    /// <summary>Field number for the "cacheStatus" field.</summary>
    public const int CacheStatusFieldNumber = 3;
    private global::Enterprise.CacheStatus cacheStatus_ = global::Enterprise.CacheStatus.Keep;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.CacheStatus CacheStatus {
      get { return cacheStatus_; }
      set {
        cacheStatus_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Enterprise.EnterpriseData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(34, global::Enterprise.EnterpriseData.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.EnterpriseData> data_ = new pbc::RepeatedField<global::Enterprise.EnterpriseData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.EnterpriseData> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "generalData" field.</summary>
    public const int GeneralDataFieldNumber = 5;
    private global::Enterprise.GeneralDataEntity generalData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.GeneralDataEntity GeneralData {
      get { return generalData_; }
      set {
        generalData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContinuationToken != other.ContinuationToken) return false;
      if (HasMore != other.HasMore) return false;
      if (CacheStatus != other.CacheStatus) return false;
      if(!data_.Equals(other.data_)) return false;
      if (!object.Equals(GeneralData, other.GeneralData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContinuationToken.Length != 0) hash ^= ContinuationToken.GetHashCode();
      if (HasMore != false) hash ^= HasMore.GetHashCode();
      if (CacheStatus != global::Enterprise.CacheStatus.Keep) hash ^= CacheStatus.GetHashCode();
      hash ^= data_.GetHashCode();
      if (generalData_ != null) hash ^= GeneralData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContinuationToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ContinuationToken);
      }
      if (HasMore != false) {
        output.WriteRawTag(16);
        output.WriteBool(HasMore);
      }
      if (CacheStatus != global::Enterprise.CacheStatus.Keep) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CacheStatus);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (generalData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(GeneralData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContinuationToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContinuationToken);
      }
      if (HasMore != false) {
        size += 1 + 1;
      }
      if (CacheStatus != global::Enterprise.CacheStatus.Keep) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CacheStatus);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (generalData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GeneralData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.ContinuationToken.Length != 0) {
        ContinuationToken = other.ContinuationToken;
      }
      if (other.HasMore != false) {
        HasMore = other.HasMore;
      }
      if (other.CacheStatus != global::Enterprise.CacheStatus.Keep) {
        CacheStatus = other.CacheStatus;
      }
      data_.Add(other.data_);
      if (other.generalData_ != null) {
        if (generalData_ == null) {
          GeneralData = new global::Enterprise.GeneralDataEntity();
        }
        GeneralData.MergeFrom(other.GeneralData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ContinuationToken = input.ReadBytes();
            break;
          }
          case 16: {
            HasMore = input.ReadBool();
            break;
          }
          case 24: {
            CacheStatus = (global::Enterprise.CacheStatus) input.ReadEnum();
            break;
          }
          case 34: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 42: {
            if (generalData_ == null) {
              GeneralData = new global::Enterprise.GeneralDataEntity();
            }
            input.ReadMessage(GeneralData);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BackupRequest : pb::IMessage<BackupRequest> {
    private static readonly pb::MessageParser<BackupRequest> _parser = new pb::MessageParser<BackupRequest>(() => new BackupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupRequest(BackupRequest other) : this() {
      continuationToken_ = other.continuationToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupRequest Clone() {
      return new BackupRequest(this);
    }

    /// <summary>Field number for the "continuationToken" field.</summary>
    public const int ContinuationTokenFieldNumber = 1;
    private pb::ByteString continuationToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContinuationToken {
      get { return continuationToken_; }
      set {
        continuationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContinuationToken != other.ContinuationToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContinuationToken.Length != 0) hash ^= ContinuationToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContinuationToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ContinuationToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContinuationToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContinuationToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupRequest other) {
      if (other == null) {
        return;
      }
      if (other.ContinuationToken.Length != 0) {
        ContinuationToken = other.ContinuationToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ContinuationToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BackupRecord : pb::IMessage<BackupRecord> {
    private static readonly pb::MessageParser<BackupRecord> _parser = new pb::MessageParser<BackupRecord>(() => new BackupRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupRecord(BackupRecord other) : this() {
      userId_ = other.userId_;
      recordUid_ = other.recordUid_;
      key_ = other.key_;
      keyType_ = other.keyType_;
      version_ = other.version_;
      data_ = other.data_;
      extra_ = other.extra_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupRecord Clone() {
      return new BackupRecord(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 2;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyType" field.</summary>
    public const int KeyTypeFieldNumber = 4;
    private global::Enterprise.BackupKeyType keyType_ = global::Enterprise.BackupKeyType.NoKey;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.BackupKeyType KeyType {
      get { return keyType_; }
      set {
        keyType_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 6;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 7;
    private pb::ByteString extra_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Extra {
      get { return extra_; }
      set {
        extra_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (RecordUid != other.RecordUid) return false;
      if (Key != other.Key) return false;
      if (KeyType != other.KeyType) return false;
      if (Version != other.Version) return false;
      if (Data != other.Data) return false;
      if (Extra != other.Extra) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (KeyType != global::Enterprise.BackupKeyType.NoKey) hash ^= KeyType.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Extra.Length != 0) hash ^= Extra.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (RecordUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordUid);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Key);
      }
      if (KeyType != global::Enterprise.BackupKeyType.NoKey) {
        output.WriteRawTag(32);
        output.WriteEnum((int) KeyType);
      }
      if (Version != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Version);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Data);
      }
      if (Extra.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Extra);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (KeyType != global::Enterprise.BackupKeyType.NoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyType);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Extra.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Extra);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupRecord other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.KeyType != global::Enterprise.BackupKeyType.NoKey) {
        KeyType = other.KeyType;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Extra.Length != 0) {
        Extra = other.Extra;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 18: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 26: {
            Key = input.ReadBytes();
            break;
          }
          case 32: {
            KeyType = (global::Enterprise.BackupKeyType) input.ReadEnum();
            break;
          }
          case 40: {
            Version = input.ReadInt32();
            break;
          }
          case 50: {
            Data = input.ReadBytes();
            break;
          }
          case 58: {
            Extra = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BackupKey : pb::IMessage<BackupKey> {
    private static readonly pb::MessageParser<BackupKey> _parser = new pb::MessageParser<BackupKey>(() => new BackupKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupKey(BackupKey other) : this() {
      userId_ = other.userId_;
      backupKey_ = other.backupKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupKey Clone() {
      return new BackupKey(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "backupKey" field.</summary>
    public const int BackupKey_FieldNumber = 2;
    private pb::ByteString backupKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BackupKey_ {
      get { return backupKey_; }
      set {
        backupKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (BackupKey_ != other.BackupKey_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (BackupKey_.Length != 0) hash ^= BackupKey_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (BackupKey_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BackupKey_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (BackupKey_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BackupKey_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupKey other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.BackupKey_.Length != 0) {
        BackupKey_ = other.BackupKey_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 18: {
            BackupKey_ = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BackupUser : pb::IMessage<BackupUser> {
    private static readonly pb::MessageParser<BackupUser> _parser = new pb::MessageParser<BackupUser>(() => new BackupUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupUser(BackupUser other) : this() {
      userId_ = other.userId_;
      userName_ = other.userName_;
      dataKey_ = other.dataKey_;
      dataKeyType_ = other.dataKeyType_;
      privateKey_ = other.privateKey_;
      treeKey_ = other.treeKey_;
      treeKeyType_ = other.treeKeyType_;
      backupKeys_ = other.backupKeys_.Clone();
      privateECKey_ = other.privateECKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupUser Clone() {
      return new BackupUser(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataKey" field.</summary>
    public const int DataKeyFieldNumber = 3;
    private pb::ByteString dataKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataKey {
      get { return dataKey_; }
      set {
        dataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataKeyType" field.</summary>
    public const int DataKeyTypeFieldNumber = 4;
    private global::Enterprise.BackupUserDataKeyType dataKeyType_ = global::Enterprise.BackupUserDataKeyType.Own;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.BackupUserDataKeyType DataKeyType {
      get { return dataKeyType_; }
      set {
        dataKeyType_ = value;
      }
    }

    /// <summary>Field number for the "privateKey" field.</summary>
    public const int PrivateKeyFieldNumber = 5;
    private pb::ByteString privateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "treeKey" field.</summary>
    public const int TreeKeyFieldNumber = 6;
    private pb::ByteString treeKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TreeKey {
      get { return treeKey_; }
      set {
        treeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "treeKeyType" field.</summary>
    public const int TreeKeyTypeFieldNumber = 7;
    private global::Enterprise.BackupKeyType treeKeyType_ = global::Enterprise.BackupKeyType.NoKey;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.BackupKeyType TreeKeyType {
      get { return treeKeyType_; }
      set {
        treeKeyType_ = value;
      }
    }

    /// <summary>Field number for the "backupKeys" field.</summary>
    public const int BackupKeysFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Enterprise.BackupKey> _repeated_backupKeys_codec
        = pb::FieldCodec.ForMessage(66, global::Enterprise.BackupKey.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.BackupKey> backupKeys_ = new pbc::RepeatedField<global::Enterprise.BackupKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.BackupKey> BackupKeys {
      get { return backupKeys_; }
    }

    /// <summary>Field number for the "privateECKey" field.</summary>
    public const int PrivateECKeyFieldNumber = 9;
    private pb::ByteString privateECKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivateECKey {
      get { return privateECKey_; }
      set {
        privateECKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (DataKey != other.DataKey) return false;
      if (DataKeyType != other.DataKeyType) return false;
      if (PrivateKey != other.PrivateKey) return false;
      if (TreeKey != other.TreeKey) return false;
      if (TreeKeyType != other.TreeKeyType) return false;
      if(!backupKeys_.Equals(other.backupKeys_)) return false;
      if (PrivateECKey != other.PrivateECKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (DataKey.Length != 0) hash ^= DataKey.GetHashCode();
      if (DataKeyType != global::Enterprise.BackupUserDataKeyType.Own) hash ^= DataKeyType.GetHashCode();
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      if (TreeKey.Length != 0) hash ^= TreeKey.GetHashCode();
      if (TreeKeyType != global::Enterprise.BackupKeyType.NoKey) hash ^= TreeKeyType.GetHashCode();
      hash ^= backupKeys_.GetHashCode();
      if (PrivateECKey.Length != 0) hash ^= PrivateECKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (DataKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(DataKey);
      }
      if (DataKeyType != global::Enterprise.BackupUserDataKeyType.Own) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DataKeyType);
      }
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PrivateKey);
      }
      if (TreeKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(TreeKey);
      }
      if (TreeKeyType != global::Enterprise.BackupKeyType.NoKey) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TreeKeyType);
      }
      backupKeys_.WriteTo(output, _repeated_backupKeys_codec);
      if (PrivateECKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(PrivateECKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (DataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataKey);
      }
      if (DataKeyType != global::Enterprise.BackupUserDataKeyType.Own) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataKeyType);
      }
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateKey);
      }
      if (TreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TreeKey);
      }
      if (TreeKeyType != global::Enterprise.BackupKeyType.NoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TreeKeyType);
      }
      size += backupKeys_.CalculateSize(_repeated_backupKeys_codec);
      if (PrivateECKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateECKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupUser other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.DataKey.Length != 0) {
        DataKey = other.DataKey;
      }
      if (other.DataKeyType != global::Enterprise.BackupUserDataKeyType.Own) {
        DataKeyType = other.DataKeyType;
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
      if (other.TreeKey.Length != 0) {
        TreeKey = other.TreeKey;
      }
      if (other.TreeKeyType != global::Enterprise.BackupKeyType.NoKey) {
        TreeKeyType = other.TreeKeyType;
      }
      backupKeys_.Add(other.backupKeys_);
      if (other.PrivateECKey.Length != 0) {
        PrivateECKey = other.PrivateECKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            DataKey = input.ReadBytes();
            break;
          }
          case 32: {
            DataKeyType = (global::Enterprise.BackupUserDataKeyType) input.ReadEnum();
            break;
          }
          case 42: {
            PrivateKey = input.ReadBytes();
            break;
          }
          case 50: {
            TreeKey = input.ReadBytes();
            break;
          }
          case 56: {
            TreeKeyType = (global::Enterprise.BackupKeyType) input.ReadEnum();
            break;
          }
          case 66: {
            backupKeys_.AddEntriesFrom(input, _repeated_backupKeys_codec);
            break;
          }
          case 74: {
            PrivateECKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BackupResponse : pb::IMessage<BackupResponse> {
    private static readonly pb::MessageParser<BackupResponse> _parser = new pb::MessageParser<BackupResponse>(() => new BackupResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupResponse(BackupResponse other) : this() {
      enterpriseEccPrivateKey_ = other.enterpriseEccPrivateKey_;
      users_ = other.users_.Clone();
      records_ = other.records_.Clone();
      continuationToken_ = other.continuationToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupResponse Clone() {
      return new BackupResponse(this);
    }

    /// <summary>Field number for the "enterpriseEccPrivateKey" field.</summary>
    public const int EnterpriseEccPrivateKeyFieldNumber = 1;
    private pb::ByteString enterpriseEccPrivateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EnterpriseEccPrivateKey {
      get { return enterpriseEccPrivateKey_; }
      set {
        enterpriseEccPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Enterprise.BackupUser> _repeated_users_codec
        = pb::FieldCodec.ForMessage(18, global::Enterprise.BackupUser.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.BackupUser> users_ = new pbc::RepeatedField<global::Enterprise.BackupUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.BackupUser> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Enterprise.BackupRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(26, global::Enterprise.BackupRecord.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.BackupRecord> records_ = new pbc::RepeatedField<global::Enterprise.BackupRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.BackupRecord> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "continuationToken" field.</summary>
    public const int ContinuationTokenFieldNumber = 4;
    private pb::ByteString continuationToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContinuationToken {
      get { return continuationToken_; }
      set {
        continuationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseEccPrivateKey != other.EnterpriseEccPrivateKey) return false;
      if(!users_.Equals(other.users_)) return false;
      if(!records_.Equals(other.records_)) return false;
      if (ContinuationToken != other.ContinuationToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseEccPrivateKey.Length != 0) hash ^= EnterpriseEccPrivateKey.GetHashCode();
      hash ^= users_.GetHashCode();
      hash ^= records_.GetHashCode();
      if (ContinuationToken.Length != 0) hash ^= ContinuationToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseEccPrivateKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EnterpriseEccPrivateKey);
      }
      users_.WriteTo(output, _repeated_users_codec);
      records_.WriteTo(output, _repeated_records_codec);
      if (ContinuationToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ContinuationToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseEccPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EnterpriseEccPrivateKey);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      size += records_.CalculateSize(_repeated_records_codec);
      if (ContinuationToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContinuationToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupResponse other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseEccPrivateKey.Length != 0) {
        EnterpriseEccPrivateKey = other.EnterpriseEccPrivateKey;
      }
      users_.Add(other.users_);
      records_.Add(other.records_);
      if (other.ContinuationToken.Length != 0) {
        ContinuationToken = other.ContinuationToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EnterpriseEccPrivateKey = input.ReadBytes();
            break;
          }
          case 18: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 26: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 34: {
            ContinuationToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEnterpriseDataKeysRequest : pb::IMessage<GetEnterpriseDataKeysRequest> {
    private static readonly pb::MessageParser<GetEnterpriseDataKeysRequest> _parser = new pb::MessageParser<GetEnterpriseDataKeysRequest>(() => new GetEnterpriseDataKeysRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEnterpriseDataKeysRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEnterpriseDataKeysRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEnterpriseDataKeysRequest(GetEnterpriseDataKeysRequest other) : this() {
      roleId_ = other.roleId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEnterpriseDataKeysRequest Clone() {
      return new GetEnterpriseDataKeysRequest(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_roleId_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> roleId_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RoleId {
      get { return roleId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEnterpriseDataKeysRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEnterpriseDataKeysRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roleId_.Equals(other.roleId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roleId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleId_.WriteTo(output, _repeated_roleId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleId_.CalculateSize(_repeated_roleId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEnterpriseDataKeysRequest other) {
      if (other == null) {
        return;
      }
      roleId_.Add(other.roleId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEnterpriseDataKeysResponse : pb::IMessage<GetEnterpriseDataKeysResponse> {
    private static readonly pb::MessageParser<GetEnterpriseDataKeysResponse> _parser = new pb::MessageParser<GetEnterpriseDataKeysResponse>(() => new GetEnterpriseDataKeysResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEnterpriseDataKeysResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEnterpriseDataKeysResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEnterpriseDataKeysResponse(GetEnterpriseDataKeysResponse other) : this() {
      reEncryptedRoleKey_ = other.reEncryptedRoleKey_.Clone();
      roleKey_ = other.roleKey_.Clone();
      mspKey_ = other.mspKey_ != null ? other.mspKey_.Clone() : null;
      enterpriseKeys_ = other.enterpriseKeys_ != null ? other.enterpriseKeys_.Clone() : null;
      treeKey_ = other.treeKey_ != null ? other.treeKey_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEnterpriseDataKeysResponse Clone() {
      return new GetEnterpriseDataKeysResponse(this);
    }

    /// <summary>Field number for the "reEncryptedRoleKey" field.</summary>
    public const int ReEncryptedRoleKeyFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.ReEncryptedRoleKey> _repeated_reEncryptedRoleKey_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.ReEncryptedRoleKey.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ReEncryptedRoleKey> reEncryptedRoleKey_ = new pbc::RepeatedField<global::Enterprise.ReEncryptedRoleKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ReEncryptedRoleKey> ReEncryptedRoleKey {
      get { return reEncryptedRoleKey_; }
    }

    /// <summary>Field number for the "roleKey" field.</summary>
    public const int RoleKeyFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Enterprise.RoleKey> _repeated_roleKey_codec
        = pb::FieldCodec.ForMessage(18, global::Enterprise.RoleKey.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.RoleKey> roleKey_ = new pbc::RepeatedField<global::Enterprise.RoleKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.RoleKey> RoleKey {
      get { return roleKey_; }
    }

    /// <summary>Field number for the "mspKey" field.</summary>
    public const int MspKeyFieldNumber = 3;
    private global::Enterprise.MspKey mspKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.MspKey MspKey {
      get { return mspKey_; }
      set {
        mspKey_ = value;
      }
    }

    /// <summary>Field number for the "enterpriseKeys" field.</summary>
    public const int EnterpriseKeysFieldNumber = 4;
    private global::Enterprise.EnterpriseKeys enterpriseKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EnterpriseKeys EnterpriseKeys {
      get { return enterpriseKeys_; }
      set {
        enterpriseKeys_ = value;
      }
    }

    /// <summary>Field number for the "treeKey" field.</summary>
    public const int TreeKeyFieldNumber = 5;
    private global::Enterprise.TreeKey treeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.TreeKey TreeKey {
      get { return treeKey_; }
      set {
        treeKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEnterpriseDataKeysResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEnterpriseDataKeysResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reEncryptedRoleKey_.Equals(other.reEncryptedRoleKey_)) return false;
      if(!roleKey_.Equals(other.roleKey_)) return false;
      if (!object.Equals(MspKey, other.MspKey)) return false;
      if (!object.Equals(EnterpriseKeys, other.EnterpriseKeys)) return false;
      if (!object.Equals(TreeKey, other.TreeKey)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reEncryptedRoleKey_.GetHashCode();
      hash ^= roleKey_.GetHashCode();
      if (mspKey_ != null) hash ^= MspKey.GetHashCode();
      if (enterpriseKeys_ != null) hash ^= EnterpriseKeys.GetHashCode();
      if (treeKey_ != null) hash ^= TreeKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reEncryptedRoleKey_.WriteTo(output, _repeated_reEncryptedRoleKey_codec);
      roleKey_.WriteTo(output, _repeated_roleKey_codec);
      if (mspKey_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MspKey);
      }
      if (enterpriseKeys_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EnterpriseKeys);
      }
      if (treeKey_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TreeKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reEncryptedRoleKey_.CalculateSize(_repeated_reEncryptedRoleKey_codec);
      size += roleKey_.CalculateSize(_repeated_roleKey_codec);
      if (mspKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MspKey);
      }
      if (enterpriseKeys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnterpriseKeys);
      }
      if (treeKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TreeKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEnterpriseDataKeysResponse other) {
      if (other == null) {
        return;
      }
      reEncryptedRoleKey_.Add(other.reEncryptedRoleKey_);
      roleKey_.Add(other.roleKey_);
      if (other.mspKey_ != null) {
        if (mspKey_ == null) {
          MspKey = new global::Enterprise.MspKey();
        }
        MspKey.MergeFrom(other.MspKey);
      }
      if (other.enterpriseKeys_ != null) {
        if (enterpriseKeys_ == null) {
          EnterpriseKeys = new global::Enterprise.EnterpriseKeys();
        }
        EnterpriseKeys.MergeFrom(other.EnterpriseKeys);
      }
      if (other.treeKey_ != null) {
        if (treeKey_ == null) {
          TreeKey = new global::Enterprise.TreeKey();
        }
        TreeKey.MergeFrom(other.TreeKey);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            reEncryptedRoleKey_.AddEntriesFrom(input, _repeated_reEncryptedRoleKey_codec);
            break;
          }
          case 18: {
            roleKey_.AddEntriesFrom(input, _repeated_roleKey_codec);
            break;
          }
          case 26: {
            if (mspKey_ == null) {
              MspKey = new global::Enterprise.MspKey();
            }
            input.ReadMessage(MspKey);
            break;
          }
          case 34: {
            if (enterpriseKeys_ == null) {
              EnterpriseKeys = new global::Enterprise.EnterpriseKeys();
            }
            input.ReadMessage(EnterpriseKeys);
            break;
          }
          case 42: {
            if (treeKey_ == null) {
              TreeKey = new global::Enterprise.TreeKey();
            }
            input.ReadMessage(TreeKey);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleKey : pb::IMessage<RoleKey> {
    private static readonly pb::MessageParser<RoleKey> _parser = new pb::MessageParser<RoleKey>(() => new RoleKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleKey(RoleKey other) : this() {
      roleId_ = other.roleId_;
      encryptedKey_ = other.encryptedKey_;
      keyType_ = other.keyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleKey Clone() {
      return new RoleKey(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedKey" field.</summary>
    public const int EncryptedKeyFieldNumber = 2;
    private string encryptedKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedKey {
      get { return encryptedKey_; }
      set {
        encryptedKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyType" field.</summary>
    public const int KeyTypeFieldNumber = 3;
    private global::Enterprise.EncryptedKeyType keyType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EncryptedKeyType KeyType {
      get { return keyType_; }
      set {
        keyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (EncryptedKey != other.EncryptedKey) return false;
      if (KeyType != other.KeyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (EncryptedKey.Length != 0) hash ^= EncryptedKey.GetHashCode();
      if (KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= KeyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (EncryptedKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EncryptedKey);
      }
      if (KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(24);
        output.WriteEnum((int) KeyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (EncryptedKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedKey);
      }
      if (KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleKey other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.EncryptedKey.Length != 0) {
        EncryptedKey = other.EncryptedKey;
      }
      if (other.KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        KeyType = other.KeyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            EncryptedKey = input.ReadString();
            break;
          }
          case 24: {
            KeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MspKey : pb::IMessage<MspKey> {
    private static readonly pb::MessageParser<MspKey> _parser = new pb::MessageParser<MspKey>(() => new MspKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MspKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MspKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MspKey(MspKey other) : this() {
      encryptedMspTreeKey_ = other.encryptedMspTreeKey_;
      encryptedMspTreeKeyType_ = other.encryptedMspTreeKeyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MspKey Clone() {
      return new MspKey(this);
    }

    /// <summary>Field number for the "encryptedMspTreeKey" field.</summary>
    public const int EncryptedMspTreeKeyFieldNumber = 1;
    private string encryptedMspTreeKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedMspTreeKey {
      get { return encryptedMspTreeKey_; }
      set {
        encryptedMspTreeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedMspTreeKeyType" field.</summary>
    public const int EncryptedMspTreeKeyTypeFieldNumber = 2;
    private global::Enterprise.EncryptedKeyType encryptedMspTreeKeyType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EncryptedKeyType EncryptedMspTreeKeyType {
      get { return encryptedMspTreeKeyType_; }
      set {
        encryptedMspTreeKeyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MspKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MspKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedMspTreeKey != other.EncryptedMspTreeKey) return false;
      if (EncryptedMspTreeKeyType != other.EncryptedMspTreeKeyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedMspTreeKey.Length != 0) hash ^= EncryptedMspTreeKey.GetHashCode();
      if (EncryptedMspTreeKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= EncryptedMspTreeKeyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedMspTreeKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EncryptedMspTreeKey);
      }
      if (EncryptedMspTreeKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EncryptedMspTreeKeyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedMspTreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedMspTreeKey);
      }
      if (EncryptedMspTreeKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncryptedMspTreeKeyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MspKey other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedMspTreeKey.Length != 0) {
        EncryptedMspTreeKey = other.EncryptedMspTreeKey;
      }
      if (other.EncryptedMspTreeKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        EncryptedMspTreeKeyType = other.EncryptedMspTreeKeyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedMspTreeKey = input.ReadString();
            break;
          }
          case 16: {
            EncryptedMspTreeKeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseKeys : pb::IMessage<EnterpriseKeys> {
    private static readonly pb::MessageParser<EnterpriseKeys> _parser = new pb::MessageParser<EnterpriseKeys>(() => new EnterpriseKeys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseKeys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseKeys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseKeys(EnterpriseKeys other) : this() {
      rsaPublicKey_ = other.rsaPublicKey_;
      rsaEncryptedPrivateKey_ = other.rsaEncryptedPrivateKey_;
      eccPublicKey_ = other.eccPublicKey_;
      eccEncryptedPrivateKey_ = other.eccEncryptedPrivateKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseKeys Clone() {
      return new EnterpriseKeys(this);
    }

    /// <summary>Field number for the "rsaPublicKey" field.</summary>
    public const int RsaPublicKeyFieldNumber = 1;
    private pb::ByteString rsaPublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RsaPublicKey {
      get { return rsaPublicKey_; }
      set {
        rsaPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rsaEncryptedPrivateKey" field.</summary>
    public const int RsaEncryptedPrivateKeyFieldNumber = 2;
    private pb::ByteString rsaEncryptedPrivateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RsaEncryptedPrivateKey {
      get { return rsaEncryptedPrivateKey_; }
      set {
        rsaEncryptedPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eccPublicKey" field.</summary>
    public const int EccPublicKeyFieldNumber = 3;
    private pb::ByteString eccPublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EccPublicKey {
      get { return eccPublicKey_; }
      set {
        eccPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eccEncryptedPrivateKey" field.</summary>
    public const int EccEncryptedPrivateKeyFieldNumber = 4;
    private pb::ByteString eccEncryptedPrivateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EccEncryptedPrivateKey {
      get { return eccEncryptedPrivateKey_; }
      set {
        eccEncryptedPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseKeys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseKeys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RsaPublicKey != other.RsaPublicKey) return false;
      if (RsaEncryptedPrivateKey != other.RsaEncryptedPrivateKey) return false;
      if (EccPublicKey != other.EccPublicKey) return false;
      if (EccEncryptedPrivateKey != other.EccEncryptedPrivateKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RsaPublicKey.Length != 0) hash ^= RsaPublicKey.GetHashCode();
      if (RsaEncryptedPrivateKey.Length != 0) hash ^= RsaEncryptedPrivateKey.GetHashCode();
      if (EccPublicKey.Length != 0) hash ^= EccPublicKey.GetHashCode();
      if (EccEncryptedPrivateKey.Length != 0) hash ^= EccEncryptedPrivateKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RsaPublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RsaPublicKey);
      }
      if (RsaEncryptedPrivateKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RsaEncryptedPrivateKey);
      }
      if (EccPublicKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EccPublicKey);
      }
      if (EccEncryptedPrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EccEncryptedPrivateKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RsaPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RsaPublicKey);
      }
      if (RsaEncryptedPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RsaEncryptedPrivateKey);
      }
      if (EccPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EccPublicKey);
      }
      if (EccEncryptedPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EccEncryptedPrivateKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseKeys other) {
      if (other == null) {
        return;
      }
      if (other.RsaPublicKey.Length != 0) {
        RsaPublicKey = other.RsaPublicKey;
      }
      if (other.RsaEncryptedPrivateKey.Length != 0) {
        RsaEncryptedPrivateKey = other.RsaEncryptedPrivateKey;
      }
      if (other.EccPublicKey.Length != 0) {
        EccPublicKey = other.EccPublicKey;
      }
      if (other.EccEncryptedPrivateKey.Length != 0) {
        EccEncryptedPrivateKey = other.EccEncryptedPrivateKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RsaPublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            RsaEncryptedPrivateKey = input.ReadBytes();
            break;
          }
          case 26: {
            EccPublicKey = input.ReadBytes();
            break;
          }
          case 34: {
            EccEncryptedPrivateKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TreeKey : pb::IMessage<TreeKey> {
    private static readonly pb::MessageParser<TreeKey> _parser = new pb::MessageParser<TreeKey>(() => new TreeKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreeKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeKey(TreeKey other) : this() {
      treeKey_ = other.treeKey_;
      keyTypeId_ = other.keyTypeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeKey Clone() {
      return new TreeKey(this);
    }

    /// <summary>Field number for the "treeKey" field.</summary>
    public const int TreeKey_FieldNumber = 1;
    private string treeKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TreeKey_ {
      get { return treeKey_; }
      set {
        treeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyTypeId" field.</summary>
    public const int KeyTypeIdFieldNumber = 2;
    private global::Enterprise.BackupKeyType keyTypeId_ = global::Enterprise.BackupKeyType.NoKey;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.BackupKeyType KeyTypeId {
      get { return keyTypeId_; }
      set {
        keyTypeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TreeKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TreeKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TreeKey_ != other.TreeKey_) return false;
      if (KeyTypeId != other.KeyTypeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TreeKey_.Length != 0) hash ^= TreeKey_.GetHashCode();
      if (KeyTypeId != global::Enterprise.BackupKeyType.NoKey) hash ^= KeyTypeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TreeKey_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TreeKey_);
      }
      if (KeyTypeId != global::Enterprise.BackupKeyType.NoKey) {
        output.WriteRawTag(16);
        output.WriteEnum((int) KeyTypeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TreeKey_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TreeKey_);
      }
      if (KeyTypeId != global::Enterprise.BackupKeyType.NoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyTypeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TreeKey other) {
      if (other == null) {
        return;
      }
      if (other.TreeKey_.Length != 0) {
        TreeKey_ = other.TreeKey_;
      }
      if (other.KeyTypeId != global::Enterprise.BackupKeyType.NoKey) {
        KeyTypeId = other.KeyTypeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TreeKey_ = input.ReadString();
            break;
          }
          case 16: {
            KeyTypeId = (global::Enterprise.BackupKeyType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharedRecordResponse : pb::IMessage<SharedRecordResponse> {
    private static readonly pb::MessageParser<SharedRecordResponse> _parser = new pb::MessageParser<SharedRecordResponse>(() => new SharedRecordResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedRecordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedRecordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedRecordResponse(SharedRecordResponse other) : this() {
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedRecordResponse Clone() {
      return new SharedRecordResponse(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.SharedRecordEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.SharedRecordEvent.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.SharedRecordEvent> events_ = new pbc::RepeatedField<global::Enterprise.SharedRecordEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.SharedRecordEvent> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedRecordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedRecordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedRecordResponse other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharedRecordEvent : pb::IMessage<SharedRecordEvent> {
    private static readonly pb::MessageParser<SharedRecordEvent> _parser = new pb::MessageParser<SharedRecordEvent>(() => new SharedRecordEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedRecordEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedRecordEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedRecordEvent(SharedRecordEvent other) : this() {
      recordUid_ = other.recordUid_;
      userName_ = other.userName_;
      canEdit_ = other.canEdit_;
      canReshare_ = other.canReshare_;
      shareFrom_ = other.shareFrom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedRecordEvent Clone() {
      return new SharedRecordEvent(this);
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "canEdit" field.</summary>
    public const int CanEditFieldNumber = 3;
    private bool canEdit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanEdit {
      get { return canEdit_; }
      set {
        canEdit_ = value;
      }
    }

    /// <summary>Field number for the "canReshare" field.</summary>
    public const int CanReshareFieldNumber = 4;
    private bool canReshare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanReshare {
      get { return canReshare_; }
      set {
        canReshare_ = value;
      }
    }

    /// <summary>Field number for the "shareFrom" field.</summary>
    public const int ShareFromFieldNumber = 5;
    private int shareFrom_;
    /// <summary>
    ///1 is direct share, 2 share folder, 3 share team folder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShareFrom {
      get { return shareFrom_; }
      set {
        shareFrom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedRecordEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedRecordEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordUid != other.RecordUid) return false;
      if (UserName != other.UserName) return false;
      if (CanEdit != other.CanEdit) return false;
      if (CanReshare != other.CanReshare) return false;
      if (ShareFrom != other.ShareFrom) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (CanEdit != false) hash ^= CanEdit.GetHashCode();
      if (CanReshare != false) hash ^= CanReshare.GetHashCode();
      if (ShareFrom != 0) hash ^= ShareFrom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordUid);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (CanEdit != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanEdit);
      }
      if (CanReshare != false) {
        output.WriteRawTag(32);
        output.WriteBool(CanReshare);
      }
      if (ShareFrom != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShareFrom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (CanEdit != false) {
        size += 1 + 1;
      }
      if (CanReshare != false) {
        size += 1 + 1;
      }
      if (ShareFrom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShareFrom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedRecordEvent other) {
      if (other == null) {
        return;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.CanEdit != false) {
        CanEdit = other.CanEdit;
      }
      if (other.CanReshare != false) {
        CanReshare = other.CanReshare;
      }
      if (other.ShareFrom != 0) {
        ShareFrom = other.ShareFrom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 24: {
            CanEdit = input.ReadBool();
            break;
          }
          case 32: {
            CanReshare = input.ReadBool();
            break;
          }
          case 40: {
            ShareFrom = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetRestrictVisibilityRequest : pb::IMessage<SetRestrictVisibilityRequest> {
    private static readonly pb::MessageParser<SetRestrictVisibilityRequest> _parser = new pb::MessageParser<SetRestrictVisibilityRequest>(() => new SetRestrictVisibilityRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRestrictVisibilityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRestrictVisibilityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRestrictVisibilityRequest(SetRestrictVisibilityRequest other) : this() {
      nodeId_ = other.nodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRestrictVisibilityRequest Clone() {
      return new SetRestrictVisibilityRequest(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetRestrictVisibilityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetRestrictVisibilityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetRestrictVisibilityRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Note that this guy's not currently used!  We will probably make
  ///  enterprise_user_add take multiple users like enterprise_user_update.
  /// </summary>
  public sealed partial class UserAddRequest : pb::IMessage<UserAddRequest> {
    private static readonly pb::MessageParser<UserAddRequest> _parser = new pb::MessageParser<UserAddRequest>(() => new UserAddRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAddRequest(UserAddRequest other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      nodeId_ = other.nodeId_;
      encryptedData_ = other.encryptedData_;
      keyType_ = other.keyType_;
      fullName_ = other.fullName_;
      jobTitle_ = other.jobTitle_;
      email_ = other.email_;
      suppressEmailInvite_ = other.suppressEmailInvite_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAddRequest Clone() {
      return new UserAddRequest(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 3;
    private pb::ByteString encryptedData_ = pb::ByteString.Empty;
    /// <summary>
    ///Data encrypted with the tree key, i.e. { display_name="first name middle last name"}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyType" field.</summary>
    public const int KeyTypeFieldNumber = 4;
    private global::Enterprise.EncryptedKeyType keyType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EncryptedKeyType KeyType {
      get { return keyType_; }
      set {
        keyType_ = value;
      }
    }

    /// <summary>Field number for the "fullName" field.</summary>
    public const int FullNameFieldNumber = 5;
    private string fullName_ = "";
    /// <summary>
    ///The user full name, i.e. {John Doe}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jobTitle" field.</summary>
    public const int JobTitleFieldNumber = 6;
    private string jobTitle_ = "";
    /// <summary>
    ///The job tile, i.e. {Chief Financial Officer}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobTitle {
      get { return jobTitle_; }
      set {
        jobTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 7;
    private string email_ = "";
    /// <summary>
    ///The email address of new the enterprise user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "suppressEmailInvite" field.</summary>
    public const int SuppressEmailInviteFieldNumber = 8;
    private bool suppressEmailInvite_;
    /// <summary>
    ///Optional field, if true, server will not send the user an invite email, but instead will return the verification code in the response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SuppressEmailInvite {
      get { return suppressEmailInvite_; }
      set {
        suppressEmailInvite_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (NodeId != other.NodeId) return false;
      if (EncryptedData != other.EncryptedData) return false;
      if (KeyType != other.KeyType) return false;
      if (FullName != other.FullName) return false;
      if (JobTitle != other.JobTitle) return false;
      if (Email != other.Email) return false;
      if (SuppressEmailInvite != other.SuppressEmailInvite) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= KeyType.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      if (JobTitle.Length != 0) hash ^= JobTitle.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (SuppressEmailInvite != false) hash ^= SuppressEmailInvite.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NodeId);
      }
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedData);
      }
      if (KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(32);
        output.WriteEnum((int) KeyType);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FullName);
      }
      if (JobTitle.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(JobTitle);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Email);
      }
      if (SuppressEmailInvite != false) {
        output.WriteRawTag(64);
        output.WriteBool(SuppressEmailInvite);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedData);
      }
      if (KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyType);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      if (JobTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobTitle);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (SuppressEmailInvite != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAddRequest other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      if (other.KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        KeyType = other.KeyType;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
      if (other.JobTitle.Length != 0) {
        JobTitle = other.JobTitle;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.SuppressEmailInvite != false) {
        SuppressEmailInvite = other.SuppressEmailInvite;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 16: {
            NodeId = input.ReadInt64();
            break;
          }
          case 26: {
            EncryptedData = input.ReadBytes();
            break;
          }
          case 32: {
            KeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 42: {
            FullName = input.ReadString();
            break;
          }
          case 50: {
            JobTitle = input.ReadString();
            break;
          }
          case 58: {
            Email = input.ReadString();
            break;
          }
          case 64: {
            SuppressEmailInvite = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserUpdateRequest : pb::IMessage<UserUpdateRequest> {
    private static readonly pb::MessageParser<UserUpdateRequest> _parser = new pb::MessageParser<UserUpdateRequest>(() => new UserUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdateRequest(UserUpdateRequest other) : this() {
      users_ = other.users_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdateRequest Clone() {
      return new UserUpdateRequest(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.UserUpdate> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.UserUpdate.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.UserUpdate> users_ = new pbc::RepeatedField<global::Enterprise.UserUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.UserUpdate> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserUpdateRequest other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Note that ONLY fullName is currently supported!
  /// </summary>
  public sealed partial class UserUpdate : pb::IMessage<UserUpdate> {
    private static readonly pb::MessageParser<UserUpdate> _parser = new pb::MessageParser<UserUpdate>(() => new UserUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdate(UserUpdate other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      nodeId_ = other.nodeId_;
      encryptedData_ = other.encryptedData_;
      keyType_ = other.keyType_;
      fullName_ = other.fullName_;
      jobTitle_ = other.jobTitle_;
      email_ = other.email_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdate Clone() {
      return new UserUpdate(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 3;
    private pb::ByteString encryptedData_ = pb::ByteString.Empty;
    /// <summary>
    ///Data encrypted with the tree key, i.e. { display_name="first name middle last name"}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyType" field.</summary>
    public const int KeyTypeFieldNumber = 4;
    private global::Enterprise.EncryptedKeyType keyType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EncryptedKeyType KeyType {
      get { return keyType_; }
      set {
        keyType_ = value;
      }
    }

    /// <summary>Field number for the "fullName" field.</summary>
    public const int FullNameFieldNumber = 5;
    private string fullName_ = "";
    /// <summary>
    ///The user full name, e.g. "Explodin' Dr. Jaggers Flymo".  Sending an empty string will leave the name unchanged; sending all whitespace will clear the name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jobTitle" field.</summary>
    public const int JobTitleFieldNumber = 6;
    private string jobTitle_ = "";
    /// <summary>
    ///The job tile, e.g. "Drums".  Sending an empty string will leave the title unchanged; sending all whitespace will clear the title.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobTitle {
      get { return jobTitle_; }
      set {
        jobTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 7;
    private string email_ = "";
    /// <summary>
    ///The new email address of the enterprise user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (NodeId != other.NodeId) return false;
      if (EncryptedData != other.EncryptedData) return false;
      if (KeyType != other.KeyType) return false;
      if (FullName != other.FullName) return false;
      if (JobTitle != other.JobTitle) return false;
      if (Email != other.Email) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= KeyType.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      if (JobTitle.Length != 0) hash ^= JobTitle.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NodeId);
      }
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedData);
      }
      if (KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(32);
        output.WriteEnum((int) KeyType);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FullName);
      }
      if (JobTitle.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(JobTitle);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Email);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedData);
      }
      if (KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyType);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      if (JobTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobTitle);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserUpdate other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      if (other.KeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        KeyType = other.KeyType;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
      if (other.JobTitle.Length != 0) {
        JobTitle = other.JobTitle;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 16: {
            NodeId = input.ReadInt64();
            break;
          }
          case 26: {
            EncryptedData = input.ReadBytes();
            break;
          }
          case 32: {
            KeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 42: {
            FullName = input.ReadString();
            break;
          }
          case 50: {
            JobTitle = input.ReadString();
            break;
          }
          case 58: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserUpdateResponse : pb::IMessage<UserUpdateResponse> {
    private static readonly pb::MessageParser<UserUpdateResponse> _parser = new pb::MessageParser<UserUpdateResponse>(() => new UserUpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdateResponse(UserUpdateResponse other) : this() {
      users_ = other.users_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdateResponse Clone() {
      return new UserUpdateResponse(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.UserUpdateResult> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.UserUpdateResult.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.UserUpdateResult> users_ = new pbc::RepeatedField<global::Enterprise.UserUpdateResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.UserUpdateResult> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserUpdateResponse other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserUpdateResult : pb::IMessage<UserUpdateResult> {
    private static readonly pb::MessageParser<UserUpdateResult> _parser = new pb::MessageParser<UserUpdateResult>(() => new UserUpdateResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserUpdateResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdateResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdateResult(UserUpdateResult other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUpdateResult Clone() {
      return new UserUpdateResult(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Enterprise.UserUpdateStatus status_ = global::Enterprise.UserUpdateStatus.UserUpdateOk;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.UserUpdateStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserUpdateResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserUpdateResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (Status != global::Enterprise.UserUpdateStatus.UserUpdateOk) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (Status != global::Enterprise.UserUpdateStatus.UserUpdateOk) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (Status != global::Enterprise.UserUpdateStatus.UserUpdateOk) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserUpdateResult other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.Status != global::Enterprise.UserUpdateStatus.UserUpdateOk) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 16: {
            Status = (global::Enterprise.UserUpdateStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PreliminaryComplianceDataRequest : pb::IMessage<PreliminaryComplianceDataRequest> {
    private static readonly pb::MessageParser<PreliminaryComplianceDataRequest> _parser = new pb::MessageParser<PreliminaryComplianceDataRequest>(() => new PreliminaryComplianceDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreliminaryComplianceDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreliminaryComplianceDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreliminaryComplianceDataRequest(PreliminaryComplianceDataRequest other) : this() {
      enterpriseUserIds_ = other.enterpriseUserIds_.Clone();
      includeNonShared_ = other.includeNonShared_;
      continuationToken_ = other.continuationToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreliminaryComplianceDataRequest Clone() {
      return new PreliminaryComplianceDataRequest(this);
    }

    /// <summary>Field number for the "enterpriseUserIds" field.</summary>
    public const int EnterpriseUserIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_enterpriseUserIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> enterpriseUserIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> EnterpriseUserIds {
      get { return enterpriseUserIds_; }
    }

    /// <summary>Field number for the "includeNonShared" field.</summary>
    public const int IncludeNonSharedFieldNumber = 2;
    private bool includeNonShared_;
    /// <summary>
    ///Default is false, meaning we'll consider only records which are shared.  If true, we'll include the list of records that are not shared.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeNonShared {
      get { return includeNonShared_; }
      set {
        includeNonShared_ = value;
      }
    }

    /// <summary>Field number for the "continuationToken" field.</summary>
    public const int ContinuationTokenFieldNumber = 3;
    private pb::ByteString continuationToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContinuationToken {
      get { return continuationToken_; }
      set {
        continuationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreliminaryComplianceDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreliminaryComplianceDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!enterpriseUserIds_.Equals(other.enterpriseUserIds_)) return false;
      if (IncludeNonShared != other.IncludeNonShared) return false;
      if (ContinuationToken != other.ContinuationToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= enterpriseUserIds_.GetHashCode();
      if (IncludeNonShared != false) hash ^= IncludeNonShared.GetHashCode();
      if (ContinuationToken.Length != 0) hash ^= ContinuationToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      enterpriseUserIds_.WriteTo(output, _repeated_enterpriseUserIds_codec);
      if (IncludeNonShared != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeNonShared);
      }
      if (ContinuationToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ContinuationToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += enterpriseUserIds_.CalculateSize(_repeated_enterpriseUserIds_codec);
      if (IncludeNonShared != false) {
        size += 1 + 1;
      }
      if (ContinuationToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContinuationToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreliminaryComplianceDataRequest other) {
      if (other == null) {
        return;
      }
      enterpriseUserIds_.Add(other.enterpriseUserIds_);
      if (other.IncludeNonShared != false) {
        IncludeNonShared = other.IncludeNonShared;
      }
      if (other.ContinuationToken.Length != 0) {
        ContinuationToken = other.ContinuationToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            enterpriseUserIds_.AddEntriesFrom(input, _repeated_enterpriseUserIds_codec);
            break;
          }
          case 16: {
            IncludeNonShared = input.ReadBool();
            break;
          }
          case 26: {
            ContinuationToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PreliminaryComplianceDataResponse : pb::IMessage<PreliminaryComplianceDataResponse> {
    private static readonly pb::MessageParser<PreliminaryComplianceDataResponse> _parser = new pb::MessageParser<PreliminaryComplianceDataResponse>(() => new PreliminaryComplianceDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreliminaryComplianceDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreliminaryComplianceDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreliminaryComplianceDataResponse(PreliminaryComplianceDataResponse other) : this() {
      auditUserData_ = other.auditUserData_.Clone();
      continuationToken_ = other.continuationToken_;
      hasMore_ = other.hasMore_;
      totalMatchingRecords_ = other.totalMatchingRecords_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreliminaryComplianceDataResponse Clone() {
      return new PreliminaryComplianceDataResponse(this);
    }

    /// <summary>Field number for the "auditUserData" field.</summary>
    public const int AuditUserDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.AuditUserData> _repeated_auditUserData_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.AuditUserData.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.AuditUserData> auditUserData_ = new pbc::RepeatedField<global::Enterprise.AuditUserData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.AuditUserData> AuditUserData {
      get { return auditUserData_; }
    }

    /// <summary>Field number for the "continuationToken" field.</summary>
    public const int ContinuationTokenFieldNumber = 2;
    private pb::ByteString continuationToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContinuationToken {
      get { return continuationToken_; }
      set {
        continuationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hasMore" field.</summary>
    public const int HasMoreFieldNumber = 3;
    private bool hasMore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMore {
      get { return hasMore_; }
      set {
        hasMore_ = value;
      }
    }

    /// <summary>Field number for the "totalMatchingRecords" field.</summary>
    public const int TotalMatchingRecordsFieldNumber = 4;
    private int totalMatchingRecords_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalMatchingRecords {
      get { return totalMatchingRecords_; }
      set {
        totalMatchingRecords_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreliminaryComplianceDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreliminaryComplianceDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!auditUserData_.Equals(other.auditUserData_)) return false;
      if (ContinuationToken != other.ContinuationToken) return false;
      if (HasMore != other.HasMore) return false;
      if (TotalMatchingRecords != other.TotalMatchingRecords) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= auditUserData_.GetHashCode();
      if (ContinuationToken.Length != 0) hash ^= ContinuationToken.GetHashCode();
      if (HasMore != false) hash ^= HasMore.GetHashCode();
      if (TotalMatchingRecords != 0) hash ^= TotalMatchingRecords.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      auditUserData_.WriteTo(output, _repeated_auditUserData_codec);
      if (ContinuationToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ContinuationToken);
      }
      if (HasMore != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasMore);
      }
      if (TotalMatchingRecords != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalMatchingRecords);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += auditUserData_.CalculateSize(_repeated_auditUserData_codec);
      if (ContinuationToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContinuationToken);
      }
      if (HasMore != false) {
        size += 1 + 1;
      }
      if (TotalMatchingRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalMatchingRecords);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreliminaryComplianceDataResponse other) {
      if (other == null) {
        return;
      }
      auditUserData_.Add(other.auditUserData_);
      if (other.ContinuationToken.Length != 0) {
        ContinuationToken = other.ContinuationToken;
      }
      if (other.HasMore != false) {
        HasMore = other.HasMore;
      }
      if (other.TotalMatchingRecords != 0) {
        TotalMatchingRecords = other.TotalMatchingRecords;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            auditUserData_.AddEntriesFrom(input, _repeated_auditUserData_codec);
            break;
          }
          case 18: {
            ContinuationToken = input.ReadBytes();
            break;
          }
          case 24: {
            HasMore = input.ReadBool();
            break;
          }
          case 32: {
            TotalMatchingRecords = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditUserRecord : pb::IMessage<AuditUserRecord> {
    private static readonly pb::MessageParser<AuditUserRecord> _parser = new pb::MessageParser<AuditUserRecord>(() => new AuditUserRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditUserRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditUserRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditUserRecord(AuditUserRecord other) : this() {
      recordUid_ = other.recordUid_;
      encryptedData_ = other.encryptedData_;
      shared_ = other.shared_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditUserRecord Clone() {
      return new AuditUserRecord(this);
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 2;
    private pb::ByteString encryptedData_ = pb::ByteString.Empty;
    /// <summary>
    ///audit data encrypted with the audit key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shared" field.</summary>
    public const int SharedFieldNumber = 3;
    private bool shared_;
    /// <summary>
    ///Default is false. If true, this record is shared.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shared {
      get { return shared_; }
      set {
        shared_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditUserRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditUserRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordUid != other.RecordUid) return false;
      if (EncryptedData != other.EncryptedData) return false;
      if (Shared != other.Shared) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (Shared != false) hash ^= Shared.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordUid);
      }
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedData);
      }
      if (Shared != false) {
        output.WriteRawTag(24);
        output.WriteBool(Shared);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedData);
      }
      if (Shared != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditUserRecord other) {
      if (other == null) {
        return;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      if (other.Shared != false) {
        Shared = other.Shared;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedData = input.ReadBytes();
            break;
          }
          case 24: {
            Shared = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditUserData : pb::IMessage<AuditUserData> {
    private static readonly pb::MessageParser<AuditUserData> _parser = new pb::MessageParser<AuditUserData>(() => new AuditUserData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditUserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditUserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditUserData(AuditUserData other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      auditUserRecords_ = other.auditUserRecords_.Clone();
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditUserData Clone() {
      return new AuditUserData(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "auditUserRecords" field.</summary>
    public const int AuditUserRecordsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Enterprise.AuditUserRecord> _repeated_auditUserRecords_codec
        = pb::FieldCodec.ForMessage(18, global::Enterprise.AuditUserRecord.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.AuditUserRecord> auditUserRecords_ = new pbc::RepeatedField<global::Enterprise.AuditUserRecord>();
    /// <summary>
    ///The list of record owned or owned and shared by this user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.AuditUserRecord> AuditUserRecords {
      get { return auditUserRecords_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Enterprise.AuditUserStatus status_ = global::Enterprise.AuditUserStatus.Ok;
    /// <summary>
    ///Status of user for report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.AuditUserStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditUserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditUserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if(!auditUserRecords_.Equals(other.auditUserRecords_)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      hash ^= auditUserRecords_.GetHashCode();
      if (Status != global::Enterprise.AuditUserStatus.Ok) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      auditUserRecords_.WriteTo(output, _repeated_auditUserRecords_codec);
      if (Status != global::Enterprise.AuditUserStatus.Ok) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      size += auditUserRecords_.CalculateSize(_repeated_auditUserRecords_codec);
      if (Status != global::Enterprise.AuditUserStatus.Ok) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditUserData other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      auditUserRecords_.Add(other.auditUserRecords_);
      if (other.Status != global::Enterprise.AuditUserStatus.Ok) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            auditUserRecords_.AddEntriesFrom(input, _repeated_auditUserRecords_codec);
            break;
          }
          case 24: {
            Status = (global::Enterprise.AuditUserStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComplianceReportFilters : pb::IMessage<ComplianceReportFilters> {
    private static readonly pb::MessageParser<ComplianceReportFilters> _parser = new pb::MessageParser<ComplianceReportFilters>(() => new ComplianceReportFilters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComplianceReportFilters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportFilters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportFilters(ComplianceReportFilters other) : this() {
      recordTitles_ = other.recordTitles_.Clone();
      recordUids_ = other.recordUids_.Clone();
      jobTitles_ = other.jobTitles_.Clone();
      urls_ = other.urls_.Clone();
      enterpriseUserIds_ = other.enterpriseUserIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportFilters Clone() {
      return new ComplianceReportFilters(this);
    }

    /// <summary>Field number for the "recordTitles" field.</summary>
    public const int RecordTitlesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_recordTitles_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> recordTitles_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///The list of record titles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecordTitles {
      get { return recordTitles_; }
    }

    /// <summary>Field number for the "recordUids" field.</summary>
    public const int RecordUidsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_recordUids_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> recordUids_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///The list of record UIDs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RecordUids {
      get { return recordUids_; }
    }

    /// <summary>Field number for the "jobTitles" field.</summary>
    public const int JobTitlesFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_jobTitles_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> jobTitles_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///The list of user job titles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> JobTitles {
      get { return jobTitles_; }
    }

    /// <summary>Field number for the "urls" field.</summary>
    public const int UrlsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_urls_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> urls_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///The list of record URLs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Urls {
      get { return urls_; }
    }

    /// <summary>Field number for the "enterpriseUserIds" field.</summary>
    public const int EnterpriseUserIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_enterpriseUserIds_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> enterpriseUserIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///The list of users chosen.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> EnterpriseUserIds {
      get { return enterpriseUserIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComplianceReportFilters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComplianceReportFilters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recordTitles_.Equals(other.recordTitles_)) return false;
      if(!recordUids_.Equals(other.recordUids_)) return false;
      if(!jobTitles_.Equals(other.jobTitles_)) return false;
      if(!urls_.Equals(other.urls_)) return false;
      if(!enterpriseUserIds_.Equals(other.enterpriseUserIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recordTitles_.GetHashCode();
      hash ^= recordUids_.GetHashCode();
      hash ^= jobTitles_.GetHashCode();
      hash ^= urls_.GetHashCode();
      hash ^= enterpriseUserIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recordTitles_.WriteTo(output, _repeated_recordTitles_codec);
      recordUids_.WriteTo(output, _repeated_recordUids_codec);
      jobTitles_.WriteTo(output, _repeated_jobTitles_codec);
      urls_.WriteTo(output, _repeated_urls_codec);
      enterpriseUserIds_.WriteTo(output, _repeated_enterpriseUserIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recordTitles_.CalculateSize(_repeated_recordTitles_codec);
      size += recordUids_.CalculateSize(_repeated_recordUids_codec);
      size += jobTitles_.CalculateSize(_repeated_jobTitles_codec);
      size += urls_.CalculateSize(_repeated_urls_codec);
      size += enterpriseUserIds_.CalculateSize(_repeated_enterpriseUserIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComplianceReportFilters other) {
      if (other == null) {
        return;
      }
      recordTitles_.Add(other.recordTitles_);
      recordUids_.Add(other.recordUids_);
      jobTitles_.Add(other.jobTitles_);
      urls_.Add(other.urls_);
      enterpriseUserIds_.Add(other.enterpriseUserIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            recordTitles_.AddEntriesFrom(input, _repeated_recordTitles_codec);
            break;
          }
          case 18: {
            recordUids_.AddEntriesFrom(input, _repeated_recordUids_codec);
            break;
          }
          case 26:
          case 24: {
            jobTitles_.AddEntriesFrom(input, _repeated_jobTitles_codec);
            break;
          }
          case 34: {
            urls_.AddEntriesFrom(input, _repeated_urls_codec);
            break;
          }
          case 42:
          case 40: {
            enterpriseUserIds_.AddEntriesFrom(input, _repeated_enterpriseUserIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComplianceReportRequest : pb::IMessage<ComplianceReportRequest> {
    private static readonly pb::MessageParser<ComplianceReportRequest> _parser = new pb::MessageParser<ComplianceReportRequest>(() => new ComplianceReportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComplianceReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportRequest(ComplianceReportRequest other) : this() {
      complianceReportRun_ = other.complianceReportRun_ != null ? other.complianceReportRun_.Clone() : null;
      reportName_ = other.reportName_;
      saveReport_ = other.saveReport_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportRequest Clone() {
      return new ComplianceReportRequest(this);
    }

    /// <summary>Field number for the "complianceReportRun" field.</summary>
    public const int ComplianceReportRunFieldNumber = 1;
    private global::Enterprise.ComplianceReportRun complianceReportRun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.ComplianceReportRun ComplianceReportRun {
      get { return complianceReportRun_; }
      set {
        complianceReportRun_ = value;
      }
    }

    /// <summary>Field number for the "reportName" field.</summary>
    public const int ReportNameFieldNumber = 2;
    private string reportName_ = "";
    /// <summary>
    ///The report name (only required when we want to save the report).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReportName {
      get { return reportName_; }
      set {
        reportName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "saveReport" field.</summary>
    public const int SaveReportFieldNumber = 3;
    private bool saveReport_;
    /// <summary>
    ///Default is false.  True means we will save the report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SaveReport {
      get { return saveReport_; }
      set {
        saveReport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComplianceReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComplianceReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ComplianceReportRun, other.ComplianceReportRun)) return false;
      if (ReportName != other.ReportName) return false;
      if (SaveReport != other.SaveReport) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (complianceReportRun_ != null) hash ^= ComplianceReportRun.GetHashCode();
      if (ReportName.Length != 0) hash ^= ReportName.GetHashCode();
      if (SaveReport != false) hash ^= SaveReport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (complianceReportRun_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ComplianceReportRun);
      }
      if (ReportName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ReportName);
      }
      if (SaveReport != false) {
        output.WriteRawTag(24);
        output.WriteBool(SaveReport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (complianceReportRun_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComplianceReportRun);
      }
      if (ReportName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportName);
      }
      if (SaveReport != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComplianceReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.complianceReportRun_ != null) {
        if (complianceReportRun_ == null) {
          ComplianceReportRun = new global::Enterprise.ComplianceReportRun();
        }
        ComplianceReportRun.MergeFrom(other.ComplianceReportRun);
      }
      if (other.ReportName.Length != 0) {
        ReportName = other.ReportName;
      }
      if (other.SaveReport != false) {
        SaveReport = other.SaveReport;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (complianceReportRun_ == null) {
              ComplianceReportRun = new global::Enterprise.ComplianceReportRun();
            }
            input.ReadMessage(ComplianceReportRun);
            break;
          }
          case 18: {
            ReportName = input.ReadString();
            break;
          }
          case 24: {
            SaveReport = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComplianceReportRun : pb::IMessage<ComplianceReportRun> {
    private static readonly pb::MessageParser<ComplianceReportRun> _parser = new pb::MessageParser<ComplianceReportRun>(() => new ComplianceReportRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComplianceReportRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportRun(ComplianceReportRun other) : this() {
      reportCriteriaAndFilter_ = other.reportCriteriaAndFilter_ != null ? other.reportCriteriaAndFilter_.Clone() : null;
      users_ = other.users_.Clone();
      records_ = other.records_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportRun Clone() {
      return new ComplianceReportRun(this);
    }

    /// <summary>Field number for the "reportCriteriaAndFilter" field.</summary>
    public const int ReportCriteriaAndFilterFieldNumber = 1;
    private global::Enterprise.ComplianceReportCriteriaAndFilter reportCriteriaAndFilter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.ComplianceReportCriteriaAndFilter ReportCriteriaAndFilter {
      get { return reportCriteriaAndFilter_; }
      set {
        reportCriteriaAndFilter_ = value;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_users_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> users_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///List of enterprise user IDs sent to get_preliminary_compliance_data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_records_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> records_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///These are the records that will be run.  Max number of recordUids is 1000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComplianceReportRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComplianceReportRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReportCriteriaAndFilter, other.ReportCriteriaAndFilter)) return false;
      if(!users_.Equals(other.users_)) return false;
      if(!records_.Equals(other.records_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reportCriteriaAndFilter_ != null) hash ^= ReportCriteriaAndFilter.GetHashCode();
      hash ^= users_.GetHashCode();
      hash ^= records_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reportCriteriaAndFilter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReportCriteriaAndFilter);
      }
      users_.WriteTo(output, _repeated_users_codec);
      records_.WriteTo(output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reportCriteriaAndFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReportCriteriaAndFilter);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      size += records_.CalculateSize(_repeated_records_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComplianceReportRun other) {
      if (other == null) {
        return;
      }
      if (other.reportCriteriaAndFilter_ != null) {
        if (reportCriteriaAndFilter_ == null) {
          ReportCriteriaAndFilter = new global::Enterprise.ComplianceReportCriteriaAndFilter();
        }
        ReportCriteriaAndFilter.MergeFrom(other.ReportCriteriaAndFilter);
      }
      users_.Add(other.users_);
      records_.Add(other.records_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (reportCriteriaAndFilter_ == null) {
              ReportCriteriaAndFilter = new global::Enterprise.ComplianceReportCriteriaAndFilter();
            }
            input.ReadMessage(ReportCriteriaAndFilter);
            break;
          }
          case 18:
          case 16: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 26: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComplianceReportCriteriaAndFilter : pb::IMessage<ComplianceReportCriteriaAndFilter> {
    private static readonly pb::MessageParser<ComplianceReportCriteriaAndFilter> _parser = new pb::MessageParser<ComplianceReportCriteriaAndFilter>(() => new ComplianceReportCriteriaAndFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComplianceReportCriteriaAndFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportCriteriaAndFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportCriteriaAndFilter(ComplianceReportCriteriaAndFilter other) : this() {
      nodeId_ = other.nodeId_;
      criteriaUid_ = other.criteriaUid_;
      criteriaName_ = other.criteriaName_;
      criteria_ = other.criteria_ != null ? other.criteria_.Clone() : null;
      filters_ = other.filters_.Clone();
      lastModified_ = other.lastModified_;
      nodeEncryptedData_ = other.nodeEncryptedData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportCriteriaAndFilter Clone() {
      return new ComplianceReportCriteriaAndFilter(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "criteriaUid" field.</summary>
    public const int CriteriaUidFieldNumber = 2;
    private pb::ByteString criteriaUid_ = pb::ByteString.Empty;
    /// <summary>
    ///Uid provided by the client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CriteriaUid {
      get { return criteriaUid_; }
      set {
        criteriaUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "criteriaName" field.</summary>
    public const int CriteriaNameFieldNumber = 3;
    private string criteriaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CriteriaName {
      get { return criteriaName_; }
      set {
        criteriaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "criteria" field.</summary>
    public const int CriteriaFieldNumber = 4;
    private global::Enterprise.ComplianceReportCriteria criteria_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.ComplianceReportCriteria Criteria {
      get { return criteria_; }
      set {
        criteria_ = value;
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Enterprise.ComplianceReportFilter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(42, global::Enterprise.ComplianceReportFilter.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.ComplianceReportFilter> filters_ = new pbc::RepeatedField<global::Enterprise.ComplianceReportFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.ComplianceReportFilter> Filters {
      get { return filters_; }
    }

    /// <summary>Field number for the "lastModified" field.</summary>
    public const int LastModifiedFieldNumber = 6;
    private long lastModified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastModified {
      get { return lastModified_; }
      set {
        lastModified_ = value;
      }
    }

    /// <summary>Field number for the "nodeEncryptedData" field.</summary>
    public const int NodeEncryptedDataFieldNumber = 7;
    private pb::ByteString nodeEncryptedData_ = pb::ByteString.Empty;
    /// <summary>
    ///The node data object encrypted with the tree key that contains the nodeName 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodeEncryptedData {
      get { return nodeEncryptedData_; }
      set {
        nodeEncryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComplianceReportCriteriaAndFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComplianceReportCriteriaAndFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (CriteriaUid != other.CriteriaUid) return false;
      if (CriteriaName != other.CriteriaName) return false;
      if (!object.Equals(Criteria, other.Criteria)) return false;
      if(!filters_.Equals(other.filters_)) return false;
      if (LastModified != other.LastModified) return false;
      if (NodeEncryptedData != other.NodeEncryptedData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (CriteriaUid.Length != 0) hash ^= CriteriaUid.GetHashCode();
      if (CriteriaName.Length != 0) hash ^= CriteriaName.GetHashCode();
      if (criteria_ != null) hash ^= Criteria.GetHashCode();
      hash ^= filters_.GetHashCode();
      if (LastModified != 0L) hash ^= LastModified.GetHashCode();
      if (NodeEncryptedData.Length != 0) hash ^= NodeEncryptedData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NodeId);
      }
      if (CriteriaUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CriteriaUid);
      }
      if (CriteriaName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CriteriaName);
      }
      if (criteria_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Criteria);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
      if (LastModified != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LastModified);
      }
      if (NodeEncryptedData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(NodeEncryptedData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (CriteriaUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CriteriaUid);
      }
      if (CriteriaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CriteriaName);
      }
      if (criteria_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Criteria);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (LastModified != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModified);
      }
      if (NodeEncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodeEncryptedData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComplianceReportCriteriaAndFilter other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.CriteriaUid.Length != 0) {
        CriteriaUid = other.CriteriaUid;
      }
      if (other.CriteriaName.Length != 0) {
        CriteriaName = other.CriteriaName;
      }
      if (other.criteria_ != null) {
        if (criteria_ == null) {
          Criteria = new global::Enterprise.ComplianceReportCriteria();
        }
        Criteria.MergeFrom(other.Criteria);
      }
      filters_.Add(other.filters_);
      if (other.LastModified != 0L) {
        LastModified = other.LastModified;
      }
      if (other.NodeEncryptedData.Length != 0) {
        NodeEncryptedData = other.NodeEncryptedData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadInt64();
            break;
          }
          case 18: {
            CriteriaUid = input.ReadBytes();
            break;
          }
          case 26: {
            CriteriaName = input.ReadString();
            break;
          }
          case 34: {
            if (criteria_ == null) {
              Criteria = new global::Enterprise.ComplianceReportCriteria();
            }
            input.ReadMessage(Criteria);
            break;
          }
          case 42: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
          case 48: {
            LastModified = input.ReadInt64();
            break;
          }
          case 58: {
            NodeEncryptedData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComplianceReportCriteria : pb::IMessage<ComplianceReportCriteria> {
    private static readonly pb::MessageParser<ComplianceReportCriteria> _parser = new pb::MessageParser<ComplianceReportCriteria>(() => new ComplianceReportCriteria());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComplianceReportCriteria> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportCriteria() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportCriteria(ComplianceReportCriteria other) : this() {
      jobTitles_ = other.jobTitles_.Clone();
      enterpriseUserIds_ = other.enterpriseUserIds_.Clone();
      includeNonShared_ = other.includeNonShared_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportCriteria Clone() {
      return new ComplianceReportCriteria(this);
    }

    /// <summary>Field number for the "jobTitles" field.</summary>
    public const int JobTitlesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_jobTitles_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> jobTitles_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///The list of job titles chosen.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> JobTitles {
      get { return jobTitles_; }
    }

    /// <summary>Field number for the "enterpriseUserIds" field.</summary>
    public const int EnterpriseUserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_enterpriseUserIds_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> enterpriseUserIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///The list of users chosen.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> EnterpriseUserIds {
      get { return enterpriseUserIds_; }
    }

    /// <summary>Field number for the "includeNonShared" field.</summary>
    public const int IncludeNonSharedFieldNumber = 3;
    private bool includeNonShared_;
    /// <summary>
    ///If true, include the list the records that are not shared
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeNonShared {
      get { return includeNonShared_; }
      set {
        includeNonShared_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComplianceReportCriteria);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComplianceReportCriteria other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!jobTitles_.Equals(other.jobTitles_)) return false;
      if(!enterpriseUserIds_.Equals(other.enterpriseUserIds_)) return false;
      if (IncludeNonShared != other.IncludeNonShared) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= jobTitles_.GetHashCode();
      hash ^= enterpriseUserIds_.GetHashCode();
      if (IncludeNonShared != false) hash ^= IncludeNonShared.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      jobTitles_.WriteTo(output, _repeated_jobTitles_codec);
      enterpriseUserIds_.WriteTo(output, _repeated_enterpriseUserIds_codec);
      if (IncludeNonShared != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeNonShared);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += jobTitles_.CalculateSize(_repeated_jobTitles_codec);
      size += enterpriseUserIds_.CalculateSize(_repeated_enterpriseUserIds_codec);
      if (IncludeNonShared != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComplianceReportCriteria other) {
      if (other == null) {
        return;
      }
      jobTitles_.Add(other.jobTitles_);
      enterpriseUserIds_.Add(other.enterpriseUserIds_);
      if (other.IncludeNonShared != false) {
        IncludeNonShared = other.IncludeNonShared;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            jobTitles_.AddEntriesFrom(input, _repeated_jobTitles_codec);
            break;
          }
          case 18:
          case 16: {
            enterpriseUserIds_.AddEntriesFrom(input, _repeated_enterpriseUserIds_codec);
            break;
          }
          case 24: {
            IncludeNonShared = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComplianceReportFilter : pb::IMessage<ComplianceReportFilter> {
    private static readonly pb::MessageParser<ComplianceReportFilter> _parser = new pb::MessageParser<ComplianceReportFilter>(() => new ComplianceReportFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComplianceReportFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportFilter(ComplianceReportFilter other) : this() {
      recordTitles_ = other.recordTitles_.Clone();
      recordUids_ = other.recordUids_.Clone();
      jobTitles_ = other.jobTitles_.Clone();
      urls_ = other.urls_.Clone();
      recordTypes_ = other.recordTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportFilter Clone() {
      return new ComplianceReportFilter(this);
    }

    /// <summary>Field number for the "recordTitles" field.</summary>
    public const int RecordTitlesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_recordTitles_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> recordTitles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecordTitles {
      get { return recordTitles_; }
    }

    /// <summary>Field number for the "recordUids" field.</summary>
    public const int RecordUidsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_recordUids_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> recordUids_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RecordUids {
      get { return recordUids_; }
    }

    /// <summary>Field number for the "jobTitles" field.</summary>
    public const int JobTitlesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_jobTitles_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> jobTitles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> JobTitles {
      get { return jobTitles_; }
    }

    /// <summary>Field number for the "urls" field.</summary>
    public const int UrlsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_urls_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> urls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Urls {
      get { return urls_; }
    }

    /// <summary>Field number for the "recordTypes" field.</summary>
    public const int RecordTypesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_recordTypes_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> recordTypes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecordTypes {
      get { return recordTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComplianceReportFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComplianceReportFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recordTitles_.Equals(other.recordTitles_)) return false;
      if(!recordUids_.Equals(other.recordUids_)) return false;
      if(!jobTitles_.Equals(other.jobTitles_)) return false;
      if(!urls_.Equals(other.urls_)) return false;
      if(!recordTypes_.Equals(other.recordTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recordTitles_.GetHashCode();
      hash ^= recordUids_.GetHashCode();
      hash ^= jobTitles_.GetHashCode();
      hash ^= urls_.GetHashCode();
      hash ^= recordTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recordTitles_.WriteTo(output, _repeated_recordTitles_codec);
      recordUids_.WriteTo(output, _repeated_recordUids_codec);
      jobTitles_.WriteTo(output, _repeated_jobTitles_codec);
      urls_.WriteTo(output, _repeated_urls_codec);
      recordTypes_.WriteTo(output, _repeated_recordTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recordTitles_.CalculateSize(_repeated_recordTitles_codec);
      size += recordUids_.CalculateSize(_repeated_recordUids_codec);
      size += jobTitles_.CalculateSize(_repeated_jobTitles_codec);
      size += urls_.CalculateSize(_repeated_urls_codec);
      size += recordTypes_.CalculateSize(_repeated_recordTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComplianceReportFilter other) {
      if (other == null) {
        return;
      }
      recordTitles_.Add(other.recordTitles_);
      recordUids_.Add(other.recordUids_);
      jobTitles_.Add(other.jobTitles_);
      urls_.Add(other.urls_);
      recordTypes_.Add(other.recordTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            recordTitles_.AddEntriesFrom(input, _repeated_recordTitles_codec);
            break;
          }
          case 18: {
            recordUids_.AddEntriesFrom(input, _repeated_recordUids_codec);
            break;
          }
          case 26: {
            jobTitles_.AddEntriesFrom(input, _repeated_jobTitles_codec);
            break;
          }
          case 34: {
            urls_.AddEntriesFrom(input, _repeated_urls_codec);
            break;
          }
          case 42: {
            recordTypes_.AddEntriesFrom(input, _repeated_recordTypes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComplianceReportResponse : pb::IMessage<ComplianceReportResponse> {
    private static readonly pb::MessageParser<ComplianceReportResponse> _parser = new pb::MessageParser<ComplianceReportResponse>(() => new ComplianceReportResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComplianceReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportResponse(ComplianceReportResponse other) : this() {
      dateGenerated_ = other.dateGenerated_;
      runByUserName_ = other.runByUserName_;
      reportName_ = other.reportName_;
      reportUid_ = other.reportUid_;
      complianceReportRun_ = other.complianceReportRun_ != null ? other.complianceReportRun_.Clone() : null;
      userProfiles_ = other.userProfiles_.Clone();
      auditTeams_ = other.auditTeams_.Clone();
      auditRecords_ = other.auditRecords_.Clone();
      userRecords_ = other.userRecords_.Clone();
      sharedFolderRecords_ = other.sharedFolderRecords_.Clone();
      sharedFolderUsers_ = other.sharedFolderUsers_.Clone();
      sharedFolderTeams_ = other.sharedFolderTeams_.Clone();
      auditTeamUsers_ = other.auditTeamUsers_.Clone();
      auditRoles_ = other.auditRoles_.Clone();
      linkedRecords_ = other.linkedRecords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportResponse Clone() {
      return new ComplianceReportResponse(this);
    }

    /// <summary>Field number for the "dateGenerated" field.</summary>
    public const int DateGeneratedFieldNumber = 1;
    private long dateGenerated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DateGenerated {
      get { return dateGenerated_; }
      set {
        dateGenerated_ = value;
      }
    }

    /// <summary>Field number for the "runByUserName" field.</summary>
    public const int RunByUserNameFieldNumber = 2;
    private string runByUserName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunByUserName {
      get { return runByUserName_; }
      set {
        runByUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reportName" field.</summary>
    public const int ReportNameFieldNumber = 3;
    private string reportName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReportName {
      get { return reportName_; }
      set {
        reportName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reportUid" field.</summary>
    public const int ReportUidFieldNumber = 4;
    private pb::ByteString reportUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReportUid {
      get { return reportUid_; }
      set {
        reportUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "complianceReportRun" field.</summary>
    public const int ComplianceReportRunFieldNumber = 5;
    private global::Enterprise.ComplianceReportRun complianceReportRun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.ComplianceReportRun ComplianceReportRun {
      get { return complianceReportRun_; }
      set {
        complianceReportRun_ = value;
      }
    }

    /// <summary>Field number for the "userProfiles" field.</summary>
    public const int UserProfilesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Enterprise.UserProfile> _repeated_userProfiles_codec
        = pb::FieldCodec.ForMessage(50, global::Enterprise.UserProfile.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.UserProfile> userProfiles_ = new pbc::RepeatedField<global::Enterprise.UserProfile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.UserProfile> UserProfiles {
      get { return userProfiles_; }
    }

    /// <summary>Field number for the "auditTeams" field.</summary>
    public const int AuditTeamsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Enterprise.AuditTeam> _repeated_auditTeams_codec
        = pb::FieldCodec.ForMessage(58, global::Enterprise.AuditTeam.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.AuditTeam> auditTeams_ = new pbc::RepeatedField<global::Enterprise.AuditTeam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.AuditTeam> AuditTeams {
      get { return auditTeams_; }
    }

    /// <summary>Field number for the "auditRecords" field.</summary>
    public const int AuditRecordsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Enterprise.AuditRecord> _repeated_auditRecords_codec
        = pb::FieldCodec.ForMessage(66, global::Enterprise.AuditRecord.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.AuditRecord> auditRecords_ = new pbc::RepeatedField<global::Enterprise.AuditRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.AuditRecord> AuditRecords {
      get { return auditRecords_; }
    }

    /// <summary>Field number for the "userRecords" field.</summary>
    public const int UserRecordsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Enterprise.UserRecord> _repeated_userRecords_codec
        = pb::FieldCodec.ForMessage(74, global::Enterprise.UserRecord.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.UserRecord> userRecords_ = new pbc::RepeatedField<global::Enterprise.UserRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.UserRecord> UserRecords {
      get { return userRecords_; }
    }

    /// <summary>Field number for the "sharedFolderRecords" field.</summary>
    public const int SharedFolderRecordsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Enterprise.SharedFolderRecord> _repeated_sharedFolderRecords_codec
        = pb::FieldCodec.ForMessage(82, global::Enterprise.SharedFolderRecord.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.SharedFolderRecord> sharedFolderRecords_ = new pbc::RepeatedField<global::Enterprise.SharedFolderRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.SharedFolderRecord> SharedFolderRecords {
      get { return sharedFolderRecords_; }
    }

    /// <summary>Field number for the "sharedFolderUsers" field.</summary>
    public const int SharedFolderUsersFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Enterprise.SharedFolderUser> _repeated_sharedFolderUsers_codec
        = pb::FieldCodec.ForMessage(90, global::Enterprise.SharedFolderUser.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.SharedFolderUser> sharedFolderUsers_ = new pbc::RepeatedField<global::Enterprise.SharedFolderUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.SharedFolderUser> SharedFolderUsers {
      get { return sharedFolderUsers_; }
    }

    /// <summary>Field number for the "sharedFolderTeams" field.</summary>
    public const int SharedFolderTeamsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Enterprise.SharedFolderTeam> _repeated_sharedFolderTeams_codec
        = pb::FieldCodec.ForMessage(98, global::Enterprise.SharedFolderTeam.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.SharedFolderTeam> sharedFolderTeams_ = new pbc::RepeatedField<global::Enterprise.SharedFolderTeam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.SharedFolderTeam> SharedFolderTeams {
      get { return sharedFolderTeams_; }
    }

    /// <summary>Field number for the "auditTeamUsers" field.</summary>
    public const int AuditTeamUsersFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Enterprise.AuditTeamUser> _repeated_auditTeamUsers_codec
        = pb::FieldCodec.ForMessage(106, global::Enterprise.AuditTeamUser.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.AuditTeamUser> auditTeamUsers_ = new pbc::RepeatedField<global::Enterprise.AuditTeamUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.AuditTeamUser> AuditTeamUsers {
      get { return auditTeamUsers_; }
    }

    /// <summary>Field number for the "auditRoles" field.</summary>
    public const int AuditRolesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Enterprise.AuditRole> _repeated_auditRoles_codec
        = pb::FieldCodec.ForMessage(114, global::Enterprise.AuditRole.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.AuditRole> auditRoles_ = new pbc::RepeatedField<global::Enterprise.AuditRole>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.AuditRole> AuditRoles {
      get { return auditRoles_; }
    }

    /// <summary>Field number for the "linkedRecords" field.</summary>
    public const int LinkedRecordsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Enterprise.LinkedRecord> _repeated_linkedRecords_codec
        = pb::FieldCodec.ForMessage(122, global::Enterprise.LinkedRecord.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.LinkedRecord> linkedRecords_ = new pbc::RepeatedField<global::Enterprise.LinkedRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.LinkedRecord> LinkedRecords {
      get { return linkedRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComplianceReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComplianceReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DateGenerated != other.DateGenerated) return false;
      if (RunByUserName != other.RunByUserName) return false;
      if (ReportName != other.ReportName) return false;
      if (ReportUid != other.ReportUid) return false;
      if (!object.Equals(ComplianceReportRun, other.ComplianceReportRun)) return false;
      if(!userProfiles_.Equals(other.userProfiles_)) return false;
      if(!auditTeams_.Equals(other.auditTeams_)) return false;
      if(!auditRecords_.Equals(other.auditRecords_)) return false;
      if(!userRecords_.Equals(other.userRecords_)) return false;
      if(!sharedFolderRecords_.Equals(other.sharedFolderRecords_)) return false;
      if(!sharedFolderUsers_.Equals(other.sharedFolderUsers_)) return false;
      if(!sharedFolderTeams_.Equals(other.sharedFolderTeams_)) return false;
      if(!auditTeamUsers_.Equals(other.auditTeamUsers_)) return false;
      if(!auditRoles_.Equals(other.auditRoles_)) return false;
      if(!linkedRecords_.Equals(other.linkedRecords_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DateGenerated != 0L) hash ^= DateGenerated.GetHashCode();
      if (RunByUserName.Length != 0) hash ^= RunByUserName.GetHashCode();
      if (ReportName.Length != 0) hash ^= ReportName.GetHashCode();
      if (ReportUid.Length != 0) hash ^= ReportUid.GetHashCode();
      if (complianceReportRun_ != null) hash ^= ComplianceReportRun.GetHashCode();
      hash ^= userProfiles_.GetHashCode();
      hash ^= auditTeams_.GetHashCode();
      hash ^= auditRecords_.GetHashCode();
      hash ^= userRecords_.GetHashCode();
      hash ^= sharedFolderRecords_.GetHashCode();
      hash ^= sharedFolderUsers_.GetHashCode();
      hash ^= sharedFolderTeams_.GetHashCode();
      hash ^= auditTeamUsers_.GetHashCode();
      hash ^= auditRoles_.GetHashCode();
      hash ^= linkedRecords_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DateGenerated != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DateGenerated);
      }
      if (RunByUserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RunByUserName);
      }
      if (ReportName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReportName);
      }
      if (ReportUid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ReportUid);
      }
      if (complianceReportRun_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ComplianceReportRun);
      }
      userProfiles_.WriteTo(output, _repeated_userProfiles_codec);
      auditTeams_.WriteTo(output, _repeated_auditTeams_codec);
      auditRecords_.WriteTo(output, _repeated_auditRecords_codec);
      userRecords_.WriteTo(output, _repeated_userRecords_codec);
      sharedFolderRecords_.WriteTo(output, _repeated_sharedFolderRecords_codec);
      sharedFolderUsers_.WriteTo(output, _repeated_sharedFolderUsers_codec);
      sharedFolderTeams_.WriteTo(output, _repeated_sharedFolderTeams_codec);
      auditTeamUsers_.WriteTo(output, _repeated_auditTeamUsers_codec);
      auditRoles_.WriteTo(output, _repeated_auditRoles_codec);
      linkedRecords_.WriteTo(output, _repeated_linkedRecords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DateGenerated != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DateGenerated);
      }
      if (RunByUserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunByUserName);
      }
      if (ReportName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportName);
      }
      if (ReportUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReportUid);
      }
      if (complianceReportRun_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComplianceReportRun);
      }
      size += userProfiles_.CalculateSize(_repeated_userProfiles_codec);
      size += auditTeams_.CalculateSize(_repeated_auditTeams_codec);
      size += auditRecords_.CalculateSize(_repeated_auditRecords_codec);
      size += userRecords_.CalculateSize(_repeated_userRecords_codec);
      size += sharedFolderRecords_.CalculateSize(_repeated_sharedFolderRecords_codec);
      size += sharedFolderUsers_.CalculateSize(_repeated_sharedFolderUsers_codec);
      size += sharedFolderTeams_.CalculateSize(_repeated_sharedFolderTeams_codec);
      size += auditTeamUsers_.CalculateSize(_repeated_auditTeamUsers_codec);
      size += auditRoles_.CalculateSize(_repeated_auditRoles_codec);
      size += linkedRecords_.CalculateSize(_repeated_linkedRecords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComplianceReportResponse other) {
      if (other == null) {
        return;
      }
      if (other.DateGenerated != 0L) {
        DateGenerated = other.DateGenerated;
      }
      if (other.RunByUserName.Length != 0) {
        RunByUserName = other.RunByUserName;
      }
      if (other.ReportName.Length != 0) {
        ReportName = other.ReportName;
      }
      if (other.ReportUid.Length != 0) {
        ReportUid = other.ReportUid;
      }
      if (other.complianceReportRun_ != null) {
        if (complianceReportRun_ == null) {
          ComplianceReportRun = new global::Enterprise.ComplianceReportRun();
        }
        ComplianceReportRun.MergeFrom(other.ComplianceReportRun);
      }
      userProfiles_.Add(other.userProfiles_);
      auditTeams_.Add(other.auditTeams_);
      auditRecords_.Add(other.auditRecords_);
      userRecords_.Add(other.userRecords_);
      sharedFolderRecords_.Add(other.sharedFolderRecords_);
      sharedFolderUsers_.Add(other.sharedFolderUsers_);
      sharedFolderTeams_.Add(other.sharedFolderTeams_);
      auditTeamUsers_.Add(other.auditTeamUsers_);
      auditRoles_.Add(other.auditRoles_);
      linkedRecords_.Add(other.linkedRecords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DateGenerated = input.ReadInt64();
            break;
          }
          case 18: {
            RunByUserName = input.ReadString();
            break;
          }
          case 26: {
            ReportName = input.ReadString();
            break;
          }
          case 34: {
            ReportUid = input.ReadBytes();
            break;
          }
          case 42: {
            if (complianceReportRun_ == null) {
              ComplianceReportRun = new global::Enterprise.ComplianceReportRun();
            }
            input.ReadMessage(ComplianceReportRun);
            break;
          }
          case 50: {
            userProfiles_.AddEntriesFrom(input, _repeated_userProfiles_codec);
            break;
          }
          case 58: {
            auditTeams_.AddEntriesFrom(input, _repeated_auditTeams_codec);
            break;
          }
          case 66: {
            auditRecords_.AddEntriesFrom(input, _repeated_auditRecords_codec);
            break;
          }
          case 74: {
            userRecords_.AddEntriesFrom(input, _repeated_userRecords_codec);
            break;
          }
          case 82: {
            sharedFolderRecords_.AddEntriesFrom(input, _repeated_sharedFolderRecords_codec);
            break;
          }
          case 90: {
            sharedFolderUsers_.AddEntriesFrom(input, _repeated_sharedFolderUsers_codec);
            break;
          }
          case 98: {
            sharedFolderTeams_.AddEntriesFrom(input, _repeated_sharedFolderTeams_codec);
            break;
          }
          case 106: {
            auditTeamUsers_.AddEntriesFrom(input, _repeated_auditTeamUsers_codec);
            break;
          }
          case 114: {
            auditRoles_.AddEntriesFrom(input, _repeated_auditRoles_codec);
            break;
          }
          case 122: {
            linkedRecords_.AddEntriesFrom(input, _repeated_linkedRecords_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditRecord : pb::IMessage<AuditRecord> {
    private static readonly pb::MessageParser<AuditRecord> _parser = new pb::MessageParser<AuditRecord>(() => new AuditRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditRecord(AuditRecord other) : this() {
      recordUid_ = other.recordUid_;
      auditData_ = other.auditData_;
      hasAttachments_ = other.hasAttachments_;
      inTrash_ = other.inTrash_;
      treeLeft_ = other.treeLeft_;
      treeRight_ = other.treeRight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditRecord Clone() {
      return new AuditRecord(this);
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auditData" field.</summary>
    public const int AuditDataFieldNumber = 2;
    private pb::ByteString auditData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AuditData {
      get { return auditData_; }
      set {
        auditData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hasAttachments" field.</summary>
    public const int HasAttachmentsFieldNumber = 3;
    private bool hasAttachments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttachments {
      get { return hasAttachments_; }
      set {
        hasAttachments_ = value;
      }
    }

    /// <summary>Field number for the "inTrash" field.</summary>
    public const int InTrashFieldNumber = 4;
    private bool inTrash_;
    /// <summary>
    ///  true if this record is in its owner's trash/"deleted items".  Not set on older saved reports.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InTrash {
      get { return inTrash_; }
      set {
        inTrash_ = value;
      }
    }

    /// <summary>Field number for the "treeLeft" field.</summary>
    public const int TreeLeftFieldNumber = 5;
    private int treeLeft_;
    /// <summary>
    ///  record's owner's node.  Not set in older saved reports.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreeLeft {
      get { return treeLeft_; }
      set {
        treeLeft_ = value;
      }
    }

    /// <summary>Field number for the "treeRight" field.</summary>
    public const int TreeRightFieldNumber = 6;
    private int treeRight_;
    /// <summary>
    ///  record's owner's node.  Not set in older saved reports.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreeRight {
      get { return treeRight_; }
      set {
        treeRight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordUid != other.RecordUid) return false;
      if (AuditData != other.AuditData) return false;
      if (HasAttachments != other.HasAttachments) return false;
      if (InTrash != other.InTrash) return false;
      if (TreeLeft != other.TreeLeft) return false;
      if (TreeRight != other.TreeRight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (AuditData.Length != 0) hash ^= AuditData.GetHashCode();
      if (HasAttachments != false) hash ^= HasAttachments.GetHashCode();
      if (InTrash != false) hash ^= InTrash.GetHashCode();
      if (TreeLeft != 0) hash ^= TreeLeft.GetHashCode();
      if (TreeRight != 0) hash ^= TreeRight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordUid);
      }
      if (AuditData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(AuditData);
      }
      if (HasAttachments != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasAttachments);
      }
      if (InTrash != false) {
        output.WriteRawTag(32);
        output.WriteBool(InTrash);
      }
      if (TreeLeft != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TreeLeft);
      }
      if (TreeRight != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TreeRight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (AuditData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AuditData);
      }
      if (HasAttachments != false) {
        size += 1 + 1;
      }
      if (InTrash != false) {
        size += 1 + 1;
      }
      if (TreeLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TreeLeft);
      }
      if (TreeRight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TreeRight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditRecord other) {
      if (other == null) {
        return;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.AuditData.Length != 0) {
        AuditData = other.AuditData;
      }
      if (other.HasAttachments != false) {
        HasAttachments = other.HasAttachments;
      }
      if (other.InTrash != false) {
        InTrash = other.InTrash;
      }
      if (other.TreeLeft != 0) {
        TreeLeft = other.TreeLeft;
      }
      if (other.TreeRight != 0) {
        TreeRight = other.TreeRight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 18: {
            AuditData = input.ReadBytes();
            break;
          }
          case 24: {
            HasAttachments = input.ReadBool();
            break;
          }
          case 32: {
            InTrash = input.ReadBool();
            break;
          }
          case 40: {
            TreeLeft = input.ReadInt32();
            break;
          }
          case 48: {
            TreeRight = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditRole : pb::IMessage<AuditRole> {
    private static readonly pb::MessageParser<AuditRole> _parser = new pb::MessageParser<AuditRole>(() => new AuditRole());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditRole(AuditRole other) : this() {
      roleId_ = other.roleId_;
      encryptedData_ = other.encryptedData_;
      restrictShareOutsideEnterprise_ = other.restrictShareOutsideEnterprise_;
      restrictShareAll_ = other.restrictShareAll_;
      restrictShareOfAttachments_ = other.restrictShareOfAttachments_;
      restrictMaskPasswordsWhileEditing_ = other.restrictMaskPasswordsWhileEditing_;
      roleNodeManagements_ = other.roleNodeManagements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditRole Clone() {
      return new AuditRole(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedData" field.</summary>
    public const int EncryptedDataFieldNumber = 2;
    private pb::ByteString encryptedData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedData {
      get { return encryptedData_; }
      set {
        encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "restrictShareOutsideEnterprise" field.</summary>
    public const int RestrictShareOutsideEnterpriseFieldNumber = 3;
    private bool restrictShareOutsideEnterprise_;
    /// <summary>
    ///True means cannot share records to others not in the same enterprise
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictShareOutsideEnterprise {
      get { return restrictShareOutsideEnterprise_; }
      set {
        restrictShareOutsideEnterprise_ = value;
      }
    }

    /// <summary>Field number for the "restrictShareAll" field.</summary>
    public const int RestrictShareAllFieldNumber = 4;
    private bool restrictShareAll_;
    /// <summary>
    ///True means can't share records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictShareAll {
      get { return restrictShareAll_; }
      set {
        restrictShareAll_ = value;
      }
    }

    /// <summary>Field number for the "restrictShareOfAttachments" field.</summary>
    public const int RestrictShareOfAttachmentsFieldNumber = 5;
    private bool restrictShareOfAttachments_;
    /// <summary>
    ///True means can't share records with attachments
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictShareOfAttachments {
      get { return restrictShareOfAttachments_; }
      set {
        restrictShareOfAttachments_ = value;
      }
    }

    /// <summary>Field number for the "restrictMaskPasswordsWhileEditing" field.</summary>
    public const int RestrictMaskPasswordsWhileEditingFieldNumber = 6;
    private bool restrictMaskPasswordsWhileEditing_;
    /// <summary>
    ///True means you can't even see the password when you are editing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictMaskPasswordsWhileEditing {
      get { return restrictMaskPasswordsWhileEditing_; }
      set {
        restrictMaskPasswordsWhileEditing_ = value;
      }
    }

    /// <summary>Field number for the "roleNodeManagements" field.</summary>
    public const int RoleNodeManagementsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Enterprise.RoleNodeManagement> _repeated_roleNodeManagements_codec
        = pb::FieldCodec.ForMessage(58, global::Enterprise.RoleNodeManagement.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.RoleNodeManagement> roleNodeManagements_ = new pbc::RepeatedField<global::Enterprise.RoleNodeManagement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.RoleNodeManagement> RoleNodeManagements {
      get { return roleNodeManagements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (EncryptedData != other.EncryptedData) return false;
      if (RestrictShareOutsideEnterprise != other.RestrictShareOutsideEnterprise) return false;
      if (RestrictShareAll != other.RestrictShareAll) return false;
      if (RestrictShareOfAttachments != other.RestrictShareOfAttachments) return false;
      if (RestrictMaskPasswordsWhileEditing != other.RestrictMaskPasswordsWhileEditing) return false;
      if(!roleNodeManagements_.Equals(other.roleNodeManagements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (EncryptedData.Length != 0) hash ^= EncryptedData.GetHashCode();
      if (RestrictShareOutsideEnterprise != false) hash ^= RestrictShareOutsideEnterprise.GetHashCode();
      if (RestrictShareAll != false) hash ^= RestrictShareAll.GetHashCode();
      if (RestrictShareOfAttachments != false) hash ^= RestrictShareOfAttachments.GetHashCode();
      if (RestrictMaskPasswordsWhileEditing != false) hash ^= RestrictMaskPasswordsWhileEditing.GetHashCode();
      hash ^= roleNodeManagements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (EncryptedData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedData);
      }
      if (RestrictShareOutsideEnterprise != false) {
        output.WriteRawTag(24);
        output.WriteBool(RestrictShareOutsideEnterprise);
      }
      if (RestrictShareAll != false) {
        output.WriteRawTag(32);
        output.WriteBool(RestrictShareAll);
      }
      if (RestrictShareOfAttachments != false) {
        output.WriteRawTag(40);
        output.WriteBool(RestrictShareOfAttachments);
      }
      if (RestrictMaskPasswordsWhileEditing != false) {
        output.WriteRawTag(48);
        output.WriteBool(RestrictMaskPasswordsWhileEditing);
      }
      roleNodeManagements_.WriteTo(output, _repeated_roleNodeManagements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (EncryptedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedData);
      }
      if (RestrictShareOutsideEnterprise != false) {
        size += 1 + 1;
      }
      if (RestrictShareAll != false) {
        size += 1 + 1;
      }
      if (RestrictShareOfAttachments != false) {
        size += 1 + 1;
      }
      if (RestrictMaskPasswordsWhileEditing != false) {
        size += 1 + 1;
      }
      size += roleNodeManagements_.CalculateSize(_repeated_roleNodeManagements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditRole other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.EncryptedData.Length != 0) {
        EncryptedData = other.EncryptedData;
      }
      if (other.RestrictShareOutsideEnterprise != false) {
        RestrictShareOutsideEnterprise = other.RestrictShareOutsideEnterprise;
      }
      if (other.RestrictShareAll != false) {
        RestrictShareAll = other.RestrictShareAll;
      }
      if (other.RestrictShareOfAttachments != false) {
        RestrictShareOfAttachments = other.RestrictShareOfAttachments;
      }
      if (other.RestrictMaskPasswordsWhileEditing != false) {
        RestrictMaskPasswordsWhileEditing = other.RestrictMaskPasswordsWhileEditing;
      }
      roleNodeManagements_.Add(other.roleNodeManagements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            EncryptedData = input.ReadBytes();
            break;
          }
          case 24: {
            RestrictShareOutsideEnterprise = input.ReadBool();
            break;
          }
          case 32: {
            RestrictShareAll = input.ReadBool();
            break;
          }
          case 40: {
            RestrictShareOfAttachments = input.ReadBool();
            break;
          }
          case 48: {
            RestrictMaskPasswordsWhileEditing = input.ReadBool();
            break;
          }
          case 58: {
            roleNodeManagements_.AddEntriesFrom(input, _repeated_roleNodeManagements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleNodeManagement : pb::IMessage<RoleNodeManagement> {
    private static readonly pb::MessageParser<RoleNodeManagement> _parser = new pb::MessageParser<RoleNodeManagement>(() => new RoleNodeManagement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleNodeManagement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleNodeManagement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleNodeManagement(RoleNodeManagement other) : this() {
      treeLeft_ = other.treeLeft_;
      treeRight_ = other.treeRight_;
      cascade_ = other.cascade_;
      privileges_ = other.privileges_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleNodeManagement Clone() {
      return new RoleNodeManagement(this);
    }

    /// <summary>Field number for the "treeLeft" field.</summary>
    public const int TreeLeftFieldNumber = 1;
    private int treeLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreeLeft {
      get { return treeLeft_; }
      set {
        treeLeft_ = value;
      }
    }

    /// <summary>Field number for the "treeRight" field.</summary>
    public const int TreeRightFieldNumber = 2;
    private int treeRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreeRight {
      get { return treeRight_; }
      set {
        treeRight_ = value;
      }
    }

    /// <summary>Field number for the "cascade" field.</summary>
    public const int CascadeFieldNumber = 3;
    private bool cascade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cascade {
      get { return cascade_; }
      set {
        cascade_ = value;
      }
    }

    /// <summary>Field number for the "privileges" field.</summary>
    public const int PrivilegesFieldNumber = 4;
    private int privileges_;
    /// <summary>
    ///  bit field; 1 is SHARING_ADMINISTRATOR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Privileges {
      get { return privileges_; }
      set {
        privileges_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleNodeManagement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleNodeManagement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TreeLeft != other.TreeLeft) return false;
      if (TreeRight != other.TreeRight) return false;
      if (Cascade != other.Cascade) return false;
      if (Privileges != other.Privileges) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TreeLeft != 0) hash ^= TreeLeft.GetHashCode();
      if (TreeRight != 0) hash ^= TreeRight.GetHashCode();
      if (Cascade != false) hash ^= Cascade.GetHashCode();
      if (Privileges != 0) hash ^= Privileges.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TreeLeft != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TreeLeft);
      }
      if (TreeRight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TreeRight);
      }
      if (Cascade != false) {
        output.WriteRawTag(24);
        output.WriteBool(Cascade);
      }
      if (Privileges != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Privileges);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TreeLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TreeLeft);
      }
      if (TreeRight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TreeRight);
      }
      if (Cascade != false) {
        size += 1 + 1;
      }
      if (Privileges != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Privileges);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleNodeManagement other) {
      if (other == null) {
        return;
      }
      if (other.TreeLeft != 0) {
        TreeLeft = other.TreeLeft;
      }
      if (other.TreeRight != 0) {
        TreeRight = other.TreeRight;
      }
      if (other.Cascade != false) {
        Cascade = other.Cascade;
      }
      if (other.Privileges != 0) {
        Privileges = other.Privileges;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TreeLeft = input.ReadInt32();
            break;
          }
          case 16: {
            TreeRight = input.ReadInt32();
            break;
          }
          case 24: {
            Cascade = input.ReadBool();
            break;
          }
          case 32: {
            Privileges = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserProfile : pb::IMessage<UserProfile> {
    private static readonly pb::MessageParser<UserProfile> _parser = new pb::MessageParser<UserProfile>(() => new UserProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserProfile(UserProfile other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      fullName_ = other.fullName_;
      jobTitle_ = other.jobTitle_;
      email_ = other.email_;
      roleIds_ = other.roleIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserProfile Clone() {
      return new UserProfile(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "fullName" field.</summary>
    public const int FullNameFieldNumber = 2;
    private string fullName_ = "";
    /// <summary>
    ///The user's full name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jobTitle" field.</summary>
    public const int JobTitleFieldNumber = 3;
    private string jobTitle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobTitle {
      get { return jobTitle_; }
      set {
        jobTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleIds" field.</summary>
    public const int RoleIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_roleIds_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> roleIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RoleIds {
      get { return roleIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (FullName != other.FullName) return false;
      if (JobTitle != other.JobTitle) return false;
      if (Email != other.Email) return false;
      if(!roleIds_.Equals(other.roleIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      if (JobTitle.Length != 0) hash ^= JobTitle.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      hash ^= roleIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FullName);
      }
      if (JobTitle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(JobTitle);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      roleIds_.WriteTo(output, _repeated_roleIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      if (JobTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobTitle);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      size += roleIds_.CalculateSize(_repeated_roleIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserProfile other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
      if (other.JobTitle.Length != 0) {
        JobTitle = other.JobTitle;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      roleIds_.Add(other.roleIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            FullName = input.ReadString();
            break;
          }
          case 26: {
            JobTitle = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            roleIds_.AddEntriesFrom(input, _repeated_roleIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordPermission : pb::IMessage<RecordPermission> {
    private static readonly pb::MessageParser<RecordPermission> _parser = new pb::MessageParser<RecordPermission>(() => new RecordPermission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordPermission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordPermission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordPermission(RecordPermission other) : this() {
      recordUid_ = other.recordUid_;
      permissionBits_ = other.permissionBits_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordPermission Clone() {
      return new RecordPermission(this);
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permissionBits" field.</summary>
    public const int PermissionBitsFieldNumber = 2;
    private int permissionBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PermissionBits {
      get { return permissionBits_; }
      set {
        permissionBits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordPermission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordPermission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordUid != other.RecordUid) return false;
      if (PermissionBits != other.PermissionBits) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (PermissionBits != 0) hash ^= PermissionBits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordUid);
      }
      if (PermissionBits != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PermissionBits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (PermissionBits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PermissionBits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordPermission other) {
      if (other == null) {
        return;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.PermissionBits != 0) {
        PermissionBits = other.PermissionBits;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 16: {
            PermissionBits = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserRecord : pb::IMessage<UserRecord> {
    private static readonly pb::MessageParser<UserRecord> _parser = new pb::MessageParser<UserRecord>(() => new UserRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRecord(UserRecord other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      recordPermissions_ = other.recordPermissions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRecord Clone() {
      return new UserRecord(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "recordPermissions" field.</summary>
    public const int RecordPermissionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Enterprise.RecordPermission> _repeated_recordPermissions_codec
        = pb::FieldCodec.ForMessage(18, global::Enterprise.RecordPermission.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.RecordPermission> recordPermissions_ = new pbc::RepeatedField<global::Enterprise.RecordPermission>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.RecordPermission> RecordPermissions {
      get { return recordPermissions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if(!recordPermissions_.Equals(other.recordPermissions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      hash ^= recordPermissions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      recordPermissions_.WriteTo(output, _repeated_recordPermissions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      size += recordPermissions_.CalculateSize(_repeated_recordPermissions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserRecord other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      recordPermissions_.Add(other.recordPermissions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            recordPermissions_.AddEntriesFrom(input, _repeated_recordPermissions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditTeam : pb::IMessage<AuditTeam> {
    private static readonly pb::MessageParser<AuditTeam> _parser = new pb::MessageParser<AuditTeam>(() => new AuditTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditTeam(AuditTeam other) : this() {
      teamUid_ = other.teamUid_;
      teamName_ = other.teamName_;
      restrictEdit_ = other.restrictEdit_;
      restrictShare_ = other.restrictShare_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditTeam Clone() {
      return new AuditTeam(this);
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 1;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamName" field.</summary>
    public const int TeamNameFieldNumber = 2;
    private string teamName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "restrictEdit" field.</summary>
    public const int RestrictEditFieldNumber = 3;
    private bool restrictEdit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictEdit {
      get { return restrictEdit_; }
      set {
        restrictEdit_ = value;
      }
    }

    /// <summary>Field number for the "restrictShare" field.</summary>
    public const int RestrictShareFieldNumber = 4;
    private bool restrictShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictShare {
      get { return restrictShare_; }
      set {
        restrictShare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamUid != other.TeamUid) return false;
      if (TeamName != other.TeamName) return false;
      if (RestrictEdit != other.RestrictEdit) return false;
      if (RestrictShare != other.RestrictShare) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
      if (RestrictEdit != false) hash ^= RestrictEdit.GetHashCode();
      if (RestrictShare != false) hash ^= RestrictShare.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TeamName);
      }
      if (RestrictEdit != false) {
        output.WriteRawTag(24);
        output.WriteBool(RestrictEdit);
      }
      if (RestrictShare != false) {
        output.WriteRawTag(32);
        output.WriteBool(RestrictShare);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (RestrictEdit != false) {
        size += 1 + 1;
      }
      if (RestrictShare != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditTeam other) {
      if (other == null) {
        return;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      if (other.TeamName.Length != 0) {
        TeamName = other.TeamName;
      }
      if (other.RestrictEdit != false) {
        RestrictEdit = other.RestrictEdit;
      }
      if (other.RestrictShare != false) {
        RestrictShare = other.RestrictShare;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 18: {
            TeamName = input.ReadString();
            break;
          }
          case 24: {
            RestrictEdit = input.ReadBool();
            break;
          }
          case 32: {
            RestrictShare = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditTeamUser : pb::IMessage<AuditTeamUser> {
    private static readonly pb::MessageParser<AuditTeamUser> _parser = new pb::MessageParser<AuditTeamUser>(() => new AuditTeamUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditTeamUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditTeamUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditTeamUser(AuditTeamUser other) : this() {
      teamUid_ = other.teamUid_;
      enterpriseUserIds_ = other.enterpriseUserIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditTeamUser Clone() {
      return new AuditTeamUser(this);
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 1;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterpriseUserIds" field.</summary>
    public const int EnterpriseUserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_enterpriseUserIds_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> enterpriseUserIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> EnterpriseUserIds {
      get { return enterpriseUserIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditTeamUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditTeamUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamUid != other.TeamUid) return false;
      if(!enterpriseUserIds_.Equals(other.enterpriseUserIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      hash ^= enterpriseUserIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      enterpriseUserIds_.WriteTo(output, _repeated_enterpriseUserIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      size += enterpriseUserIds_.CalculateSize(_repeated_enterpriseUserIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditTeamUser other) {
      if (other == null) {
        return;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      enterpriseUserIds_.Add(other.enterpriseUserIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 18:
          case 16: {
            enterpriseUserIds_.AddEntriesFrom(input, _repeated_enterpriseUserIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharedFolderRecord : pb::IMessage<SharedFolderRecord> {
    private static readonly pb::MessageParser<SharedFolderRecord> _parser = new pb::MessageParser<SharedFolderRecord>(() => new SharedFolderRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedFolderRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecord(SharedFolderRecord other) : this() {
      sharedFolderUid_ = other.sharedFolderUid_;
      recordPermissions_ = other.recordPermissions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecord Clone() {
      return new SharedFolderRecord(this);
    }

    /// <summary>Field number for the "sharedFolderUid" field.</summary>
    public const int SharedFolderUidFieldNumber = 1;
    private pb::ByteString sharedFolderUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SharedFolderUid {
      get { return sharedFolderUid_; }
      set {
        sharedFolderUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recordPermissions" field.</summary>
    public const int RecordPermissionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Enterprise.RecordPermission> _repeated_recordPermissions_codec
        = pb::FieldCodec.ForMessage(18, global::Enterprise.RecordPermission.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.RecordPermission> recordPermissions_ = new pbc::RepeatedField<global::Enterprise.RecordPermission>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.RecordPermission> RecordPermissions {
      get { return recordPermissions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedFolderRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedFolderRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SharedFolderUid != other.SharedFolderUid) return false;
      if(!recordPermissions_.Equals(other.recordPermissions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SharedFolderUid.Length != 0) hash ^= SharedFolderUid.GetHashCode();
      hash ^= recordPermissions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SharedFolderUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SharedFolderUid);
      }
      recordPermissions_.WriteTo(output, _repeated_recordPermissions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SharedFolderUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SharedFolderUid);
      }
      size += recordPermissions_.CalculateSize(_repeated_recordPermissions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedFolderRecord other) {
      if (other == null) {
        return;
      }
      if (other.SharedFolderUid.Length != 0) {
        SharedFolderUid = other.SharedFolderUid;
      }
      recordPermissions_.Add(other.recordPermissions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SharedFolderUid = input.ReadBytes();
            break;
          }
          case 18: {
            recordPermissions_.AddEntriesFrom(input, _repeated_recordPermissions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharedFolderUser : pb::IMessage<SharedFolderUser> {
    private static readonly pb::MessageParser<SharedFolderUser> _parser = new pb::MessageParser<SharedFolderUser>(() => new SharedFolderUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedFolderUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderUser(SharedFolderUser other) : this() {
      sharedFolderUid_ = other.sharedFolderUid_;
      enterpriseUserIds_ = other.enterpriseUserIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderUser Clone() {
      return new SharedFolderUser(this);
    }

    /// <summary>Field number for the "sharedFolderUid" field.</summary>
    public const int SharedFolderUidFieldNumber = 1;
    private pb::ByteString sharedFolderUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SharedFolderUid {
      get { return sharedFolderUid_; }
      set {
        sharedFolderUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterpriseUserIds" field.</summary>
    public const int EnterpriseUserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_enterpriseUserIds_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> enterpriseUserIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> EnterpriseUserIds {
      get { return enterpriseUserIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedFolderUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedFolderUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SharedFolderUid != other.SharedFolderUid) return false;
      if(!enterpriseUserIds_.Equals(other.enterpriseUserIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SharedFolderUid.Length != 0) hash ^= SharedFolderUid.GetHashCode();
      hash ^= enterpriseUserIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SharedFolderUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SharedFolderUid);
      }
      enterpriseUserIds_.WriteTo(output, _repeated_enterpriseUserIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SharedFolderUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SharedFolderUid);
      }
      size += enterpriseUserIds_.CalculateSize(_repeated_enterpriseUserIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedFolderUser other) {
      if (other == null) {
        return;
      }
      if (other.SharedFolderUid.Length != 0) {
        SharedFolderUid = other.SharedFolderUid;
      }
      enterpriseUserIds_.Add(other.enterpriseUserIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SharedFolderUid = input.ReadBytes();
            break;
          }
          case 18:
          case 16: {
            enterpriseUserIds_.AddEntriesFrom(input, _repeated_enterpriseUserIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharedFolderTeam : pb::IMessage<SharedFolderTeam> {
    private static readonly pb::MessageParser<SharedFolderTeam> _parser = new pb::MessageParser<SharedFolderTeam>(() => new SharedFolderTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedFolderTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderTeam(SharedFolderTeam other) : this() {
      sharedFolderUid_ = other.sharedFolderUid_;
      teamUids_ = other.teamUids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderTeam Clone() {
      return new SharedFolderTeam(this);
    }

    /// <summary>Field number for the "sharedFolderUid" field.</summary>
    public const int SharedFolderUidFieldNumber = 1;
    private pb::ByteString sharedFolderUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SharedFolderUid {
      get { return sharedFolderUid_; }
      set {
        sharedFolderUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamUids" field.</summary>
    public const int TeamUidsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_teamUids_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> teamUids_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> TeamUids {
      get { return teamUids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedFolderTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedFolderTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SharedFolderUid != other.SharedFolderUid) return false;
      if(!teamUids_.Equals(other.teamUids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SharedFolderUid.Length != 0) hash ^= SharedFolderUid.GetHashCode();
      hash ^= teamUids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SharedFolderUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SharedFolderUid);
      }
      teamUids_.WriteTo(output, _repeated_teamUids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SharedFolderUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SharedFolderUid);
      }
      size += teamUids_.CalculateSize(_repeated_teamUids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedFolderTeam other) {
      if (other == null) {
        return;
      }
      if (other.SharedFolderUid.Length != 0) {
        SharedFolderUid = other.SharedFolderUid;
      }
      teamUids_.Add(other.teamUids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SharedFolderUid = input.ReadBytes();
            break;
          }
          case 18: {
            teamUids_.AddEntriesFrom(input, _repeated_teamUids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetComplianceReportRequest : pb::IMessage<GetComplianceReportRequest> {
    private static readonly pb::MessageParser<GetComplianceReportRequest> _parser = new pb::MessageParser<GetComplianceReportRequest>(() => new GetComplianceReportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetComplianceReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceReportRequest(GetComplianceReportRequest other) : this() {
      reportUid_ = other.reportUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceReportRequest Clone() {
      return new GetComplianceReportRequest(this);
    }

    /// <summary>Field number for the "reportUid" field.</summary>
    public const int ReportUidFieldNumber = 1;
    private pb::ByteString reportUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReportUid {
      get { return reportUid_; }
      set {
        reportUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetComplianceReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetComplianceReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReportUid != other.ReportUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReportUid.Length != 0) hash ^= ReportUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ReportUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReportUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetComplianceReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReportUid.Length != 0) {
        ReportUid = other.ReportUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReportUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetComplianceReportResponse : pb::IMessage<GetComplianceReportResponse> {
    private static readonly pb::MessageParser<GetComplianceReportResponse> _parser = new pb::MessageParser<GetComplianceReportResponse>(() => new GetComplianceReportResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetComplianceReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceReportResponse(GetComplianceReportResponse other) : this() {
      downloadUrl_ = other.downloadUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetComplianceReportResponse Clone() {
      return new GetComplianceReportResponse(this);
    }

    /// <summary>Field number for the "downloadUrl" field.</summary>
    public const int DownloadUrlFieldNumber = 1;
    private string downloadUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DownloadUrl {
      get { return downloadUrl_; }
      set {
        downloadUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetComplianceReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetComplianceReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DownloadUrl != other.DownloadUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DownloadUrl.Length != 0) hash ^= DownloadUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DownloadUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DownloadUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DownloadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DownloadUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetComplianceReportResponse other) {
      if (other == null) {
        return;
      }
      if (other.DownloadUrl.Length != 0) {
        DownloadUrl = other.DownloadUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DownloadUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComplianceReportCriteriaRequest : pb::IMessage<ComplianceReportCriteriaRequest> {
    private static readonly pb::MessageParser<ComplianceReportCriteriaRequest> _parser = new pb::MessageParser<ComplianceReportCriteriaRequest>(() => new ComplianceReportCriteriaRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComplianceReportCriteriaRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportCriteriaRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportCriteriaRequest(ComplianceReportCriteriaRequest other) : this() {
      criteriaUid_ = other.criteriaUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplianceReportCriteriaRequest Clone() {
      return new ComplianceReportCriteriaRequest(this);
    }

    /// <summary>Field number for the "criteriaUid" field.</summary>
    public const int CriteriaUidFieldNumber = 1;
    private pb::ByteString criteriaUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CriteriaUid {
      get { return criteriaUid_; }
      set {
        criteriaUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComplianceReportCriteriaRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComplianceReportCriteriaRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CriteriaUid != other.CriteriaUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CriteriaUid.Length != 0) hash ^= CriteriaUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CriteriaUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CriteriaUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CriteriaUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CriteriaUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComplianceReportCriteriaRequest other) {
      if (other == null) {
        return;
      }
      if (other.CriteriaUid.Length != 0) {
        CriteriaUid = other.CriteriaUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CriteriaUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SaveComplianceReportCriteriaResponse : pb::IMessage<SaveComplianceReportCriteriaResponse> {
    private static readonly pb::MessageParser<SaveComplianceReportCriteriaResponse> _parser = new pb::MessageParser<SaveComplianceReportCriteriaResponse>(() => new SaveComplianceReportCriteriaResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveComplianceReportCriteriaResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveComplianceReportCriteriaResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveComplianceReportCriteriaResponse(SaveComplianceReportCriteriaResponse other) : this() {
      criteriaUid_ = other.criteriaUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveComplianceReportCriteriaResponse Clone() {
      return new SaveComplianceReportCriteriaResponse(this);
    }

    /// <summary>Field number for the "criteriaUid" field.</summary>
    public const int CriteriaUidFieldNumber = 1;
    private pb::ByteString criteriaUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CriteriaUid {
      get { return criteriaUid_; }
      set {
        criteriaUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveComplianceReportCriteriaResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveComplianceReportCriteriaResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CriteriaUid != other.CriteriaUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CriteriaUid.Length != 0) hash ^= CriteriaUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CriteriaUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CriteriaUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CriteriaUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CriteriaUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveComplianceReportCriteriaResponse other) {
      if (other == null) {
        return;
      }
      if (other.CriteriaUid.Length != 0) {
        CriteriaUid = other.CriteriaUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CriteriaUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LinkedRecord : pb::IMessage<LinkedRecord> {
    private static readonly pb::MessageParser<LinkedRecord> _parser = new pb::MessageParser<LinkedRecord>(() => new LinkedRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkedRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkedRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkedRecord(LinkedRecord other) : this() {
      ownerUid_ = other.ownerUid_;
      recordUids_ = other.recordUids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkedRecord Clone() {
      return new LinkedRecord(this);
    }

    /// <summary>Field number for the "ownerUid" field.</summary>
    public const int OwnerUidFieldNumber = 1;
    private pb::ByteString ownerUid_ = pb::ByteString.Empty;
    /// <summary>
    ///  This is the owner *record* UID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerUid {
      get { return ownerUid_; }
      set {
        ownerUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recordUids" field.</summary>
    public const int RecordUidsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_recordUids_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> recordUids_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///  A child record may have multiple parent/"owner" records, but will not itself be an owner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RecordUids {
      get { return recordUids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LinkedRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LinkedRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerUid != other.OwnerUid) return false;
      if(!recordUids_.Equals(other.recordUids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerUid.Length != 0) hash ^= OwnerUid.GetHashCode();
      hash ^= recordUids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OwnerUid);
      }
      recordUids_.WriteTo(output, _repeated_recordUids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerUid);
      }
      size += recordUids_.CalculateSize(_repeated_recordUids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LinkedRecord other) {
      if (other == null) {
        return;
      }
      if (other.OwnerUid.Length != 0) {
        OwnerUid = other.OwnerUid;
      }
      recordUids_.Add(other.recordUids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerUid = input.ReadBytes();
            break;
          }
          case 18: {
            recordUids_.AddEntriesFrom(input, _repeated_recordUids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSharingAdminsRequest : pb::IMessage<GetSharingAdminsRequest> {
    private static readonly pb::MessageParser<GetSharingAdminsRequest> _parser = new pb::MessageParser<GetSharingAdminsRequest>(() => new GetSharingAdminsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSharingAdminsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSharingAdminsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSharingAdminsRequest(GetSharingAdminsRequest other) : this() {
      sharedFolderUid_ = other.sharedFolderUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSharingAdminsRequest Clone() {
      return new GetSharingAdminsRequest(this);
    }

    /// <summary>Field number for the "sharedFolderUid" field.</summary>
    public const int SharedFolderUidFieldNumber = 1;
    private pb::ByteString sharedFolderUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SharedFolderUid {
      get { return sharedFolderUid_; }
      set {
        sharedFolderUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSharingAdminsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSharingAdminsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SharedFolderUid != other.SharedFolderUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SharedFolderUid.Length != 0) hash ^= SharedFolderUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SharedFolderUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SharedFolderUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SharedFolderUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SharedFolderUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSharingAdminsRequest other) {
      if (other == null) {
        return;
      }
      if (other.SharedFolderUid.Length != 0) {
        SharedFolderUid = other.SharedFolderUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SharedFolderUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSharingAdminsResponse : pb::IMessage<GetSharingAdminsResponse> {
    private static readonly pb::MessageParser<GetSharingAdminsResponse> _parser = new pb::MessageParser<GetSharingAdminsResponse>(() => new GetSharingAdminsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSharingAdminsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSharingAdminsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSharingAdminsResponse(GetSharingAdminsResponse other) : this() {
      sharingAdmins_ = other.sharingAdmins_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSharingAdminsResponse Clone() {
      return new GetSharingAdminsResponse(this);
    }

    /// <summary>Field number for the "sharingAdmins" field.</summary>
    public const int SharingAdminsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Enterprise.SharingAdmin> _repeated_sharingAdmins_codec
        = pb::FieldCodec.ForMessage(10, global::Enterprise.SharingAdmin.Parser);
    private readonly pbc::RepeatedField<global::Enterprise.SharingAdmin> sharingAdmins_ = new pbc::RepeatedField<global::Enterprise.SharingAdmin>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Enterprise.SharingAdmin> SharingAdmins {
      get { return sharingAdmins_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSharingAdminsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSharingAdminsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sharingAdmins_.Equals(other.sharingAdmins_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sharingAdmins_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sharingAdmins_.WriteTo(output, _repeated_sharingAdmins_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sharingAdmins_.CalculateSize(_repeated_sharingAdmins_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSharingAdminsResponse other) {
      if (other == null) {
        return;
      }
      sharingAdmins_.Add(other.sharingAdmins_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sharingAdmins_.AddEntriesFrom(input, _repeated_sharingAdmins_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharingAdmin : pb::IMessage<SharingAdmin> {
    private static readonly pb::MessageParser<SharingAdmin> _parser = new pb::MessageParser<SharingAdmin>(() => new SharingAdmin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharingAdmin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Enterprise.EnterpriseReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharingAdmin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharingAdmin(SharingAdmin other) : this() {
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharingAdmin Clone() {
      return new SharingAdmin(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharingAdmin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharingAdmin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharingAdmin other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
