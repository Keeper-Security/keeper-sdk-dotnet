// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Audit.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Audit {

  /// <summary>Holder for reflection information generated from Audit.proto</summary>
  public static partial class AuditReflection {

    #region Descriptor
    /// <summary>File descriptor for Audit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuditReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtBdWRpdC5wcm90bxIFQXVkaXQi5QEKCkF1ZGl0RXZlbnQSEQoJb3duZXJU",
            "eXBlGAEgASgFEg8KB293bmVySWQYAiABKAUSEQoJZXZlbnRUaW1lGAMgASgD",
            "EhMKC2V2ZW50VHlwZUlkGAQgASgFEg4KBm5vZGVJZBgFIAEoAxIXCg9jbGll",
            "bnRWZXJzaW9uSWQYBiABKAUSFQoNcmVtb3RlQWRkcmVzcxgHIAEoCRIOCgZ1",
            "c2VySWQYCCABKAUSEAoIdG9Vc2VySWQYCSABKAUSCwoDdWlkGAogASgJEg4K",
            "BnN0YXR1cxgLIAEoCRIMCgR1bml0GAwgASgFQiEKGGNvbS5rZWVwZXJzZWN1",
            "cml0eS5wcm90b0IFQXVkaXRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Audit.AuditEvent), global::Audit.AuditEvent.Parser, new[]{ "OwnerType", "OwnerId", "EventTime", "EventTypeId", "NodeId", "ClientVersionId", "RemoteAddress", "UserId", "ToUserId", "Uid", "Status", "Unit" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AuditEvent : pb::IMessage<AuditEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuditEvent> _parser = new pb::MessageParser<AuditEvent>(() => new AuditEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AuditEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Audit.AuditReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuditEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuditEvent(AuditEvent other) : this() {
      ownerType_ = other.ownerType_;
      ownerId_ = other.ownerId_;
      eventTime_ = other.eventTime_;
      eventTypeId_ = other.eventTypeId_;
      nodeId_ = other.nodeId_;
      clientVersionId_ = other.clientVersionId_;
      remoteAddress_ = other.remoteAddress_;
      userId_ = other.userId_;
      toUserId_ = other.toUserId_;
      uid_ = other.uid_;
      status_ = other.status_;
      unit_ = other.unit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuditEvent Clone() {
      return new AuditEvent(this);
    }

    /// <summary>Field number for the "ownerType" field.</summary>
    public const int OwnerTypeFieldNumber = 1;
    private int ownerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OwnerType {
      get { return ownerType_; }
      set {
        ownerType_ = value;
      }
    }

    /// <summary>Field number for the "ownerId" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private int ownerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    /// <summary>Field number for the "eventTime" field.</summary>
    public const int EventTimeFieldNumber = 3;
    private long eventTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = value;
      }
    }

    /// <summary>Field number for the "eventTypeId" field.</summary>
    public const int EventTypeIdFieldNumber = 4;
    private int eventTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EventTypeId {
      get { return eventTypeId_; }
      set {
        eventTypeId_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 5;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "clientVersionId" field.</summary>
    public const int ClientVersionIdFieldNumber = 6;
    private int clientVersionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ClientVersionId {
      get { return clientVersionId_; }
      set {
        clientVersionId_ = value;
      }
    }

    /// <summary>Field number for the "remoteAddress" field.</summary>
    public const int RemoteAddressFieldNumber = 7;
    private string remoteAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RemoteAddress {
      get { return remoteAddress_; }
      set {
        remoteAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 8;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "toUserId" field.</summary>
    public const int ToUserIdFieldNumber = 9;
    private int toUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 10;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 11;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 12;
    private int unit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AuditEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AuditEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerType != other.OwnerType) return false;
      if (OwnerId != other.OwnerId) return false;
      if (EventTime != other.EventTime) return false;
      if (EventTypeId != other.EventTypeId) return false;
      if (NodeId != other.NodeId) return false;
      if (ClientVersionId != other.ClientVersionId) return false;
      if (RemoteAddress != other.RemoteAddress) return false;
      if (UserId != other.UserId) return false;
      if (ToUserId != other.ToUserId) return false;
      if (Uid != other.Uid) return false;
      if (Status != other.Status) return false;
      if (Unit != other.Unit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerType != 0) hash ^= OwnerType.GetHashCode();
      if (OwnerId != 0) hash ^= OwnerId.GetHashCode();
      if (EventTime != 0L) hash ^= EventTime.GetHashCode();
      if (EventTypeId != 0) hash ^= EventTypeId.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (ClientVersionId != 0) hash ^= ClientVersionId.GetHashCode();
      if (RemoteAddress.Length != 0) hash ^= RemoteAddress.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (ToUserId != 0) hash ^= ToUserId.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Unit != 0) hash ^= Unit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OwnerType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OwnerType);
      }
      if (OwnerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OwnerId);
      }
      if (EventTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EventTime);
      }
      if (EventTypeId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventTypeId);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NodeId);
      }
      if (ClientVersionId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ClientVersionId);
      }
      if (RemoteAddress.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RemoteAddress);
      }
      if (UserId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UserId);
      }
      if (ToUserId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ToUserId);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Uid);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Status);
      }
      if (Unit != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OwnerType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OwnerType);
      }
      if (OwnerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OwnerId);
      }
      if (EventTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EventTime);
      }
      if (EventTypeId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventTypeId);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NodeId);
      }
      if (ClientVersionId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ClientVersionId);
      }
      if (RemoteAddress.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RemoteAddress);
      }
      if (UserId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UserId);
      }
      if (ToUserId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ToUserId);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Uid);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Status);
      }
      if (Unit != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (OwnerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerType);
      }
      if (OwnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerId);
      }
      if (EventTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventTime);
      }
      if (EventTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTypeId);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (ClientVersionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientVersionId);
      }
      if (RemoteAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteAddress);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (ToUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToUserId);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Unit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AuditEvent other) {
      if (other == null) {
        return;
      }
      if (other.OwnerType != 0) {
        OwnerType = other.OwnerType;
      }
      if (other.OwnerId != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.EventTime != 0L) {
        EventTime = other.EventTime;
      }
      if (other.EventTypeId != 0) {
        EventTypeId = other.EventTypeId;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.ClientVersionId != 0) {
        ClientVersionId = other.ClientVersionId;
      }
      if (other.RemoteAddress.Length != 0) {
        RemoteAddress = other.RemoteAddress;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.ToUserId != 0) {
        ToUserId = other.ToUserId;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Unit != 0) {
        Unit = other.Unit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OwnerType = input.ReadInt32();
            break;
          }
          case 16: {
            OwnerId = input.ReadInt32();
            break;
          }
          case 24: {
            EventTime = input.ReadInt64();
            break;
          }
          case 32: {
            EventTypeId = input.ReadInt32();
            break;
          }
          case 40: {
            NodeId = input.ReadInt64();
            break;
          }
          case 48: {
            ClientVersionId = input.ReadInt32();
            break;
          }
          case 58: {
            RemoteAddress = input.ReadString();
            break;
          }
          case 64: {
            UserId = input.ReadInt32();
            break;
          }
          case 72: {
            ToUserId = input.ReadInt32();
            break;
          }
          case 82: {
            Uid = input.ReadString();
            break;
          }
          case 90: {
            Status = input.ReadString();
            break;
          }
          case 96: {
            Unit = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OwnerType = input.ReadInt32();
            break;
          }
          case 16: {
            OwnerId = input.ReadInt32();
            break;
          }
          case 24: {
            EventTime = input.ReadInt64();
            break;
          }
          case 32: {
            EventTypeId = input.ReadInt32();
            break;
          }
          case 40: {
            NodeId = input.ReadInt64();
            break;
          }
          case 48: {
            ClientVersionId = input.ReadInt32();
            break;
          }
          case 58: {
            RemoteAddress = input.ReadString();
            break;
          }
          case 64: {
            UserId = input.ReadInt32();
            break;
          }
          case 72: {
            ToUserId = input.ReadInt32();
            break;
          }
          case 82: {
            Uid = input.ReadString();
            break;
          }
          case 90: {
            Status = input.ReadString();
            break;
          }
          case 96: {
            Unit = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
