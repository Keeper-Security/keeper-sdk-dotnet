// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: automator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Automator {

  /// <summary>Holder for reflection information generated from automator.proto</summary>
  public static partial class AutomatorReflection {

    #region Descriptor
    /// <summary>File descriptor for automator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AutomatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9hdXRvbWF0b3IucHJvdG8SCUF1dG9tYXRvchoOc3NvY2xvdWQucHJvdG8a",
            "EGVudGVycHJpc2UucHJvdG8aDXZlcnNpb24ucHJvdG8ivwIKFUF1dG9tYXRv",
            "clNldHRpbmdWYWx1ZRIRCglzZXR0aW5nSWQYASABKAMSFQoNc2V0dGluZ1R5",
            "cGVJZBgCIAEoBRISCgpzZXR0aW5nVGFnGAMgASgJEhMKC3NldHRpbmdOYW1l",
            "GAQgASgJEhQKDHNldHRpbmdWYWx1ZRgFIAEoCRIkCghkYXRhVHlwZRgGIAEo",
            "DjISLlNzb0Nsb3VkLkRhdGFUeXBlEhQKDGxhc3RNb2RpZmllZBgHIAEoCRIQ",
            "Cghmcm9tRmlsZRgIIAEoCBIRCgllbmNyeXB0ZWQYCSABKAgSDwoHZW5jb2Rl",
            "ZBgKIAEoCBIQCghlZGl0YWJsZRgLIAEoCBISCgp0cmFuc2xhdGVkGAwgASgI",
            "EhMKC3VzZXJWaXNpYmxlGA0gASgIEhAKCHJlcXVpcmVkGA4gASgIIu4CChRB",
            "cHByb3ZlRGV2aWNlUmVxdWVzdBITCgthdXRvbWF0b3JJZBgBIAEoAxJPCh1z",
            "c29BdXRoZW50aWNhdGlvblByb3RvY29sVHlwZRgCIAEoDjIoLkF1dG9tYXRv",
            "ci5Tc29BdXRoZW50aWNhdGlvblByb3RvY29sVHlwZRITCgthdXRoTWVzc2Fn",
            "ZRgDIAEoCRINCgVlbWFpbBgEIAEoCRIXCg9kZXZpY2VQdWJsaWNLZXkYBSAB",
            "KAwSHAoUc2VydmVyRWNjUHVibGljS2V5SWQYBiABKAUSHAoUdXNlckVuY3J5",
            "cHRlZERhdGFLZXkYByABKAwSPgoYdXNlckVuY3J5cHRlZERhdGFLZXlUeXBl",
            "GAggASgOMhwuRW50ZXJwcmlzZS5FbmNyeXB0ZWRLZXlUeXBlEhEKCWlwQWRk",
            "cmVzcxgJIAEoCRIRCglpc1Rlc3RpbmcYCiABKAgSEQoJaXNFY2NPbmx5GAsg",
            "ASgIIqkCCgxTZXR1cFJlcXVlc3QSEwoLYXV0b21hdG9ySWQYASABKAMSHAoU",
            "c2VydmVyRWNjUHVibGljS2V5SWQYAiABKAUSMQoOYXV0b21hdG9yU3RhdGUY",
            "AyABKA4yGS5BdXRvbWF0b3IuQXV0b21hdG9yU3RhdGUSKAogZW5jcnlwdGVk",
            "RW50ZXJwcmlzZVByaXZhdGVFY2NLZXkYBCABKAwSKAogZW5jcnlwdGVkRW50",
            "ZXJwcmlzZVByaXZhdGVSc2FLZXkYBSABKAwSMgoPYXV0b21hdG9yU2tpbGxz",
            "GAYgAygLMhkuQXV0b21hdG9yLkF1dG9tYXRvclNraWxsEhgKEGVuY3J5cHRl",
            "ZFRyZWVLZXkYByABKAwSEQoJaXNFY2NPbmx5GAggASgIIlUKDVN0YXR1c1Jl",
            "cXVlc3QSEwoLYXV0b21hdG9ySWQYASABKAMSHAoUc2VydmVyRWNjUHVibGlj",
            "S2V5SWQYAiABKAUSEQoJaXNFY2NPbmx5GAMgASgIIqMEChFJbml0aWFsaXpl",
            "UmVxdWVzdBITCgthdXRvbWF0b3JJZBgBIAEoAxITCgtpZHBNZXRhZGF0YRgC",
            "IAEoCRIdChVpZHBTaWduaW5nQ2VydGlmaWNhdGUYAyABKAwSEwoLc3NvRW50",
            "aXR5SWQYBCABKAkSFAoMZW1haWxNYXBwaW5nGAUgASgJEhgKEGZpcnN0bmFt",
            "ZU1hcHBpbmcYBiABKAkSFwoPbGFzdG5hbWVNYXBwaW5nGAcgASgJEhAKCGRp",
            "c2FibGVkGAggASgIEhwKFHNlcnZlckVjY1B1YmxpY0tleUlkGAkgASgFEg4K",
            "BmNvbmZpZxgKIAEoDBIPCgdzc2xNb2RlGAsgASgJEhQKDHBlcnNpc3RTdGF0",
            "ZRgMIAEoCBIXCg9kaXNhYmxlU25pQ2hlY2sYDSABKAgSHgoWc3NsQ2VydGlm",
            "aWNhdGVGaWxlbmFtZRgOIAEoCRIiChpzc2xDZXJ0aWZpY2F0ZUZpbGVQYXNz",
            "d29yZBgPIAEoCRIhChlzc2xDZXJ0aWZpY2F0ZUtleVBhc3N3b3JkGBAgASgJ",
            "Eh4KFnNzbENlcnRpZmljYXRlQ29udGVudHMYESABKAwSFQoNYXV0b21hdG9y",
            "SG9zdBgSIAEoCRIVCg1hdXRvbWF0b3JQb3J0GBMgASgJEg8KB2lwQWxsb3cY",
            "FCABKAkSDgoGaXBEZW55GBUgASgJEhEKCWlzRWNjT25seRgWIAEoCCKmAgoW",
            "Tm90SW5pdGlhbGl6ZWRSZXNwb25zZRIgChhhdXRvbWF0b3JUcmFuc21pc3Np",
            "b25LZXkYASABKAwSGgoSc2lnbmluZ0NlcnRpZmljYXRlGAIgASgMEiIKGnNp",
            "Z25pbmdDZXJ0aWZpY2F0ZUZpbGVuYW1lGAMgASgJEiIKGnNpZ25pbmdDZXJ0",
            "aWZpY2F0ZVBhc3N3b3JkGAQgASgJEhoKEnNpZ25pbmdLZXlQYXNzd29yZBgF",
            "IAEoCRI+ChhzaWduaW5nQ2VydGlmaWNhdGVGb3JtYXQYBiABKA4yHC5BdXRv",
            "bWF0b3IuQ2VydGlmaWNhdGVGb3JtYXQSGgoSYXV0b21hdG9yUHVibGljS2V5",
            "GAcgASgMEg4KBmNvbmZpZxgIIAEoDCKlBAoRQXV0b21hdG9yUmVzcG9uc2US",
            "EwoLYXV0b21hdG9ySWQYASABKAMSDwoHZW5hYmxlZBgCIAEoCBIRCgl0aW1l",
            "c3RhbXAYAyABKAMSOQoNYXBwcm92ZURldmljZRgEIAEoCzIgLkF1dG9tYXRv",
            "ci5BcHByb3ZlRGV2aWNlUmVzcG9uc2VIABIrCgZzdGF0dXMYBSABKAsyGS5B",
            "dXRvbWF0b3IuU3RhdHVzUmVzcG9uc2VIABI7Cg5ub3RJbml0aWFsaXplZBgG",
            "IAEoCzIhLkF1dG9tYXRvci5Ob3RJbml0aWFsaXplZFJlc3BvbnNlSAASKQoF",
            "ZXJyb3IYByABKAsyGC5BdXRvbWF0b3IuRXJyb3JSZXNwb25zZUgAEkUKE2Fw",
            "cHJvdmVUZWFtc0ZvclVzZXIYCiABKAsyJi5BdXRvbWF0b3IuQXBwcm92ZVRl",
            "YW1zRm9yVXNlclJlc3BvbnNlSAASNwoMYXBwcm92ZVRlYW1zGAsgASgLMh8u",
            "QXV0b21hdG9yLkFwcHJvdmVUZWFtc1Jlc3BvbnNlSAASMQoOYXV0b21hdG9y",
            "U3RhdGUYCCABKA4yGS5BdXRvbWF0b3IuQXV0b21hdG9yU3RhdGUSHQoVYXV0",
            "b21hdG9yUHVibGljRWNjS2V5GAkgASgMEikKB3ZlcnNpb24YDCABKAsyGC5T",
            "ZW1hbnRpY1ZlcnNpb24uVmVyc2lvbkIKCghyZXNwb25zZSKYAQoVQXBwcm92",
            "ZURldmljZVJlc3BvbnNlEhAKCGFwcHJvdmVkGAEgASgIEhwKFGVuY3J5cHRl",
            "ZFVzZXJEYXRhS2V5GAIgASgMEg8KB21lc3NhZ2UYAyABKAkSPgoYZW5jcnlw",
            "dGVkVXNlckRhdGFLZXlUeXBlGAQgASgOMhwuRW50ZXJwcmlzZS5FbmNyeXB0",
            "ZWRLZXlUeXBlItADCg5TdGF0dXNSZXNwb25zZRITCgtpbml0aWFsaXplZBgB",
            "IAEoCBIYChBlbmFibGVkVGltZXN0YW1wGAIgASgDEhwKFGluaXRpYWxpemVk",
            "VGltZXN0YW1wGAMgASgDEhgKEHVwZGF0ZWRUaW1lc3RhbXAYBCABKAMSHwoX",
            "bnVtYmVyT2ZEZXZpY2VzQXBwcm92ZWQYBSABKAMSHQoVbnVtYmVyT2ZEZXZp",
            "Y2VzRGVuaWVkGAYgASgDEhYKDm51bWJlck9mRXJyb3JzGAcgASgDEiAKGHNz",
            "bENlcnRpZmljYXRlRXhwaXJhdGlvbhgIIAEoAxJBChZub3RJbml0aWFsaXpl",
            "ZFJlc3BvbnNlGAkgASgLMiEuQXV0b21hdG9yLk5vdEluaXRpYWxpemVkUmVz",
            "cG9uc2USDgoGY29uZmlnGAogASgMEicKH251bWJlck9mVGVhbU1lbWJlcnNo",
            "aXBzQXBwcm92ZWQYCyABKAMSJQodbnVtYmVyT2ZUZWFtTWVtYmVyc2hpcHNE",
            "ZW5pZWQYDCABKAMSHQoVbnVtYmVyT2ZUZWFtc0FwcHJvdmVkGA0gASgDEhsK",
            "E251bWJlck9mVGVhbXNEZW5pZWQYDiABKAMiIAoNRXJyb3JSZXNwb25zZRIP",
            "CgdtZXNzYWdlGAEgASgJIlgKCExvZ0VudHJ5EhIKCnNlcnZlclRpbWUYASAB",
            "KAkSFAoMbWVzc2FnZUxldmVsGAIgASgJEhEKCWNvbXBvbmVudBgDIAEoCRIP",
            "CgdtZXNzYWdlGAQgASgJImIKDUFkbWluUmVzcG9uc2USDwoHc3VjY2VzcxgB",
            "IAEoCBIPCgdtZXNzYWdlGAIgASgJEi8KDWF1dG9tYXRvckluZm8YAyADKAsy",
            "GC5BdXRvbWF0b3IuQXV0b21hdG9ySW5mbyLuAgoNQXV0b21hdG9ySW5mbxIT",
            "CgthdXRvbWF0b3JJZBgBIAEoAxIOCgZub2RlSWQYAiABKAMSDAoEbmFtZRgD",
            "IAEoCRIPCgdlbmFibGVkGAQgASgIEgsKA3VybBgFIAEoCRIyCg9hdXRvbWF0",
            "b3JTa2lsbHMYBiADKAsyGS5BdXRvbWF0b3IuQXV0b21hdG9yU2tpbGwSQAoW",
            "YXV0b21hdG9yU2V0dGluZ1ZhbHVlcxgHIAMoCzIgLkF1dG9tYXRvci5BdXRv",
            "bWF0b3JTZXR0aW5nVmFsdWUSKQoGc3RhdHVzGAggASgLMhkuQXV0b21hdG9y",
            "LlN0YXR1c1Jlc3BvbnNlEicKCmxvZ0VudHJpZXMYCSADKAsyEy5BdXRvbWF0",
            "b3IuTG9nRW50cnkSMQoOYXV0b21hdG9yU3RhdGUYCiABKA4yGS5BdXRvbWF0",
            "b3IuQXV0b21hdG9yU3RhdGUSDwoHdmVyc2lvbhgLIAEoCSJlChtBZG1pbkNy",
            "ZWF0ZUF1dG9tYXRvclJlcXVlc3QSDgoGbm9kZUlkGAEgASgDEgwKBG5hbWUY",
            "AiABKAkSKAoFc2tpbGwYAyABKAsyGS5BdXRvbWF0b3IuQXV0b21hdG9yU2tp",
            "bGwiMgobQWRtaW5EZWxldGVBdXRvbWF0b3JSZXF1ZXN0EhMKC2F1dG9tYXRv",
            "cklkGAEgASgDIjEKH0FkbWluR2V0QXV0b21hdG9yc09uTm9kZVJlcXVlc3QS",
            "DgoGbm9kZUlkGAEgASgDIj4KJkFkbWluR2V0QXV0b21hdG9yc0ZvckVudGVy",
            "cHJpc2VSZXF1ZXN0EhQKDGVudGVycHJpc2VJZBgBIAEoBSIvChhBZG1pbkdl",
            "dEF1dG9tYXRvclJlcXVlc3QSEwoLYXV0b21hdG9ySWQYASABKAMiQwobQWRt",
            "aW5FbmFibGVBdXRvbWF0b3JSZXF1ZXN0EhMKC2F1dG9tYXRvcklkGAEgASgD",
            "Eg8KB2VuYWJsZWQYAiABKAgiyAEKGUFkbWluRWRpdEF1dG9tYXRvclJlcXVl",
            "c3QSEwoLYXV0b21hdG9ySWQYASABKAMSDAoEbmFtZRgCIAEoCRIPCgdlbmFi",
            "bGVkGAMgASgIEgsKA3VybBgEIAEoCRIoCgpza2lsbFR5cGVzGAUgAygOMhQu",
            "QXV0b21hdG9yLlNraWxsVHlwZRJAChZhdXRvbWF0b3JTZXR0aW5nVmFsdWVz",
            "GAYgAygLMiAuQXV0b21hdG9yLkF1dG9tYXRvclNldHRpbmdWYWx1ZSL8AQoa",
            "QWRtaW5TZXR1cEF1dG9tYXRvclJlcXVlc3QSEwoLYXV0b21hdG9ySWQYASAB",
            "KAMSMQoOYXV0b21hdG9yU3RhdGUYAiABKA4yGS5BdXRvbWF0b3IuQXV0b21h",
            "dG9yU3RhdGUSKAogZW5jcnlwdGVkRWNjRW50ZXJwcmlzZVByaXZhdGVLZXkY",
            "AyABKAwSKAogZW5jcnlwdGVkUnNhRW50ZXJwcmlzZVByaXZhdGVLZXkYBCAB",
            "KAwSKAoKc2tpbGxUeXBlcxgFIAMoDjIULkF1dG9tYXRvci5Ta2lsbFR5cGUS",
            "GAoQZW5jcnlwdGVkVHJlZUtleRgGIAEoDCKmAQobQWRtaW5TZXR1cEF1dG9t",
            "YXRvclJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSDwoHbWVzc2FnZRgCIAEo",
            "CRITCgthdXRvbWF0b3JJZBgDIAEoAxIxCg5hdXRvbWF0b3JTdGF0ZRgEIAEo",
            "DjIZLkF1dG9tYXRvci5BdXRvbWF0b3JTdGF0ZRIdChVhdXRvbWF0b3JFY2NQ",
            "dWJsaWNLZXkYBSABKAwiMgobQWRtaW5BdXRvbWF0b3JTa2lsbHNSZXF1ZXN0",
            "EhMKC2F1dG9tYXRvcklkGAEgASgDIl8KDkF1dG9tYXRvclNraWxsEicKCXNr",
            "aWxsVHlwZRgBIAEoDjIULkF1dG9tYXRvci5Ta2lsbFR5cGUSDAoEbmFtZRgC",
            "IAEoCRIWCg50cmFuc2xhdGVkTmFtZRgDIAEoCSJ0ChxBZG1pbkF1dG9tYXRv",
            "clNraWxsc1Jlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSDwoHbWVzc2FnZRgC",
            "IAEoCRIyCg9hdXRvbWF0b3JTa2lsbHMYAyADKAsyGS5BdXRvbWF0b3IuQXV0",
            "b21hdG9yU2tpbGwiMQoaQWRtaW5SZXNldEF1dG9tYXRvclJlcXVlc3QSEwoL",
            "YXV0b21hdG9ySWQYASABKAMiNgofQWRtaW5Jbml0aWFsaXplQXV0b21hdG9y",
            "UmVxdWVzdBITCgthdXRvbWF0b3JJZBgBIAEoAyIvChhBZG1pbkF1dG9tYXRv",
            "ckxvZ1JlcXVlc3QSEwoLYXV0b21hdG9ySWQYASABKAMiNAodQWRtaW5BdXRv",
            "bWF0b3JMb2dDbGVhclJlcXVlc3QSEwoLYXV0b21hdG9ySWQYASABKAMi4wIK",
            "GkFwcHJvdmVUZWFtc0ZvclVzZXJSZXF1ZXN0EhMKC2F1dG9tYXRvcklkGAEg",
            "ASgDEk8KHXNzb0F1dGhlbnRpY2F0aW9uUHJvdG9jb2xUeXBlGAIgASgOMigu",
            "QXV0b21hdG9yLlNzb0F1dGhlbnRpY2F0aW9uUHJvdG9jb2xUeXBlEhMKC2F1",
            "dGhNZXNzYWdlGAMgASgJEg0KBWVtYWlsGAQgASgJEhwKFHNlcnZlckVjY1B1",
            "YmxpY0tleUlkGAUgASgFEhEKCWlwQWRkcmVzcxgGIAEoCRIVCg11c2VyUHVi",
            "bGljS2V5GAcgASgMEjMKD3RlYW1EZXNjcmlwdGlvbhgIIAMoCzIaLkF1dG9t",
            "YXRvci5UZWFtRGVzY3JpcHRpb24SEQoJaXNUZXN0aW5nGAkgASgIEhEKCWlz",
            "RWNjT25seRgKIAEoCBIYChB1c2VyUHVibGljS2V5RWNjGAsgASgMIooBCg9U",
            "ZWFtRGVzY3JpcHRpb24SDwoHdGVhbVVpZBgBIAEoDBIQCgh0ZWFtTmFtZRgC",
            "IAEoCRIYChBlbmNyeXB0ZWRUZWFtS2V5GAMgASgMEjoKFGVuY3J5cHRlZFRl",
            "YW1LZXlUeXBlGAQgASgOMhwuRW50ZXJwcmlzZS5FbmNyeXB0ZWRLZXlUeXBl",
            "IpkBChtBcHByb3ZlVGVhbXNGb3JVc2VyUmVzcG9uc2USEwoLYXV0b21hdG9y",
            "SWQYASABKAMSDQoFZW1haWwYAiABKAkSDwoHbWVzc2FnZRgDIAEoCRJFChNh",
            "cHByb3ZlVGVhbVJlc3BvbnNlGAQgAygLMiguQXV0b21hdG9yLkFwcHJvdmVP",
            "bmVUZWFtRm9yVXNlclJlc3BvbnNlIqsCCh1BcHByb3ZlT25lVGVhbUZvclVz",
            "ZXJSZXNwb25zZRIQCghhcHByb3ZlZBgBIAEoCBIPCgdtZXNzYWdlGAIgASgJ",
            "Eg8KB3RlYW1VaWQYAyABKAwSEAoIdGVhbU5hbWUYBCABKAkSHAoUdXNlckVu",
            "Y3J5cHRlZFRlYW1LZXkYBSABKAwSPgoYdXNlckVuY3J5cHRlZFRlYW1LZXlU",
            "eXBlGAYgASgOMhwuRW50ZXJwcmlzZS5FbmNyeXB0ZWRLZXlUeXBlEiEKGXVz",
            "ZXJFbmNyeXB0ZWRUZWFtS2V5QnlFY2MYByABKAwSQwoddXNlckVuY3J5cHRl",
            "ZFRlYW1LZXlCeUVjY1R5cGUYCCABKA4yHC5FbnRlcnByaXNlLkVuY3J5cHRl",
            "ZEtleVR5cGUiqwIKE0FwcHJvdmVUZWFtc1JlcXVlc3QSEwoLYXV0b21hdG9y",
            "SWQYASABKAMSTwodc3NvQXV0aGVudGljYXRpb25Qcm90b2NvbFR5cGUYAiAB",
            "KA4yKC5BdXRvbWF0b3IuU3NvQXV0aGVudGljYXRpb25Qcm90b2NvbFR5cGUS",
            "EwoLYXV0aE1lc3NhZ2UYAyABKAkSDQoFZW1haWwYBCABKAkSHAoUc2VydmVy",
            "RWNjUHVibGljS2V5SWQYBSABKAUSEQoJaXBBZGRyZXNzGAYgASgJEjMKD3Rl",
            "YW1EZXNjcmlwdGlvbhgHIAMoCzIaLkF1dG9tYXRvci5UZWFtRGVzY3JpcHRp",
            "b24SEQoJaXNFY2NPbmx5GAggASgIEhEKCWlzVGVzdGluZxgJIAEoCCJ8ChRB",
            "cHByb3ZlVGVhbXNSZXNwb25zZRITCgthdXRvbWF0b3JJZBgBIAEoAxIPCgdt",
            "ZXNzYWdlGAIgASgJEj4KE2FwcHJvdmVUZWFtUmVzcG9uc2UYAyADKAsyIS5B",
            "dXRvbWF0b3IuQXBwcm92ZU9uZVRlYW1SZXNwb25zZSKeBAoWQXBwcm92ZU9u",
            "ZVRlYW1SZXNwb25zZRIQCghhcHByb3ZlZBgBIAEoCBIPCgdtZXNzYWdlGAIg",
            "ASgJEg8KB3RlYW1VaWQYAyABKAwSEAoIdGVhbU5hbWUYBCABKAkSGwoTZW5j",
            "cnlwdGVkVGVhbUtleUNiYxgFIAEoDBI9ChdlbmNyeXB0ZWRUZWFtS2V5Q2Jj",
            "VHlwZRgGIAEoDjIcLkVudGVycHJpc2UuRW5jcnlwdGVkS2V5VHlwZRIbChNl",
            "bmNyeXB0ZWRUZWFtS2V5R2NtGAcgASgMEj0KF2VuY3J5cHRlZFRlYW1LZXlH",
            "Y21UeXBlGAggASgOMhwuRW50ZXJwcmlzZS5FbmNyeXB0ZWRLZXlUeXBlEhgK",
            "EHRlYW1QdWJsaWNLZXlSc2EYCSABKAwSIgoaZW5jcnlwdGVkVGVhbVByaXZh",
            "dGVLZXlSc2EYCiABKAwSRAoeZW5jcnlwdGVkVGVhbVByaXZhdGVLZXlSc2FU",
            "eXBlGAsgASgOMhwuRW50ZXJwcmlzZS5FbmNyeXB0ZWRLZXlUeXBlEhgKEHRl",
            "YW1QdWJsaWNLZXlFY2MYDCABKAwSIgoaZW5jcnlwdGVkVGVhbVByaXZhdGVL",
            "ZXlFY2MYDSABKAwSRAoeZW5jcnlwdGVkVGVhbVByaXZhdGVLZXlFY2NUeXBl",
            "GA4gASgOMhwuRW50ZXJwcmlzZS5FbmNyeXB0ZWRLZXlUeXBlKkAKHVNzb0F1",
            "dGhlbnRpY2F0aW9uUHJvdG9jb2xUeXBlEhQKEFVOS05PV05fUFJPVE9DT0wQ",
            "ABIJCgVTQU1MMhABKjwKEUNlcnRpZmljYXRlRm9ybWF0EhIKDlVOS05PV05f",
            "Rk9STUFUEAASCgoGUEtDUzEyEAESBwoDSktTEAIqZwoJU2tpbGxUeXBlEhYK",
            "ElVOS05PV05fU0tJTExfVFlQRRAAEhMKD0RFVklDRV9BUFBST1ZBTBABEhEK",
            "DVRFQU1fQVBQUk9WQUwQAhIaChZURUFNX0ZPUl9VU0VSX0FQUFJPVkFMEAMq",
            "hwEKDkF1dG9tYXRvclN0YXRlEhEKDVVOS05PV05fU1RBVEUQABILCgdSVU5O",
            "SU5HEAESCQoFRVJST1IQAhIYChRORUVEU19JTklUSUFMSVpBVElPThADEhcK",
            "E05FRURTX0NSWVBUT19TVEVQXzEQBBIXChNORUVEU19DUllQVE9fU1RFUF8y",
            "EAVCJQoYY29tLmtlZXBlcnNlY3VyaXR5LnByb3RvQglBdXRvbWF0b3JiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SsoCloud.SsocloudReflection.Descriptor, global::Enterprise.EnterpriseReflection.Descriptor, global::SemanticVersion.VersionReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Automator.SsoAuthenticationProtocolType), typeof(global::Automator.CertificateFormat), typeof(global::Automator.SkillType), typeof(global::Automator.AutomatorState), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AutomatorSettingValue), global::Automator.AutomatorSettingValue.Parser, new[]{ "SettingId", "SettingTypeId", "SettingTag", "SettingName", "SettingValue", "DataType", "LastModified", "FromFile", "Encrypted", "Encoded", "Editable", "Translated", "UserVisible", "Required" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.ApproveDeviceRequest), global::Automator.ApproveDeviceRequest.Parser, new[]{ "AutomatorId", "SsoAuthenticationProtocolType", "AuthMessage", "Email", "DevicePublicKey", "ServerEccPublicKeyId", "UserEncryptedDataKey", "UserEncryptedDataKeyType", "IpAddress", "IsTesting", "IsEccOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.SetupRequest), global::Automator.SetupRequest.Parser, new[]{ "AutomatorId", "ServerEccPublicKeyId", "AutomatorState", "EncryptedEnterprisePrivateEccKey", "EncryptedEnterprisePrivateRsaKey", "AutomatorSkills", "EncryptedTreeKey", "IsEccOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.StatusRequest), global::Automator.StatusRequest.Parser, new[]{ "AutomatorId", "ServerEccPublicKeyId", "IsEccOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.InitializeRequest), global::Automator.InitializeRequest.Parser, new[]{ "AutomatorId", "IdpMetadata", "IdpSigningCertificate", "SsoEntityId", "EmailMapping", "FirstnameMapping", "LastnameMapping", "Disabled", "ServerEccPublicKeyId", "Config", "SslMode", "PersistState", "DisableSniCheck", "SslCertificateFilename", "SslCertificateFilePassword", "SslCertificateKeyPassword", "SslCertificateContents", "AutomatorHost", "AutomatorPort", "IpAllow", "IpDeny", "IsEccOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.NotInitializedResponse), global::Automator.NotInitializedResponse.Parser, new[]{ "AutomatorTransmissionKey", "SigningCertificate", "SigningCertificateFilename", "SigningCertificatePassword", "SigningKeyPassword", "SigningCertificateFormat", "AutomatorPublicKey", "Config" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AutomatorResponse), global::Automator.AutomatorResponse.Parser, new[]{ "AutomatorId", "Enabled", "Timestamp", "ApproveDevice", "Status", "NotInitialized", "Error", "ApproveTeamsForUser", "ApproveTeams", "AutomatorState", "AutomatorPublicEccKey", "Version" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.ApproveDeviceResponse), global::Automator.ApproveDeviceResponse.Parser, new[]{ "Approved", "EncryptedUserDataKey", "Message", "EncryptedUserDataKeyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.StatusResponse), global::Automator.StatusResponse.Parser, new[]{ "Initialized", "EnabledTimestamp", "InitializedTimestamp", "UpdatedTimestamp", "NumberOfDevicesApproved", "NumberOfDevicesDenied", "NumberOfErrors", "SslCertificateExpiration", "NotInitializedResponse", "Config", "NumberOfTeamMembershipsApproved", "NumberOfTeamMembershipsDenied", "NumberOfTeamsApproved", "NumberOfTeamsDenied" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.ErrorResponse), global::Automator.ErrorResponse.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.LogEntry), global::Automator.LogEntry.Parser, new[]{ "ServerTime", "MessageLevel", "Component", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminResponse), global::Automator.AdminResponse.Parser, new[]{ "Success", "Message", "AutomatorInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AutomatorInfo), global::Automator.AutomatorInfo.Parser, new[]{ "AutomatorId", "NodeId", "Name", "Enabled", "Url", "AutomatorSkills", "AutomatorSettingValues", "Status", "LogEntries", "AutomatorState", "Version" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminCreateAutomatorRequest), global::Automator.AdminCreateAutomatorRequest.Parser, new[]{ "NodeId", "Name", "Skill" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminDeleteAutomatorRequest), global::Automator.AdminDeleteAutomatorRequest.Parser, new[]{ "AutomatorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminGetAutomatorsOnNodeRequest), global::Automator.AdminGetAutomatorsOnNodeRequest.Parser, new[]{ "NodeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminGetAutomatorsForEnterpriseRequest), global::Automator.AdminGetAutomatorsForEnterpriseRequest.Parser, new[]{ "EnterpriseId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminGetAutomatorRequest), global::Automator.AdminGetAutomatorRequest.Parser, new[]{ "AutomatorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminEnableAutomatorRequest), global::Automator.AdminEnableAutomatorRequest.Parser, new[]{ "AutomatorId", "Enabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminEditAutomatorRequest), global::Automator.AdminEditAutomatorRequest.Parser, new[]{ "AutomatorId", "Name", "Enabled", "Url", "SkillTypes", "AutomatorSettingValues" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminSetupAutomatorRequest), global::Automator.AdminSetupAutomatorRequest.Parser, new[]{ "AutomatorId", "AutomatorState", "EncryptedEccEnterprisePrivateKey", "EncryptedRsaEnterprisePrivateKey", "SkillTypes", "EncryptedTreeKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminSetupAutomatorResponse), global::Automator.AdminSetupAutomatorResponse.Parser, new[]{ "Success", "Message", "AutomatorId", "AutomatorState", "AutomatorEccPublicKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminAutomatorSkillsRequest), global::Automator.AdminAutomatorSkillsRequest.Parser, new[]{ "AutomatorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AutomatorSkill), global::Automator.AutomatorSkill.Parser, new[]{ "SkillType", "Name", "TranslatedName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminAutomatorSkillsResponse), global::Automator.AdminAutomatorSkillsResponse.Parser, new[]{ "Success", "Message", "AutomatorSkills" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminResetAutomatorRequest), global::Automator.AdminResetAutomatorRequest.Parser, new[]{ "AutomatorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminInitializeAutomatorRequest), global::Automator.AdminInitializeAutomatorRequest.Parser, new[]{ "AutomatorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminAutomatorLogRequest), global::Automator.AdminAutomatorLogRequest.Parser, new[]{ "AutomatorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.AdminAutomatorLogClearRequest), global::Automator.AdminAutomatorLogClearRequest.Parser, new[]{ "AutomatorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.ApproveTeamsForUserRequest), global::Automator.ApproveTeamsForUserRequest.Parser, new[]{ "AutomatorId", "SsoAuthenticationProtocolType", "AuthMessage", "Email", "ServerEccPublicKeyId", "IpAddress", "UserPublicKey", "TeamDescription", "IsTesting", "IsEccOnly", "UserPublicKeyEcc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.TeamDescription), global::Automator.TeamDescription.Parser, new[]{ "TeamUid", "TeamName", "EncryptedTeamKey", "EncryptedTeamKeyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.ApproveTeamsForUserResponse), global::Automator.ApproveTeamsForUserResponse.Parser, new[]{ "AutomatorId", "Email", "Message", "ApproveTeamResponse" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.ApproveOneTeamForUserResponse), global::Automator.ApproveOneTeamForUserResponse.Parser, new[]{ "Approved", "Message", "TeamUid", "TeamName", "UserEncryptedTeamKey", "UserEncryptedTeamKeyType", "UserEncryptedTeamKeyByEcc", "UserEncryptedTeamKeyByEccType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.ApproveTeamsRequest), global::Automator.ApproveTeamsRequest.Parser, new[]{ "AutomatorId", "SsoAuthenticationProtocolType", "AuthMessage", "Email", "ServerEccPublicKeyId", "IpAddress", "TeamDescription", "IsEccOnly", "IsTesting" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.ApproveTeamsResponse), global::Automator.ApproveTeamsResponse.Parser, new[]{ "AutomatorId", "Message", "ApproveTeamResponse" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Automator.ApproveOneTeamResponse), global::Automator.ApproveOneTeamResponse.Parser, new[]{ "Approved", "Message", "TeamUid", "TeamName", "EncryptedTeamKeyCbc", "EncryptedTeamKeyCbcType", "EncryptedTeamKeyGcm", "EncryptedTeamKeyGcmType", "TeamPublicKeyRsa", "EncryptedTeamPrivateKeyRsa", "EncryptedTeamPrivateKeyRsaType", "TeamPublicKeyEcc", "EncryptedTeamPrivateKeyEcc", "EncryptedTeamPrivateKeyEccType" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*
  /// This enumerates the SSO Authentication protocols we support.
  /// We plan to support more protocols in the future.
  /// </summary>
  public enum SsoAuthenticationProtocolType {
    [pbr::OriginalName("UNKNOWN_PROTOCOL")] UnknownProtocol = 0,
    /// <summary>
    /// The SAML2 protocol
    /// </summary>
    [pbr::OriginalName("SAML2")] Saml2 = 1,
  }

  public enum CertificateFormat {
    [pbr::OriginalName("UNKNOWN_FORMAT")] UnknownFormat = 0,
    /// <summary>
    /// .pfx or .p12 format commonly used for certificates
    /// </summary>
    [pbr::OriginalName("PKCS12")] Pkcs12 = 1,
    /// <summary>
    /// .jks format commonly used in older Java implementations
    /// </summary>
    [pbr::OriginalName("JKS")] Jks = 2,
  }

  /// <summary>
  ///*
  /// These are the known skill types.
  /// </summary>
  public enum SkillType {
    [pbr::OriginalName("UNKNOWN_SKILL_TYPE")] UnknownSkillType = 0,
    [pbr::OriginalName("DEVICE_APPROVAL")] DeviceApproval = 1,
    [pbr::OriginalName("TEAM_APPROVAL")] TeamApproval = 2,
    [pbr::OriginalName("TEAM_FOR_USER_APPROVAL")] TeamForUserApproval = 3,
  }

  /// <summary>
  ///*
  /// AutomatorState (enum)
  ///
  /// Provides the state of the Automator - part of the status.
  /// </summary>
  public enum AutomatorState {
    [pbr::OriginalName("UNKNOWN_STATE")] UnknownState = 0,
    /// <summary>
    /// The Automator is running
    /// </summary>
    [pbr::OriginalName("RUNNING")] Running = 1,
    /// <summary>
    /// The Automator is seriously hosed
    /// </summary>
    [pbr::OriginalName("ERROR")] Error = 2,
    /// <summary>
    /// The Automator is created but needs to be initialized
    /// </summary>
    [pbr::OriginalName("NEEDS_INITIALIZATION")] NeedsInitialization = 3,
    /// <summary>
    /// The Automator needs the client to initiate a key exchange
    /// </summary>
    [pbr::OriginalName("NEEDS_CRYPTO_STEP_1")] NeedsCryptoStep1 = 4,
    /// <summary>
    /// The Automator needs the client to do the second step of the key exchange
    /// </summary>
    [pbr::OriginalName("NEEDS_CRYPTO_STEP_2")] NeedsCryptoStep2 = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///*
  /// This represents one setting and its value.
  /// The value is always a string but it is dynamically typed.
  /// The dataType property determines what type it is (boolean, string, integer, ...) and thus how it should be interpreted.
  /// Other properties such as "editable" and "fromFile" help the client determine whether the user can edit the value and
  /// what type of interface to present to the user (text box, file upload, etc.).
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AutomatorSettingValue : pb::IMessage<AutomatorSettingValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AutomatorSettingValue> _parser = new pb::MessageParser<AutomatorSettingValue>(() => new AutomatorSettingValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AutomatorSettingValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorSettingValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorSettingValue(AutomatorSettingValue other) : this() {
      settingId_ = other.settingId_;
      settingTypeId_ = other.settingTypeId_;
      settingTag_ = other.settingTag_;
      settingName_ = other.settingName_;
      settingValue_ = other.settingValue_;
      dataType_ = other.dataType_;
      lastModified_ = other.lastModified_;
      fromFile_ = other.fromFile_;
      encrypted_ = other.encrypted_;
      encoded_ = other.encoded_;
      editable_ = other.editable_;
      translated_ = other.translated_;
      userVisible_ = other.userVisible_;
      required_ = other.required_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorSettingValue Clone() {
      return new AutomatorSettingValue(this);
    }

    /// <summary>Field number for the "settingId" field.</summary>
    public const int SettingIdFieldNumber = 1;
    private long settingId_;
    /// <summary>
    /// The ID of this particular setting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SettingId {
      get { return settingId_; }
      set {
        settingId_ = value;
      }
    }

    /// <summary>Field number for the "settingTypeId" field.</summary>
    public const int SettingTypeIdFieldNumber = 2;
    private int settingTypeId_;
    /// <summary>
    /// The ID of the type of this setting (AutomatorSettingType)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SettingTypeId {
      get { return settingTypeId_; }
      set {
        settingTypeId_ = value;
      }
    }

    /// <summary>Field number for the "settingTag" field.</summary>
    public const int SettingTagFieldNumber = 3;
    private string settingTag_ = "";
    /// <summary>
    /// A computer-readable tag that corresponds to the setting type (such as automator_name or email_mapping)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettingTag {
      get { return settingTag_; }
      set {
        settingTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settingName" field.</summary>
    public const int SettingNameFieldNumber = 4;
    private string settingName_ = "";
    /// <summary>
    /// A human translation of the computer-readable tag into the client's locale
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettingName {
      get { return settingName_; }
      set {
        settingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settingValue" field.</summary>
    public const int SettingValueFieldNumber = 5;
    private string settingValue_ = "";
    /// <summary>
    /// A string version of the value.  Use the dataType field to see how to interpret it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettingValue {
      get { return settingValue_; }
      set {
        settingValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataType" field.</summary>
    public const int DataTypeFieldNumber = 6;
    private global::SsoCloud.DataType dataType_ = global::SsoCloud.DataType.Any;
    /// <summary>
    /// The data type: string, int, long, boolean, etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SsoCloud.DataType DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "lastModified" field.</summary>
    public const int LastModifiedFieldNumber = 7;
    private string lastModified_ = "";
    /// <summary>
    /// ISO-8661 UTC date time string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LastModified {
      get { return lastModified_; }
      set {
        lastModified_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fromFile" field.</summary>
    public const int FromFileFieldNumber = 8;
    private bool fromFile_;
    /// <summary>
    /// Whether the value of this field should be the contents of a file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FromFile {
      get { return fromFile_; }
      set {
        fromFile_ = value;
      }
    }

    /// <summary>Field number for the "encrypted" field.</summary>
    public const int EncryptedFieldNumber = 9;
    private bool encrypted_;
    /// <summary>
    /// Whether the value of this field is encrypted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Encrypted {
      get { return encrypted_; }
      set {
        encrypted_ = value;
      }
    }

    /// <summary>Field number for the "encoded" field.</summary>
    public const int EncodedFieldNumber = 10;
    private bool encoded_;
    /// <summary>
    /// Whether the value of this field is Base64-encoded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Encoded {
      get { return encoded_; }
      set {
        encoded_ = value;
      }
    }

    /// <summary>Field number for the "editable" field.</summary>
    public const int EditableFieldNumber = 11;
    private bool editable_;
    /// <summary>
    /// Whether the value of this field is user-editable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Editable {
      get { return editable_; }
      set {
        editable_ = value;
      }
    }

    /// <summary>Field number for the "translated" field.</summary>
    public const int TranslatedFieldNumber = 12;
    private bool translated_;
    /// <summary>
    /// Whether the value should be translated into the locale language (rare)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Translated {
      get { return translated_; }
      set {
        translated_ = value;
      }
    }

    /// <summary>Field number for the "userVisible" field.</summary>
    public const int UserVisibleFieldNumber = 13;
    private bool userVisible_;
    /// <summary>
    /// Whether this value is displayed to the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UserVisible {
      get { return userVisible_; }
      set {
        userVisible_ = value;
      }
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 14;
    private bool required_;
    /// <summary>
    /// Whether this setting is required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Required {
      get { return required_; }
      set {
        required_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AutomatorSettingValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AutomatorSettingValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SettingId != other.SettingId) return false;
      if (SettingTypeId != other.SettingTypeId) return false;
      if (SettingTag != other.SettingTag) return false;
      if (SettingName != other.SettingName) return false;
      if (SettingValue != other.SettingValue) return false;
      if (DataType != other.DataType) return false;
      if (LastModified != other.LastModified) return false;
      if (FromFile != other.FromFile) return false;
      if (Encrypted != other.Encrypted) return false;
      if (Encoded != other.Encoded) return false;
      if (Editable != other.Editable) return false;
      if (Translated != other.Translated) return false;
      if (UserVisible != other.UserVisible) return false;
      if (Required != other.Required) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SettingId != 0L) hash ^= SettingId.GetHashCode();
      if (SettingTypeId != 0) hash ^= SettingTypeId.GetHashCode();
      if (SettingTag.Length != 0) hash ^= SettingTag.GetHashCode();
      if (SettingName.Length != 0) hash ^= SettingName.GetHashCode();
      if (SettingValue.Length != 0) hash ^= SettingValue.GetHashCode();
      if (DataType != global::SsoCloud.DataType.Any) hash ^= DataType.GetHashCode();
      if (LastModified.Length != 0) hash ^= LastModified.GetHashCode();
      if (FromFile != false) hash ^= FromFile.GetHashCode();
      if (Encrypted != false) hash ^= Encrypted.GetHashCode();
      if (Encoded != false) hash ^= Encoded.GetHashCode();
      if (Editable != false) hash ^= Editable.GetHashCode();
      if (Translated != false) hash ^= Translated.GetHashCode();
      if (UserVisible != false) hash ^= UserVisible.GetHashCode();
      if (Required != false) hash ^= Required.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SettingId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SettingId);
      }
      if (SettingTypeId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SettingTypeId);
      }
      if (SettingTag.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SettingTag);
      }
      if (SettingName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SettingName);
      }
      if (SettingValue.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SettingValue);
      }
      if (DataType != global::SsoCloud.DataType.Any) {
        output.WriteRawTag(48);
        output.WriteEnum((int) DataType);
      }
      if (LastModified.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LastModified);
      }
      if (FromFile != false) {
        output.WriteRawTag(64);
        output.WriteBool(FromFile);
      }
      if (Encrypted != false) {
        output.WriteRawTag(72);
        output.WriteBool(Encrypted);
      }
      if (Encoded != false) {
        output.WriteRawTag(80);
        output.WriteBool(Encoded);
      }
      if (Editable != false) {
        output.WriteRawTag(88);
        output.WriteBool(Editable);
      }
      if (Translated != false) {
        output.WriteRawTag(96);
        output.WriteBool(Translated);
      }
      if (UserVisible != false) {
        output.WriteRawTag(104);
        output.WriteBool(UserVisible);
      }
      if (Required != false) {
        output.WriteRawTag(112);
        output.WriteBool(Required);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SettingId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SettingId);
      }
      if (SettingTypeId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SettingTypeId);
      }
      if (SettingTag.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SettingTag);
      }
      if (SettingName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SettingName);
      }
      if (SettingValue.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SettingValue);
      }
      if (DataType != global::SsoCloud.DataType.Any) {
        output.WriteRawTag(48);
        output.WriteEnum((int) DataType);
      }
      if (LastModified.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LastModified);
      }
      if (FromFile != false) {
        output.WriteRawTag(64);
        output.WriteBool(FromFile);
      }
      if (Encrypted != false) {
        output.WriteRawTag(72);
        output.WriteBool(Encrypted);
      }
      if (Encoded != false) {
        output.WriteRawTag(80);
        output.WriteBool(Encoded);
      }
      if (Editable != false) {
        output.WriteRawTag(88);
        output.WriteBool(Editable);
      }
      if (Translated != false) {
        output.WriteRawTag(96);
        output.WriteBool(Translated);
      }
      if (UserVisible != false) {
        output.WriteRawTag(104);
        output.WriteBool(UserVisible);
      }
      if (Required != false) {
        output.WriteRawTag(112);
        output.WriteBool(Required);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SettingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SettingId);
      }
      if (SettingTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SettingTypeId);
      }
      if (SettingTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettingTag);
      }
      if (SettingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettingName);
      }
      if (SettingValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettingValue);
      }
      if (DataType != global::SsoCloud.DataType.Any) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (LastModified.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastModified);
      }
      if (FromFile != false) {
        size += 1 + 1;
      }
      if (Encrypted != false) {
        size += 1 + 1;
      }
      if (Encoded != false) {
        size += 1 + 1;
      }
      if (Editable != false) {
        size += 1 + 1;
      }
      if (Translated != false) {
        size += 1 + 1;
      }
      if (UserVisible != false) {
        size += 1 + 1;
      }
      if (Required != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AutomatorSettingValue other) {
      if (other == null) {
        return;
      }
      if (other.SettingId != 0L) {
        SettingId = other.SettingId;
      }
      if (other.SettingTypeId != 0) {
        SettingTypeId = other.SettingTypeId;
      }
      if (other.SettingTag.Length != 0) {
        SettingTag = other.SettingTag;
      }
      if (other.SettingName.Length != 0) {
        SettingName = other.SettingName;
      }
      if (other.SettingValue.Length != 0) {
        SettingValue = other.SettingValue;
      }
      if (other.DataType != global::SsoCloud.DataType.Any) {
        DataType = other.DataType;
      }
      if (other.LastModified.Length != 0) {
        LastModified = other.LastModified;
      }
      if (other.FromFile != false) {
        FromFile = other.FromFile;
      }
      if (other.Encrypted != false) {
        Encrypted = other.Encrypted;
      }
      if (other.Encoded != false) {
        Encoded = other.Encoded;
      }
      if (other.Editable != false) {
        Editable = other.Editable;
      }
      if (other.Translated != false) {
        Translated = other.Translated;
      }
      if (other.UserVisible != false) {
        UserVisible = other.UserVisible;
      }
      if (other.Required != false) {
        Required = other.Required;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SettingId = input.ReadInt64();
            break;
          }
          case 16: {
            SettingTypeId = input.ReadInt32();
            break;
          }
          case 26: {
            SettingTag = input.ReadString();
            break;
          }
          case 34: {
            SettingName = input.ReadString();
            break;
          }
          case 42: {
            SettingValue = input.ReadString();
            break;
          }
          case 48: {
            DataType = (global::SsoCloud.DataType) input.ReadEnum();
            break;
          }
          case 58: {
            LastModified = input.ReadString();
            break;
          }
          case 64: {
            FromFile = input.ReadBool();
            break;
          }
          case 72: {
            Encrypted = input.ReadBool();
            break;
          }
          case 80: {
            Encoded = input.ReadBool();
            break;
          }
          case 88: {
            Editable = input.ReadBool();
            break;
          }
          case 96: {
            Translated = input.ReadBool();
            break;
          }
          case 104: {
            UserVisible = input.ReadBool();
            break;
          }
          case 112: {
            Required = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SettingId = input.ReadInt64();
            break;
          }
          case 16: {
            SettingTypeId = input.ReadInt32();
            break;
          }
          case 26: {
            SettingTag = input.ReadString();
            break;
          }
          case 34: {
            SettingName = input.ReadString();
            break;
          }
          case 42: {
            SettingValue = input.ReadString();
            break;
          }
          case 48: {
            DataType = (global::SsoCloud.DataType) input.ReadEnum();
            break;
          }
          case 58: {
            LastModified = input.ReadString();
            break;
          }
          case 64: {
            FromFile = input.ReadBool();
            break;
          }
          case 72: {
            Encrypted = input.ReadBool();
            break;
          }
          case 80: {
            Encoded = input.ReadBool();
            break;
          }
          case 88: {
            Editable = input.ReadBool();
            break;
          }
          case 96: {
            Translated = input.ReadBool();
            break;
          }
          case 104: {
            UserVisible = input.ReadBool();
            break;
          }
          case 112: {
            Required = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// ApproveDeviceRequest
  /// This is used to ask Automator to approve a user's device.
  /// It requires a SAML Authentication response, or the equivalent.
  ///
  /// @return an AutomatorResponse containing an ApproveDeviceResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ApproveDeviceRequest : pb::IMessage<ApproveDeviceRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ApproveDeviceRequest> _parser = new pb::MessageParser<ApproveDeviceRequest>(() => new ApproveDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ApproveDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveDeviceRequest(ApproveDeviceRequest other) : this() {
      automatorId_ = other.automatorId_;
      ssoAuthenticationProtocolType_ = other.ssoAuthenticationProtocolType_;
      authMessage_ = other.authMessage_;
      email_ = other.email_;
      devicePublicKey_ = other.devicePublicKey_;
      serverEccPublicKeyId_ = other.serverEccPublicKeyId_;
      userEncryptedDataKey_ = other.userEncryptedDataKey_;
      userEncryptedDataKeyType_ = other.userEncryptedDataKeyType_;
      ipAddress_ = other.ipAddress_;
      isTesting_ = other.isTesting_;
      isEccOnly_ = other.isEccOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveDeviceRequest Clone() {
      return new ApproveDeviceRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The ID of the automator instance being contacted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "ssoAuthenticationProtocolType" field.</summary>
    public const int SsoAuthenticationProtocolTypeFieldNumber = 2;
    private global::Automator.SsoAuthenticationProtocolType ssoAuthenticationProtocolType_ = global::Automator.SsoAuthenticationProtocolType.UnknownProtocol;
    /// <summary>
    /// SAML2 or other.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.SsoAuthenticationProtocolType SsoAuthenticationProtocolType {
      get { return ssoAuthenticationProtocolType_; }
      set {
        ssoAuthenticationProtocolType_ = value;
      }
    }

    /// <summary>Field number for the "authMessage" field.</summary>
    public const int AuthMessageFieldNumber = 3;
    private string authMessage_ = "";
    /// <summary>
    /// The SAML (or other) authentication message sent from the IdP to Keeper.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AuthMessage {
      get { return authMessage_; }
      set {
        authMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    /// <summary>
    /// Email address of the user being authenticated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "devicePublicKey" field.</summary>
    public const int DevicePublicKeyFieldNumber = 5;
    private pb::ByteString devicePublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The ECC public key of the device being approved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString DevicePublicKey {
      get { return devicePublicKey_; }
      set {
        devicePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverEccPublicKeyId" field.</summary>
    public const int ServerEccPublicKeyIdFieldNumber = 6;
    private int serverEccPublicKeyId_;
    /// <summary>
    /// This is included in every request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ServerEccPublicKeyId {
      get { return serverEccPublicKeyId_; }
      set {
        serverEccPublicKeyId_ = value;
      }
    }

    /// <summary>Field number for the "userEncryptedDataKey" field.</summary>
    public const int UserEncryptedDataKeyFieldNumber = 7;
    private pb::ByteString userEncryptedDataKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The user_encrypted_data_key encrypted with the enterprise data key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString UserEncryptedDataKey {
      get { return userEncryptedDataKey_; }
      set {
        userEncryptedDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userEncryptedDataKeyType" field.</summary>
    public const int UserEncryptedDataKeyTypeFieldNumber = 8;
    private global::Enterprise.EncryptedKeyType userEncryptedDataKeyType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    /// <summary>
    /// The type of the key, normally 3 = ENCRYPTED_BY_DATA_KEY_GCM.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Enterprise.EncryptedKeyType UserEncryptedDataKeyType {
      get { return userEncryptedDataKeyType_; }
      set {
        userEncryptedDataKeyType_ = value;
      }
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 9;
    private string ipAddress_ = "";
    /// <summary>
    /// The ip address of the user requesting approval.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isTesting" field.</summary>
    public const int IsTestingFieldNumber = 10;
    private bool isTesting_;
    /// <summary>
    /// True if this call is part of a unit test.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTesting {
      get { return isTesting_; }
      set {
        isTesting_ = value;
      }
    }

    /// <summary>Field number for the "isEccOnly" field.</summary>
    public const int IsEccOnlyFieldNumber = 11;
    private bool isEccOnly_;
    /// <summary>
    /// If true, do not send any RSA-encrypted results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEccOnly {
      get { return isEccOnly_; }
      set {
        isEccOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ApproveDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ApproveDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (SsoAuthenticationProtocolType != other.SsoAuthenticationProtocolType) return false;
      if (AuthMessage != other.AuthMessage) return false;
      if (Email != other.Email) return false;
      if (DevicePublicKey != other.DevicePublicKey) return false;
      if (ServerEccPublicKeyId != other.ServerEccPublicKeyId) return false;
      if (UserEncryptedDataKey != other.UserEncryptedDataKey) return false;
      if (UserEncryptedDataKeyType != other.UserEncryptedDataKeyType) return false;
      if (IpAddress != other.IpAddress) return false;
      if (IsTesting != other.IsTesting) return false;
      if (IsEccOnly != other.IsEccOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) hash ^= SsoAuthenticationProtocolType.GetHashCode();
      if (AuthMessage.Length != 0) hash ^= AuthMessage.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (DevicePublicKey.Length != 0) hash ^= DevicePublicKey.GetHashCode();
      if (ServerEccPublicKeyId != 0) hash ^= ServerEccPublicKeyId.GetHashCode();
      if (UserEncryptedDataKey.Length != 0) hash ^= UserEncryptedDataKey.GetHashCode();
      if (UserEncryptedDataKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= UserEncryptedDataKeyType.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (IsTesting != false) hash ^= IsTesting.GetHashCode();
      if (IsEccOnly != false) hash ^= IsEccOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SsoAuthenticationProtocolType);
      }
      if (AuthMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AuthMessage);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (DevicePublicKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(DevicePublicKey);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (UserEncryptedDataKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(UserEncryptedDataKey);
      }
      if (UserEncryptedDataKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(64);
        output.WriteEnum((int) UserEncryptedDataKeyType);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IpAddress);
      }
      if (IsTesting != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsTesting);
      }
      if (IsEccOnly != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsEccOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SsoAuthenticationProtocolType);
      }
      if (AuthMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AuthMessage);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (DevicePublicKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(DevicePublicKey);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (UserEncryptedDataKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(UserEncryptedDataKey);
      }
      if (UserEncryptedDataKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(64);
        output.WriteEnum((int) UserEncryptedDataKeyType);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IpAddress);
      }
      if (IsTesting != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsTesting);
      }
      if (IsEccOnly != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsEccOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SsoAuthenticationProtocolType);
      }
      if (AuthMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthMessage);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (DevicePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DevicePublicKey);
      }
      if (ServerEccPublicKeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerEccPublicKeyId);
      }
      if (UserEncryptedDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserEncryptedDataKey);
      }
      if (UserEncryptedDataKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UserEncryptedDataKeyType);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (IsTesting != false) {
        size += 1 + 1;
      }
      if (IsEccOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ApproveDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        SsoAuthenticationProtocolType = other.SsoAuthenticationProtocolType;
      }
      if (other.AuthMessage.Length != 0) {
        AuthMessage = other.AuthMessage;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.DevicePublicKey.Length != 0) {
        DevicePublicKey = other.DevicePublicKey;
      }
      if (other.ServerEccPublicKeyId != 0) {
        ServerEccPublicKeyId = other.ServerEccPublicKeyId;
      }
      if (other.UserEncryptedDataKey.Length != 0) {
        UserEncryptedDataKey = other.UserEncryptedDataKey;
      }
      if (other.UserEncryptedDataKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        UserEncryptedDataKeyType = other.UserEncryptedDataKeyType;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.IsTesting != false) {
        IsTesting = other.IsTesting;
      }
      if (other.IsEccOnly != false) {
        IsEccOnly = other.IsEccOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            SsoAuthenticationProtocolType = (global::Automator.SsoAuthenticationProtocolType) input.ReadEnum();
            break;
          }
          case 26: {
            AuthMessage = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 42: {
            DevicePublicKey = input.ReadBytes();
            break;
          }
          case 48: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 58: {
            UserEncryptedDataKey = input.ReadBytes();
            break;
          }
          case 64: {
            UserEncryptedDataKeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 74: {
            IpAddress = input.ReadString();
            break;
          }
          case 80: {
            IsTesting = input.ReadBool();
            break;
          }
          case 88: {
            IsEccOnly = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            SsoAuthenticationProtocolType = (global::Automator.SsoAuthenticationProtocolType) input.ReadEnum();
            break;
          }
          case 26: {
            AuthMessage = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 42: {
            DevicePublicKey = input.ReadBytes();
            break;
          }
          case 48: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 58: {
            UserEncryptedDataKey = input.ReadBytes();
            break;
          }
          case 64: {
            UserEncryptedDataKeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 74: {
            IpAddress = input.ReadString();
            break;
          }
          case 80: {
            IsTesting = input.ReadBool();
            break;
          }
          case 88: {
            IsEccOnly = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// SetupRequest
  /// In NEEDS_CRYPTO_STEP_1, this causes the automator to reply with the automator public ECC key.
  /// In NEEDS_CRYPTO_STEP_2, this causes the automator to accept the ec_enterprise_private_key encrypted with the automator's public ECC key.
  ///
  /// The client should check the automatorState in the AutomatorResponse to see what the next step should be.
  ///
  /// @return an AutomatorResponse containing  StatusResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SetupRequest : pb::IMessage<SetupRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetupRequest> _parser = new pb::MessageParser<SetupRequest>(() => new SetupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SetupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetupRequest(SetupRequest other) : this() {
      automatorId_ = other.automatorId_;
      serverEccPublicKeyId_ = other.serverEccPublicKeyId_;
      automatorState_ = other.automatorState_;
      encryptedEnterprisePrivateEccKey_ = other.encryptedEnterprisePrivateEccKey_;
      encryptedEnterprisePrivateRsaKey_ = other.encryptedEnterprisePrivateRsaKey_;
      automatorSkills_ = other.automatorSkills_.Clone();
      encryptedTreeKey_ = other.encryptedTreeKey_;
      isEccOnly_ = other.isEccOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetupRequest Clone() {
      return new SetupRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The ID of the automator instance being contacted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "serverEccPublicKeyId" field.</summary>
    public const int ServerEccPublicKeyIdFieldNumber = 2;
    private int serverEccPublicKeyId_;
    /// <summary>
    /// This is included in every request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ServerEccPublicKeyId {
      get { return serverEccPublicKeyId_; }
      set {
        serverEccPublicKeyId_ = value;
      }
    }

    /// <summary>Field number for the "automatorState" field.</summary>
    public const int AutomatorStateFieldNumber = 3;
    private global::Automator.AutomatorState automatorState_ = global::Automator.AutomatorState.UnknownState;
    /// <summary>
    /// Should be NEEDS_CRYPTO_STEP_1 or NEEDS_CRYPTO_STEP_2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.AutomatorState AutomatorState {
      get { return automatorState_; }
      set {
        automatorState_ = value;
      }
    }

    /// <summary>Field number for the "encryptedEnterprisePrivateEccKey" field.</summary>
    public const int EncryptedEnterprisePrivateEccKeyFieldNumber = 4;
    private pb::ByteString encryptedEnterprisePrivateEccKey_ = pb::ByteString.Empty;
    /// <summary>
    /// In NEEDS_CRYPTO_STEP_2, send in the ECC enterprisePrivateKey encrypted with the automator's public key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedEnterprisePrivateEccKey {
      get { return encryptedEnterprisePrivateEccKey_; }
      set {
        encryptedEnterprisePrivateEccKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedEnterprisePrivateRsaKey" field.</summary>
    public const int EncryptedEnterprisePrivateRsaKeyFieldNumber = 5;
    private pb::ByteString encryptedEnterprisePrivateRsaKey_ = pb::ByteString.Empty;
    /// <summary>
    /// In NEEDS_CRYPTO_STEP_2, send in the RSA enterprisePrivateKey encrypted with the automator's public key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedEnterprisePrivateRsaKey {
      get { return encryptedEnterprisePrivateRsaKey_; }
      set {
        encryptedEnterprisePrivateRsaKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "automatorSkills" field.</summary>
    public const int AutomatorSkillsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Automator.AutomatorSkill> _repeated_automatorSkills_codec
        = pb::FieldCodec.ForMessage(50, global::Automator.AutomatorSkill.Parser);
    private readonly pbc::RepeatedField<global::Automator.AutomatorSkill> automatorSkills_ = new pbc::RepeatedField<global::Automator.AutomatorSkill>();
    /// <summary>
    /// An automator has one or more skills.  Send the entire set, either on the first setup call or the second one
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.AutomatorSkill> AutomatorSkills {
      get { return automatorSkills_; }
    }

    /// <summary>Field number for the "encryptedTreeKey" field.</summary>
    public const int EncryptedTreeKeyFieldNumber = 7;
    private pb::ByteString encryptedTreeKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The enterprise's treeKey encrypted with the automator's public key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedTreeKey {
      get { return encryptedTreeKey_; }
      set {
        encryptedTreeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isEccOnly" field.</summary>
    public const int IsEccOnlyFieldNumber = 8;
    private bool isEccOnly_;
    /// <summary>
    /// If true, do not send any RSA-encrypted results
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEccOnly {
      get { return isEccOnly_; }
      set {
        isEccOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SetupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SetupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (ServerEccPublicKeyId != other.ServerEccPublicKeyId) return false;
      if (AutomatorState != other.AutomatorState) return false;
      if (EncryptedEnterprisePrivateEccKey != other.EncryptedEnterprisePrivateEccKey) return false;
      if (EncryptedEnterprisePrivateRsaKey != other.EncryptedEnterprisePrivateRsaKey) return false;
      if(!automatorSkills_.Equals(other.automatorSkills_)) return false;
      if (EncryptedTreeKey != other.EncryptedTreeKey) return false;
      if (IsEccOnly != other.IsEccOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (ServerEccPublicKeyId != 0) hash ^= ServerEccPublicKeyId.GetHashCode();
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) hash ^= AutomatorState.GetHashCode();
      if (EncryptedEnterprisePrivateEccKey.Length != 0) hash ^= EncryptedEnterprisePrivateEccKey.GetHashCode();
      if (EncryptedEnterprisePrivateRsaKey.Length != 0) hash ^= EncryptedEnterprisePrivateRsaKey.GetHashCode();
      hash ^= automatorSkills_.GetHashCode();
      if (EncryptedTreeKey.Length != 0) hash ^= EncryptedTreeKey.GetHashCode();
      if (IsEccOnly != false) hash ^= IsEccOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AutomatorState);
      }
      if (EncryptedEnterprisePrivateEccKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedEnterprisePrivateEccKey);
      }
      if (EncryptedEnterprisePrivateRsaKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EncryptedEnterprisePrivateRsaKey);
      }
      automatorSkills_.WriteTo(output, _repeated_automatorSkills_codec);
      if (EncryptedTreeKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(EncryptedTreeKey);
      }
      if (IsEccOnly != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsEccOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AutomatorState);
      }
      if (EncryptedEnterprisePrivateEccKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedEnterprisePrivateEccKey);
      }
      if (EncryptedEnterprisePrivateRsaKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EncryptedEnterprisePrivateRsaKey);
      }
      automatorSkills_.WriteTo(ref output, _repeated_automatorSkills_codec);
      if (EncryptedTreeKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(EncryptedTreeKey);
      }
      if (IsEccOnly != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsEccOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (ServerEccPublicKeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerEccPublicKeyId);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutomatorState);
      }
      if (EncryptedEnterprisePrivateEccKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedEnterprisePrivateEccKey);
      }
      if (EncryptedEnterprisePrivateRsaKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedEnterprisePrivateRsaKey);
      }
      size += automatorSkills_.CalculateSize(_repeated_automatorSkills_codec);
      if (EncryptedTreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTreeKey);
      }
      if (IsEccOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SetupRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.ServerEccPublicKeyId != 0) {
        ServerEccPublicKeyId = other.ServerEccPublicKeyId;
      }
      if (other.AutomatorState != global::Automator.AutomatorState.UnknownState) {
        AutomatorState = other.AutomatorState;
      }
      if (other.EncryptedEnterprisePrivateEccKey.Length != 0) {
        EncryptedEnterprisePrivateEccKey = other.EncryptedEnterprisePrivateEccKey;
      }
      if (other.EncryptedEnterprisePrivateRsaKey.Length != 0) {
        EncryptedEnterprisePrivateRsaKey = other.EncryptedEnterprisePrivateRsaKey;
      }
      automatorSkills_.Add(other.automatorSkills_);
      if (other.EncryptedTreeKey.Length != 0) {
        EncryptedTreeKey = other.EncryptedTreeKey;
      }
      if (other.IsEccOnly != false) {
        IsEccOnly = other.IsEccOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 24: {
            AutomatorState = (global::Automator.AutomatorState) input.ReadEnum();
            break;
          }
          case 34: {
            EncryptedEnterprisePrivateEccKey = input.ReadBytes();
            break;
          }
          case 42: {
            EncryptedEnterprisePrivateRsaKey = input.ReadBytes();
            break;
          }
          case 50: {
            automatorSkills_.AddEntriesFrom(input, _repeated_automatorSkills_codec);
            break;
          }
          case 58: {
            EncryptedTreeKey = input.ReadBytes();
            break;
          }
          case 64: {
            IsEccOnly = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 24: {
            AutomatorState = (global::Automator.AutomatorState) input.ReadEnum();
            break;
          }
          case 34: {
            EncryptedEnterprisePrivateEccKey = input.ReadBytes();
            break;
          }
          case 42: {
            EncryptedEnterprisePrivateRsaKey = input.ReadBytes();
            break;
          }
          case 50: {
            automatorSkills_.AddEntriesFrom(ref input, _repeated_automatorSkills_codec);
            break;
          }
          case 58: {
            EncryptedTreeKey = input.ReadBytes();
            break;
          }
          case 64: {
            IsEccOnly = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// StatusRequest
  /// This is used to ask the Automator instance for its status via an authenticated REST call.
  /// @return an AutomatorResponse containing  StatusResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StatusRequest : pb::IMessage<StatusRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatusRequest> _parser = new pb::MessageParser<StatusRequest>(() => new StatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatusRequest(StatusRequest other) : this() {
      automatorId_ = other.automatorId_;
      serverEccPublicKeyId_ = other.serverEccPublicKeyId_;
      isEccOnly_ = other.isEccOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatusRequest Clone() {
      return new StatusRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The ID of the automator instance being contacted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "serverEccPublicKeyId" field.</summary>
    public const int ServerEccPublicKeyIdFieldNumber = 2;
    private int serverEccPublicKeyId_;
    /// <summary>
    /// This is included in every request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ServerEccPublicKeyId {
      get { return serverEccPublicKeyId_; }
      set {
        serverEccPublicKeyId_ = value;
      }
    }

    /// <summary>Field number for the "isEccOnly" field.</summary>
    public const int IsEccOnlyFieldNumber = 3;
    private bool isEccOnly_;
    /// <summary>
    /// If true, do not send any RSA-encrypted results
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEccOnly {
      get { return isEccOnly_; }
      set {
        isEccOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (ServerEccPublicKeyId != other.ServerEccPublicKeyId) return false;
      if (IsEccOnly != other.IsEccOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (ServerEccPublicKeyId != 0) hash ^= ServerEccPublicKeyId.GetHashCode();
      if (IsEccOnly != false) hash ^= IsEccOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (IsEccOnly != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsEccOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (IsEccOnly != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsEccOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (ServerEccPublicKeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerEccPublicKeyId);
      }
      if (IsEccOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.ServerEccPublicKeyId != 0) {
        ServerEccPublicKeyId = other.ServerEccPublicKeyId;
      }
      if (other.IsEccOnly != false) {
        IsEccOnly = other.IsEccOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 24: {
            IsEccOnly = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 24: {
            IsEccOnly = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// InitializeRequest
  /// This is used to Initialize the Automator instance via an authenticated REST call.
  /// Updated for Automator 2.0 by adding 9 new configuration parameters.
  /// Updated for Automator 2.2 by adding 2 new configuration parameters.
  ///
  /// @return an AutomatorResponse containing a StatusResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InitializeRequest : pb::IMessage<InitializeRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InitializeRequest> _parser = new pb::MessageParser<InitializeRequest>(() => new InitializeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InitializeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InitializeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InitializeRequest(InitializeRequest other) : this() {
      automatorId_ = other.automatorId_;
      idpMetadata_ = other.idpMetadata_;
      idpSigningCertificate_ = other.idpSigningCertificate_;
      ssoEntityId_ = other.ssoEntityId_;
      emailMapping_ = other.emailMapping_;
      firstnameMapping_ = other.firstnameMapping_;
      lastnameMapping_ = other.lastnameMapping_;
      disabled_ = other.disabled_;
      serverEccPublicKeyId_ = other.serverEccPublicKeyId_;
      config_ = other.config_;
      sslMode_ = other.sslMode_;
      persistState_ = other.persistState_;
      disableSniCheck_ = other.disableSniCheck_;
      sslCertificateFilename_ = other.sslCertificateFilename_;
      sslCertificateFilePassword_ = other.sslCertificateFilePassword_;
      sslCertificateKeyPassword_ = other.sslCertificateKeyPassword_;
      sslCertificateContents_ = other.sslCertificateContents_;
      automatorHost_ = other.automatorHost_;
      automatorPort_ = other.automatorPort_;
      ipAllow_ = other.ipAllow_;
      ipDeny_ = other.ipDeny_;
      isEccOnly_ = other.isEccOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InitializeRequest Clone() {
      return new InitializeRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// Uniquely identifies this service
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "idpMetadata" field.</summary>
    public const int IdpMetadataFieldNumber = 2;
    private string idpMetadata_ = "";
    /// <summary>
    /// The IDP metadata for this SSO node.  Needed to decrypt the SAML login response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IdpMetadata {
      get { return idpMetadata_; }
      set {
        idpMetadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idpSigningCertificate" field.</summary>
    public const int IdpSigningCertificateFieldNumber = 3;
    private pb::ByteString idpSigningCertificate_ = pb::ByteString.Empty;
    /// <summary>
    /// UTF8 bytes of an X509Certificate (.cer or .crt file, DER-encoded).  If empty, we use the certificate in the IdP metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString IdpSigningCertificate {
      get { return idpSigningCertificate_; }
      set {
        idpSigningCertificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ssoEntityId" field.</summary>
    public const int SsoEntityIdFieldNumber = 4;
    private string ssoEntityId_ = "";
    /// <summary>
    /// The entityId of the SSO instance associated with this automator.  Needed for SAML validation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SsoEntityId {
      get { return ssoEntityId_; }
      set {
        ssoEntityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "emailMapping" field.</summary>
    public const int EmailMappingFieldNumber = 5;
    private string emailMapping_ = "";
    /// <summary>
    /// The field where the IdP puts the user's email
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EmailMapping {
      get { return emailMapping_; }
      set {
        emailMapping_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firstnameMapping" field.</summary>
    public const int FirstnameMappingFieldNumber = 6;
    private string firstnameMapping_ = "";
    /// <summary>
    /// The field where the IdP puts the user's first name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FirstnameMapping {
      get { return firstnameMapping_; }
      set {
        firstnameMapping_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastnameMapping" field.</summary>
    public const int LastnameMappingFieldNumber = 7;
    private string lastnameMapping_ = "";
    /// <summary>
    /// The field where the IdP puts the user's last name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LastnameMapping {
      get { return lastnameMapping_; }
      set {
        lastnameMapping_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disabled" field.</summary>
    public const int DisabledFieldNumber = 8;
    private bool disabled_;
    /// <summary>
    /// If true, will disable the automator after initialization.  Usually you want it to be enabled so leave this false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Disabled {
      get { return disabled_; }
      set {
        disabled_ = value;
      }
    }

    /// <summary>Field number for the "serverEccPublicKeyId" field.</summary>
    public const int ServerEccPublicKeyIdFieldNumber = 9;
    private int serverEccPublicKeyId_;
    /// <summary>
    /// This is included in every request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ServerEccPublicKeyId {
      get { return serverEccPublicKeyId_; }
      set {
        serverEccPublicKeyId_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 10;
    private pb::ByteString config_ = pb::ByteString.Empty;
    /// <summary>
    /// The encoded, encrypted configuration, if it has been previously stored by the Automator on the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Config {
      get { return config_; }
      set {
        config_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sslMode" field.</summary>
    public const int SslModeFieldNumber = 11;
    private string sslMode_ = "";
    /// <summary>
    /// "certificate", "self-signed", or "none"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SslMode {
      get { return sslMode_; }
      set {
        sslMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "persistState" field.</summary>
    public const int PersistStateFieldNumber = 12;
    private bool persistState_;
    /// <summary>
    /// true if the Automator should store its configuration in Keeper
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PersistState {
      get { return persistState_; }
      set {
        persistState_ = value;
      }
    }

    /// <summary>Field number for the "disableSniCheck" field.</summary>
    public const int DisableSniCheckFieldNumber = 13;
    private bool disableSniCheck_;
    /// <summary>
    /// if true, SNI check is disabled for incoming connections
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisableSniCheck {
      get { return disableSniCheck_; }
      set {
        disableSniCheck_ = value;
      }
    }

    /// <summary>Field number for the "sslCertificateFilename" field.</summary>
    public const int SslCertificateFilenameFieldNumber = 14;
    private string sslCertificateFilename_ = "";
    /// <summary>
    /// The name of the SSL file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SslCertificateFilename {
      get { return sslCertificateFilename_; }
      set {
        sslCertificateFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sslCertificateFilePassword" field.</summary>
    public const int SslCertificateFilePasswordFieldNumber = 15;
    private string sslCertificateFilePassword_ = "";
    /// <summary>
    /// The password on the SSL file, if any
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SslCertificateFilePassword {
      get { return sslCertificateFilePassword_; }
      set {
        sslCertificateFilePassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sslCertificateKeyPassword" field.</summary>
    public const int SslCertificateKeyPasswordFieldNumber = 16;
    private string sslCertificateKeyPassword_ = "";
    /// <summary>
    /// The password on the key in the SSL file, if any
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SslCertificateKeyPassword {
      get { return sslCertificateKeyPassword_; }
      set {
        sslCertificateKeyPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sslCertificateContents" field.</summary>
    public const int SslCertificateContentsFieldNumber = 17;
    private pb::ByteString sslCertificateContents_ = pb::ByteString.Empty;
    /// <summary>
    /// The contents of the SSL file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString SslCertificateContents {
      get { return sslCertificateContents_; }
      set {
        sslCertificateContents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "automatorHost" field.</summary>
    public const int AutomatorHostFieldNumber = 18;
    private string automatorHost_ = "";
    /// <summary>
    /// The hostname of the Automator instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AutomatorHost {
      get { return automatorHost_; }
      set {
        automatorHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "automatorPort" field.</summary>
    public const int AutomatorPortFieldNumber = 19;
    private string automatorPort_ = "";
    /// <summary>
    /// The port number of the Automator instance, as a string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AutomatorPort {
      get { return automatorPort_; }
      set {
        automatorPort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipAllow" field.</summary>
    public const int IpAllowFieldNumber = 20;
    private string ipAllow_ = "";
    /// <summary>
    /// A list of IP addresses and/or ranges to allow
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IpAllow {
      get { return ipAllow_; }
      set {
        ipAllow_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipDeny" field.</summary>
    public const int IpDenyFieldNumber = 21;
    private string ipDeny_ = "";
    /// <summary>
    /// A list of IP addresses and/or ranges to deny
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IpDeny {
      get { return ipDeny_; }
      set {
        ipDeny_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isEccOnly" field.</summary>
    public const int IsEccOnlyFieldNumber = 22;
    private bool isEccOnly_;
    /// <summary>
    /// If true, do not send any RSA-encrypted results
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEccOnly {
      get { return isEccOnly_; }
      set {
        isEccOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InitializeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InitializeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (IdpMetadata != other.IdpMetadata) return false;
      if (IdpSigningCertificate != other.IdpSigningCertificate) return false;
      if (SsoEntityId != other.SsoEntityId) return false;
      if (EmailMapping != other.EmailMapping) return false;
      if (FirstnameMapping != other.FirstnameMapping) return false;
      if (LastnameMapping != other.LastnameMapping) return false;
      if (Disabled != other.Disabled) return false;
      if (ServerEccPublicKeyId != other.ServerEccPublicKeyId) return false;
      if (Config != other.Config) return false;
      if (SslMode != other.SslMode) return false;
      if (PersistState != other.PersistState) return false;
      if (DisableSniCheck != other.DisableSniCheck) return false;
      if (SslCertificateFilename != other.SslCertificateFilename) return false;
      if (SslCertificateFilePassword != other.SslCertificateFilePassword) return false;
      if (SslCertificateKeyPassword != other.SslCertificateKeyPassword) return false;
      if (SslCertificateContents != other.SslCertificateContents) return false;
      if (AutomatorHost != other.AutomatorHost) return false;
      if (AutomatorPort != other.AutomatorPort) return false;
      if (IpAllow != other.IpAllow) return false;
      if (IpDeny != other.IpDeny) return false;
      if (IsEccOnly != other.IsEccOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (IdpMetadata.Length != 0) hash ^= IdpMetadata.GetHashCode();
      if (IdpSigningCertificate.Length != 0) hash ^= IdpSigningCertificate.GetHashCode();
      if (SsoEntityId.Length != 0) hash ^= SsoEntityId.GetHashCode();
      if (EmailMapping.Length != 0) hash ^= EmailMapping.GetHashCode();
      if (FirstnameMapping.Length != 0) hash ^= FirstnameMapping.GetHashCode();
      if (LastnameMapping.Length != 0) hash ^= LastnameMapping.GetHashCode();
      if (Disabled != false) hash ^= Disabled.GetHashCode();
      if (ServerEccPublicKeyId != 0) hash ^= ServerEccPublicKeyId.GetHashCode();
      if (Config.Length != 0) hash ^= Config.GetHashCode();
      if (SslMode.Length != 0) hash ^= SslMode.GetHashCode();
      if (PersistState != false) hash ^= PersistState.GetHashCode();
      if (DisableSniCheck != false) hash ^= DisableSniCheck.GetHashCode();
      if (SslCertificateFilename.Length != 0) hash ^= SslCertificateFilename.GetHashCode();
      if (SslCertificateFilePassword.Length != 0) hash ^= SslCertificateFilePassword.GetHashCode();
      if (SslCertificateKeyPassword.Length != 0) hash ^= SslCertificateKeyPassword.GetHashCode();
      if (SslCertificateContents.Length != 0) hash ^= SslCertificateContents.GetHashCode();
      if (AutomatorHost.Length != 0) hash ^= AutomatorHost.GetHashCode();
      if (AutomatorPort.Length != 0) hash ^= AutomatorPort.GetHashCode();
      if (IpAllow.Length != 0) hash ^= IpAllow.GetHashCode();
      if (IpDeny.Length != 0) hash ^= IpDeny.GetHashCode();
      if (IsEccOnly != false) hash ^= IsEccOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (IdpMetadata.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IdpMetadata);
      }
      if (IdpSigningCertificate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(IdpSigningCertificate);
      }
      if (SsoEntityId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SsoEntityId);
      }
      if (EmailMapping.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EmailMapping);
      }
      if (FirstnameMapping.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FirstnameMapping);
      }
      if (LastnameMapping.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LastnameMapping);
      }
      if (Disabled != false) {
        output.WriteRawTag(64);
        output.WriteBool(Disabled);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (Config.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Config);
      }
      if (SslMode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SslMode);
      }
      if (PersistState != false) {
        output.WriteRawTag(96);
        output.WriteBool(PersistState);
      }
      if (DisableSniCheck != false) {
        output.WriteRawTag(104);
        output.WriteBool(DisableSniCheck);
      }
      if (SslCertificateFilename.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SslCertificateFilename);
      }
      if (SslCertificateFilePassword.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(SslCertificateFilePassword);
      }
      if (SslCertificateKeyPassword.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(SslCertificateKeyPassword);
      }
      if (SslCertificateContents.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(SslCertificateContents);
      }
      if (AutomatorHost.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AutomatorHost);
      }
      if (AutomatorPort.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(AutomatorPort);
      }
      if (IpAllow.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(IpAllow);
      }
      if (IpDeny.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(IpDeny);
      }
      if (IsEccOnly != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsEccOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (IdpMetadata.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IdpMetadata);
      }
      if (IdpSigningCertificate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(IdpSigningCertificate);
      }
      if (SsoEntityId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SsoEntityId);
      }
      if (EmailMapping.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EmailMapping);
      }
      if (FirstnameMapping.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FirstnameMapping);
      }
      if (LastnameMapping.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LastnameMapping);
      }
      if (Disabled != false) {
        output.WriteRawTag(64);
        output.WriteBool(Disabled);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (Config.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Config);
      }
      if (SslMode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SslMode);
      }
      if (PersistState != false) {
        output.WriteRawTag(96);
        output.WriteBool(PersistState);
      }
      if (DisableSniCheck != false) {
        output.WriteRawTag(104);
        output.WriteBool(DisableSniCheck);
      }
      if (SslCertificateFilename.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SslCertificateFilename);
      }
      if (SslCertificateFilePassword.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(SslCertificateFilePassword);
      }
      if (SslCertificateKeyPassword.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(SslCertificateKeyPassword);
      }
      if (SslCertificateContents.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(SslCertificateContents);
      }
      if (AutomatorHost.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AutomatorHost);
      }
      if (AutomatorPort.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(AutomatorPort);
      }
      if (IpAllow.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(IpAllow);
      }
      if (IpDeny.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(IpDeny);
      }
      if (IsEccOnly != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsEccOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (IdpMetadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdpMetadata);
      }
      if (IdpSigningCertificate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdpSigningCertificate);
      }
      if (SsoEntityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SsoEntityId);
      }
      if (EmailMapping.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EmailMapping);
      }
      if (FirstnameMapping.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstnameMapping);
      }
      if (LastnameMapping.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastnameMapping);
      }
      if (Disabled != false) {
        size += 1 + 1;
      }
      if (ServerEccPublicKeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerEccPublicKeyId);
      }
      if (Config.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Config);
      }
      if (SslMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SslMode);
      }
      if (PersistState != false) {
        size += 1 + 1;
      }
      if (DisableSniCheck != false) {
        size += 1 + 1;
      }
      if (SslCertificateFilename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SslCertificateFilename);
      }
      if (SslCertificateFilePassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SslCertificateFilePassword);
      }
      if (SslCertificateKeyPassword.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SslCertificateKeyPassword);
      }
      if (SslCertificateContents.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(SslCertificateContents);
      }
      if (AutomatorHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AutomatorHost);
      }
      if (AutomatorPort.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AutomatorPort);
      }
      if (IpAllow.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpAllow);
      }
      if (IpDeny.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpDeny);
      }
      if (IsEccOnly != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InitializeRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.IdpMetadata.Length != 0) {
        IdpMetadata = other.IdpMetadata;
      }
      if (other.IdpSigningCertificate.Length != 0) {
        IdpSigningCertificate = other.IdpSigningCertificate;
      }
      if (other.SsoEntityId.Length != 0) {
        SsoEntityId = other.SsoEntityId;
      }
      if (other.EmailMapping.Length != 0) {
        EmailMapping = other.EmailMapping;
      }
      if (other.FirstnameMapping.Length != 0) {
        FirstnameMapping = other.FirstnameMapping;
      }
      if (other.LastnameMapping.Length != 0) {
        LastnameMapping = other.LastnameMapping;
      }
      if (other.Disabled != false) {
        Disabled = other.Disabled;
      }
      if (other.ServerEccPublicKeyId != 0) {
        ServerEccPublicKeyId = other.ServerEccPublicKeyId;
      }
      if (other.Config.Length != 0) {
        Config = other.Config;
      }
      if (other.SslMode.Length != 0) {
        SslMode = other.SslMode;
      }
      if (other.PersistState != false) {
        PersistState = other.PersistState;
      }
      if (other.DisableSniCheck != false) {
        DisableSniCheck = other.DisableSniCheck;
      }
      if (other.SslCertificateFilename.Length != 0) {
        SslCertificateFilename = other.SslCertificateFilename;
      }
      if (other.SslCertificateFilePassword.Length != 0) {
        SslCertificateFilePassword = other.SslCertificateFilePassword;
      }
      if (other.SslCertificateKeyPassword.Length != 0) {
        SslCertificateKeyPassword = other.SslCertificateKeyPassword;
      }
      if (other.SslCertificateContents.Length != 0) {
        SslCertificateContents = other.SslCertificateContents;
      }
      if (other.AutomatorHost.Length != 0) {
        AutomatorHost = other.AutomatorHost;
      }
      if (other.AutomatorPort.Length != 0) {
        AutomatorPort = other.AutomatorPort;
      }
      if (other.IpAllow.Length != 0) {
        IpAllow = other.IpAllow;
      }
      if (other.IpDeny.Length != 0) {
        IpDeny = other.IpDeny;
      }
      if (other.IsEccOnly != false) {
        IsEccOnly = other.IsEccOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 18: {
            IdpMetadata = input.ReadString();
            break;
          }
          case 26: {
            IdpSigningCertificate = input.ReadBytes();
            break;
          }
          case 34: {
            SsoEntityId = input.ReadString();
            break;
          }
          case 42: {
            EmailMapping = input.ReadString();
            break;
          }
          case 50: {
            FirstnameMapping = input.ReadString();
            break;
          }
          case 58: {
            LastnameMapping = input.ReadString();
            break;
          }
          case 64: {
            Disabled = input.ReadBool();
            break;
          }
          case 72: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 82: {
            Config = input.ReadBytes();
            break;
          }
          case 90: {
            SslMode = input.ReadString();
            break;
          }
          case 96: {
            PersistState = input.ReadBool();
            break;
          }
          case 104: {
            DisableSniCheck = input.ReadBool();
            break;
          }
          case 114: {
            SslCertificateFilename = input.ReadString();
            break;
          }
          case 122: {
            SslCertificateFilePassword = input.ReadString();
            break;
          }
          case 130: {
            SslCertificateKeyPassword = input.ReadString();
            break;
          }
          case 138: {
            SslCertificateContents = input.ReadBytes();
            break;
          }
          case 146: {
            AutomatorHost = input.ReadString();
            break;
          }
          case 154: {
            AutomatorPort = input.ReadString();
            break;
          }
          case 162: {
            IpAllow = input.ReadString();
            break;
          }
          case 170: {
            IpDeny = input.ReadString();
            break;
          }
          case 176: {
            IsEccOnly = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 18: {
            IdpMetadata = input.ReadString();
            break;
          }
          case 26: {
            IdpSigningCertificate = input.ReadBytes();
            break;
          }
          case 34: {
            SsoEntityId = input.ReadString();
            break;
          }
          case 42: {
            EmailMapping = input.ReadString();
            break;
          }
          case 50: {
            FirstnameMapping = input.ReadString();
            break;
          }
          case 58: {
            LastnameMapping = input.ReadString();
            break;
          }
          case 64: {
            Disabled = input.ReadBool();
            break;
          }
          case 72: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 82: {
            Config = input.ReadBytes();
            break;
          }
          case 90: {
            SslMode = input.ReadString();
            break;
          }
          case 96: {
            PersistState = input.ReadBool();
            break;
          }
          case 104: {
            DisableSniCheck = input.ReadBool();
            break;
          }
          case 114: {
            SslCertificateFilename = input.ReadString();
            break;
          }
          case 122: {
            SslCertificateFilePassword = input.ReadString();
            break;
          }
          case 130: {
            SslCertificateKeyPassword = input.ReadString();
            break;
          }
          case 138: {
            SslCertificateContents = input.ReadBytes();
            break;
          }
          case 146: {
            AutomatorHost = input.ReadString();
            break;
          }
          case 154: {
            AutomatorPort = input.ReadString();
            break;
          }
          case 162: {
            IpAllow = input.ReadString();
            break;
          }
          case 170: {
            IpDeny = input.ReadString();
            break;
          }
          case 176: {
            IsEccOnly = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// NotInitializedResponse
  /// The Automator instance replies with this message if it has not been initialized.
  /// The certificate is most likely the SSL certificate of the Automator.
  /// The certificate will be passed to the corresponding Cloud SSO instance and used to sign the IdP messages.
  ///
  /// This message will be encrypted with the ECC public key whose ID is indicated in the request received from Keeper.
  /// All other messages are encrypted with the automatorTransmissionKey.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class NotInitializedResponse : pb::IMessage<NotInitializedResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotInitializedResponse> _parser = new pb::MessageParser<NotInitializedResponse>(() => new NotInitializedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NotInitializedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NotInitializedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NotInitializedResponse(NotInitializedResponse other) : this() {
      automatorTransmissionKey_ = other.automatorTransmissionKey_;
      signingCertificate_ = other.signingCertificate_;
      signingCertificateFilename_ = other.signingCertificateFilename_;
      signingCertificatePassword_ = other.signingCertificatePassword_;
      signingKeyPassword_ = other.signingKeyPassword_;
      signingCertificateFormat_ = other.signingCertificateFormat_;
      automatorPublicKey_ = other.automatorPublicKey_;
      config_ = other.config_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NotInitializedResponse Clone() {
      return new NotInitializedResponse(this);
    }

    /// <summary>Field number for the "automatorTransmissionKey" field.</summary>
    public const int AutomatorTransmissionKeyFieldNumber = 1;
    private pb::ByteString automatorTransmissionKey_ = pb::ByteString.Empty;
    /// <summary>
    /// This indicates that this automator instance is not initialized and that Keeper should subsequently send a message to initialize it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString AutomatorTransmissionKey {
      get { return automatorTransmissionKey_; }
      set {
        automatorTransmissionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signingCertificate" field.</summary>
    public const int SigningCertificateFieldNumber = 2;
    private pb::ByteString signingCertificate_ = pb::ByteString.Empty;
    /// <summary>
    /// UTF-8 bytes of a .pfx file containing an SSL certificate (public/private key pair) or the equivalent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString SigningCertificate {
      get { return signingCertificate_; }
      set {
        signingCertificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signingCertificateFilename" field.</summary>
    public const int SigningCertificateFilenameFieldNumber = 3;
    private string signingCertificateFilename_ = "";
    /// <summary>
    /// filename of the signing cert
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SigningCertificateFilename {
      get { return signingCertificateFilename_; }
      set {
        signingCertificateFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signingCertificatePassword" field.</summary>
    public const int SigningCertificatePasswordFieldNumber = 4;
    private string signingCertificatePassword_ = "";
    /// <summary>
    /// password for the certificate file (may be blank or empty).  Required if the file has a password.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SigningCertificatePassword {
      get { return signingCertificatePassword_; }
      set {
        signingCertificatePassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signingKeyPassword" field.</summary>
    public const int SigningKeyPasswordFieldNumber = 5;
    private string signingKeyPassword_ = "";
    /// <summary>
    /// password for the key inside the file (may be blank or empty).  Required if the key has a password.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SigningKeyPassword {
      get { return signingKeyPassword_; }
      set {
        signingKeyPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signingCertificateFormat" field.</summary>
    public const int SigningCertificateFormatFieldNumber = 6;
    private global::Automator.CertificateFormat signingCertificateFormat_ = global::Automator.CertificateFormat.UnknownFormat;
    /// <summary>
    /// Nominally PKCS12 (pfx) but we may allow JKS or other formats in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.CertificateFormat SigningCertificateFormat {
      get { return signingCertificateFormat_; }
      set {
        signingCertificateFormat_ = value;
      }
    }

    /// <summary>Field number for the "automatorPublicKey" field.</summary>
    public const int AutomatorPublicKeyFieldNumber = 7;
    private pb::ByteString automatorPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// ECC public key used to encrypt info to be sent to this Automator (unique to each Automator and not stored in Keeper)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString AutomatorPublicKey {
      get { return automatorPublicKey_; }
      set {
        automatorPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 8;
    private pb::ByteString config_ = pb::ByteString.Empty;
    /// <summary>
    /// If set, Keeperapp should store this configuration in the Automator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Config {
      get { return config_; }
      set {
        config_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NotInitializedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NotInitializedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorTransmissionKey != other.AutomatorTransmissionKey) return false;
      if (SigningCertificate != other.SigningCertificate) return false;
      if (SigningCertificateFilename != other.SigningCertificateFilename) return false;
      if (SigningCertificatePassword != other.SigningCertificatePassword) return false;
      if (SigningKeyPassword != other.SigningKeyPassword) return false;
      if (SigningCertificateFormat != other.SigningCertificateFormat) return false;
      if (AutomatorPublicKey != other.AutomatorPublicKey) return false;
      if (Config != other.Config) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorTransmissionKey.Length != 0) hash ^= AutomatorTransmissionKey.GetHashCode();
      if (SigningCertificate.Length != 0) hash ^= SigningCertificate.GetHashCode();
      if (SigningCertificateFilename.Length != 0) hash ^= SigningCertificateFilename.GetHashCode();
      if (SigningCertificatePassword.Length != 0) hash ^= SigningCertificatePassword.GetHashCode();
      if (SigningKeyPassword.Length != 0) hash ^= SigningKeyPassword.GetHashCode();
      if (SigningCertificateFormat != global::Automator.CertificateFormat.UnknownFormat) hash ^= SigningCertificateFormat.GetHashCode();
      if (AutomatorPublicKey.Length != 0) hash ^= AutomatorPublicKey.GetHashCode();
      if (Config.Length != 0) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorTransmissionKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AutomatorTransmissionKey);
      }
      if (SigningCertificate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SigningCertificate);
      }
      if (SigningCertificateFilename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SigningCertificateFilename);
      }
      if (SigningCertificatePassword.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SigningCertificatePassword);
      }
      if (SigningKeyPassword.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SigningKeyPassword);
      }
      if (SigningCertificateFormat != global::Automator.CertificateFormat.UnknownFormat) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SigningCertificateFormat);
      }
      if (AutomatorPublicKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(AutomatorPublicKey);
      }
      if (Config.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorTransmissionKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AutomatorTransmissionKey);
      }
      if (SigningCertificate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SigningCertificate);
      }
      if (SigningCertificateFilename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SigningCertificateFilename);
      }
      if (SigningCertificatePassword.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SigningCertificatePassword);
      }
      if (SigningKeyPassword.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SigningKeyPassword);
      }
      if (SigningCertificateFormat != global::Automator.CertificateFormat.UnknownFormat) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SigningCertificateFormat);
      }
      if (AutomatorPublicKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(AutomatorPublicKey);
      }
      if (Config.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorTransmissionKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AutomatorTransmissionKey);
      }
      if (SigningCertificate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SigningCertificate);
      }
      if (SigningCertificateFilename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SigningCertificateFilename);
      }
      if (SigningCertificatePassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SigningCertificatePassword);
      }
      if (SigningKeyPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SigningKeyPassword);
      }
      if (SigningCertificateFormat != global::Automator.CertificateFormat.UnknownFormat) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SigningCertificateFormat);
      }
      if (AutomatorPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AutomatorPublicKey);
      }
      if (Config.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NotInitializedResponse other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorTransmissionKey.Length != 0) {
        AutomatorTransmissionKey = other.AutomatorTransmissionKey;
      }
      if (other.SigningCertificate.Length != 0) {
        SigningCertificate = other.SigningCertificate;
      }
      if (other.SigningCertificateFilename.Length != 0) {
        SigningCertificateFilename = other.SigningCertificateFilename;
      }
      if (other.SigningCertificatePassword.Length != 0) {
        SigningCertificatePassword = other.SigningCertificatePassword;
      }
      if (other.SigningKeyPassword.Length != 0) {
        SigningKeyPassword = other.SigningKeyPassword;
      }
      if (other.SigningCertificateFormat != global::Automator.CertificateFormat.UnknownFormat) {
        SigningCertificateFormat = other.SigningCertificateFormat;
      }
      if (other.AutomatorPublicKey.Length != 0) {
        AutomatorPublicKey = other.AutomatorPublicKey;
      }
      if (other.Config.Length != 0) {
        Config = other.Config;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AutomatorTransmissionKey = input.ReadBytes();
            break;
          }
          case 18: {
            SigningCertificate = input.ReadBytes();
            break;
          }
          case 26: {
            SigningCertificateFilename = input.ReadString();
            break;
          }
          case 34: {
            SigningCertificatePassword = input.ReadString();
            break;
          }
          case 42: {
            SigningKeyPassword = input.ReadString();
            break;
          }
          case 48: {
            SigningCertificateFormat = (global::Automator.CertificateFormat) input.ReadEnum();
            break;
          }
          case 58: {
            AutomatorPublicKey = input.ReadBytes();
            break;
          }
          case 66: {
            Config = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AutomatorTransmissionKey = input.ReadBytes();
            break;
          }
          case 18: {
            SigningCertificate = input.ReadBytes();
            break;
          }
          case 26: {
            SigningCertificateFilename = input.ReadString();
            break;
          }
          case 34: {
            SigningCertificatePassword = input.ReadString();
            break;
          }
          case 42: {
            SigningKeyPassword = input.ReadString();
            break;
          }
          case 48: {
            SigningCertificateFormat = (global::Automator.CertificateFormat) input.ReadEnum();
            break;
          }
          case 58: {
            AutomatorPublicKey = input.ReadBytes();
            break;
          }
          case 66: {
            Config = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// AutomatorResponse
  /// This is always the response to an API request.
  /// Just as in a Keeperapp client, it is encrypted with the one-time transmissionKey sent with the ApiRequest.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AutomatorResponse : pb::IMessage<AutomatorResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AutomatorResponse> _parser = new pb::MessageParser<AutomatorResponse>(() => new AutomatorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AutomatorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorResponse(AutomatorResponse other) : this() {
      automatorId_ = other.automatorId_;
      enabled_ = other.enabled_;
      timestamp_ = other.timestamp_;
      automatorState_ = other.automatorState_;
      automatorPublicEccKey_ = other.automatorPublicEccKey_;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      switch (other.ResponseCase) {
        case ResponseOneofCase.ApproveDevice:
          ApproveDevice = other.ApproveDevice.Clone();
          break;
        case ResponseOneofCase.Status:
          Status = other.Status.Clone();
          break;
        case ResponseOneofCase.NotInitialized:
          NotInitialized = other.NotInitialized.Clone();
          break;
        case ResponseOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case ResponseOneofCase.ApproveTeamsForUser:
          ApproveTeamsForUser = other.ApproveTeamsForUser.Clone();
          break;
        case ResponseOneofCase.ApproveTeams:
          ApproveTeams = other.ApproveTeams.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorResponse Clone() {
      return new AutomatorResponse(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The ID of this automator instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    /// <summary>
    /// True if this instance is enabled.  It never approves devices if it is not enabled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    /// <summary>
    /// Unix time UTC = System.currentTimeMillis()
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "approveDevice" field.</summary>
    public const int ApproveDeviceFieldNumber = 4;
    /// <summary>
    /// Included if ApproveDeviceRequest was called and there was no error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.ApproveDeviceResponse ApproveDevice {
      get { return responseCase_ == ResponseOneofCase.ApproveDevice ? (global::Automator.ApproveDeviceResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ApproveDevice;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    /// <summary>
    /// Included if /initialize or /status was called and there was no error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.StatusResponse Status {
      get { return responseCase_ == ResponseOneofCase.Status ? (global::Automator.StatusResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Status;
      }
    }

    /// <summary>Field number for the "notInitialized" field.</summary>
    public const int NotInitializedFieldNumber = 6;
    /// <summary>
    /// Included if the Automator needs to be initialized
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.NotInitializedResponse NotInitialized {
      get { return responseCase_ == ResponseOneofCase.NotInitialized ? (global::Automator.NotInitializedResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.NotInitialized;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 7;
    /// <summary>
    /// Included if the Automator encountered an error during processing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.ErrorResponse Error {
      get { return responseCase_ == ResponseOneofCase.Error ? (global::Automator.ErrorResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Error;
      }
    }

    /// <summary>Field number for the "approveTeamsForUser" field.</summary>
    public const int ApproveTeamsForUserFieldNumber = 10;
    /// <summary>
    /// Included if ApproveTeamsForUserRequest was called and there was no error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.ApproveTeamsForUserResponse ApproveTeamsForUser {
      get { return responseCase_ == ResponseOneofCase.ApproveTeamsForUser ? (global::Automator.ApproveTeamsForUserResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ApproveTeamsForUser;
      }
    }

    /// <summary>Field number for the "approveTeams" field.</summary>
    public const int ApproveTeamsFieldNumber = 11;
    /// <summary>
    /// Included if ApproveTeamsRequest was called and there was no error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.ApproveTeamsResponse ApproveTeams {
      get { return responseCase_ == ResponseOneofCase.ApproveTeams ? (global::Automator.ApproveTeamsResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ApproveTeams;
      }
    }

    /// <summary>Field number for the "automatorState" field.</summary>
    public const int AutomatorStateFieldNumber = 8;
    private global::Automator.AutomatorState automatorState_ = global::Automator.AutomatorState.UnknownState;
    /// <summary>
    /// The state of the automator
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.AutomatorState AutomatorState {
      get { return automatorState_; }
      set {
        automatorState_ = value;
      }
    }

    /// <summary>Field number for the "automatorPublicEccKey" field.</summary>
    public const int AutomatorPublicEccKeyFieldNumber = 9;
    private pb::ByteString automatorPublicEccKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The automator's public key - sent only if automatorState == NEEDS_CRYPTO_STEP_1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString AutomatorPublicEccKey {
      get { return automatorPublicEccKey_; }
      set {
        automatorPublicEccKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 12;
    private global::SemanticVersion.Version version_;
    /// <summary>
    /// Automator version.  Automators v3.1.0 and above know about this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SemanticVersion.Version Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      ApproveDevice = 4,
      Status = 5,
      NotInitialized = 6,
      Error = 7,
      ApproveTeamsForUser = 10,
      ApproveTeams = 11,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AutomatorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AutomatorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (Enabled != other.Enabled) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(ApproveDevice, other.ApproveDevice)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(NotInitialized, other.NotInitialized)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(ApproveTeamsForUser, other.ApproveTeamsForUser)) return false;
      if (!object.Equals(ApproveTeams, other.ApproveTeams)) return false;
      if (AutomatorState != other.AutomatorState) return false;
      if (AutomatorPublicEccKey != other.AutomatorPublicEccKey) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ApproveDevice) hash ^= ApproveDevice.GetHashCode();
      if (responseCase_ == ResponseOneofCase.Status) hash ^= Status.GetHashCode();
      if (responseCase_ == ResponseOneofCase.NotInitialized) hash ^= NotInitialized.GetHashCode();
      if (responseCase_ == ResponseOneofCase.Error) hash ^= Error.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ApproveTeamsForUser) hash ^= ApproveTeamsForUser.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ApproveTeams) hash ^= ApproveTeams.GetHashCode();
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) hash ^= AutomatorState.GetHashCode();
      if (AutomatorPublicEccKey.Length != 0) hash ^= AutomatorPublicEccKey.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (responseCase_ == ResponseOneofCase.ApproveDevice) {
        output.WriteRawTag(34);
        output.WriteMessage(ApproveDevice);
      }
      if (responseCase_ == ResponseOneofCase.Status) {
        output.WriteRawTag(42);
        output.WriteMessage(Status);
      }
      if (responseCase_ == ResponseOneofCase.NotInitialized) {
        output.WriteRawTag(50);
        output.WriteMessage(NotInitialized);
      }
      if (responseCase_ == ResponseOneofCase.Error) {
        output.WriteRawTag(58);
        output.WriteMessage(Error);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        output.WriteRawTag(64);
        output.WriteEnum((int) AutomatorState);
      }
      if (AutomatorPublicEccKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(AutomatorPublicEccKey);
      }
      if (responseCase_ == ResponseOneofCase.ApproveTeamsForUser) {
        output.WriteRawTag(82);
        output.WriteMessage(ApproveTeamsForUser);
      }
      if (responseCase_ == ResponseOneofCase.ApproveTeams) {
        output.WriteRawTag(90);
        output.WriteMessage(ApproveTeams);
      }
      if (version_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (responseCase_ == ResponseOneofCase.ApproveDevice) {
        output.WriteRawTag(34);
        output.WriteMessage(ApproveDevice);
      }
      if (responseCase_ == ResponseOneofCase.Status) {
        output.WriteRawTag(42);
        output.WriteMessage(Status);
      }
      if (responseCase_ == ResponseOneofCase.NotInitialized) {
        output.WriteRawTag(50);
        output.WriteMessage(NotInitialized);
      }
      if (responseCase_ == ResponseOneofCase.Error) {
        output.WriteRawTag(58);
        output.WriteMessage(Error);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        output.WriteRawTag(64);
        output.WriteEnum((int) AutomatorState);
      }
      if (AutomatorPublicEccKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(AutomatorPublicEccKey);
      }
      if (responseCase_ == ResponseOneofCase.ApproveTeamsForUser) {
        output.WriteRawTag(82);
        output.WriteMessage(ApproveTeamsForUser);
      }
      if (responseCase_ == ResponseOneofCase.ApproveTeams) {
        output.WriteRawTag(90);
        output.WriteMessage(ApproveTeams);
      }
      if (version_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (responseCase_ == ResponseOneofCase.ApproveDevice) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApproveDevice);
      }
      if (responseCase_ == ResponseOneofCase.Status) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (responseCase_ == ResponseOneofCase.NotInitialized) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotInitialized);
      }
      if (responseCase_ == ResponseOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (responseCase_ == ResponseOneofCase.ApproveTeamsForUser) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApproveTeamsForUser);
      }
      if (responseCase_ == ResponseOneofCase.ApproveTeams) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApproveTeams);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutomatorState);
      }
      if (AutomatorPublicEccKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AutomatorPublicEccKey);
      }
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AutomatorResponse other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.AutomatorState != global::Automator.AutomatorState.UnknownState) {
        AutomatorState = other.AutomatorState;
      }
      if (other.AutomatorPublicEccKey.Length != 0) {
        AutomatorPublicEccKey = other.AutomatorPublicEccKey;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::SemanticVersion.Version();
        }
        Version.MergeFrom(other.Version);
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.ApproveDevice:
          if (ApproveDevice == null) {
            ApproveDevice = new global::Automator.ApproveDeviceResponse();
          }
          ApproveDevice.MergeFrom(other.ApproveDevice);
          break;
        case ResponseOneofCase.Status:
          if (Status == null) {
            Status = new global::Automator.StatusResponse();
          }
          Status.MergeFrom(other.Status);
          break;
        case ResponseOneofCase.NotInitialized:
          if (NotInitialized == null) {
            NotInitialized = new global::Automator.NotInitializedResponse();
          }
          NotInitialized.MergeFrom(other.NotInitialized);
          break;
        case ResponseOneofCase.Error:
          if (Error == null) {
            Error = new global::Automator.ErrorResponse();
          }
          Error.MergeFrom(other.Error);
          break;
        case ResponseOneofCase.ApproveTeamsForUser:
          if (ApproveTeamsForUser == null) {
            ApproveTeamsForUser = new global::Automator.ApproveTeamsForUserResponse();
          }
          ApproveTeamsForUser.MergeFrom(other.ApproveTeamsForUser);
          break;
        case ResponseOneofCase.ApproveTeams:
          if (ApproveTeams == null) {
            ApproveTeams = new global::Automator.ApproveTeamsResponse();
          }
          ApproveTeams.MergeFrom(other.ApproveTeams);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 34: {
            global::Automator.ApproveDeviceResponse subBuilder = new global::Automator.ApproveDeviceResponse();
            if (responseCase_ == ResponseOneofCase.ApproveDevice) {
              subBuilder.MergeFrom(ApproveDevice);
            }
            input.ReadMessage(subBuilder);
            ApproveDevice = subBuilder;
            break;
          }
          case 42: {
            global::Automator.StatusResponse subBuilder = new global::Automator.StatusResponse();
            if (responseCase_ == ResponseOneofCase.Status) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder);
            Status = subBuilder;
            break;
          }
          case 50: {
            global::Automator.NotInitializedResponse subBuilder = new global::Automator.NotInitializedResponse();
            if (responseCase_ == ResponseOneofCase.NotInitialized) {
              subBuilder.MergeFrom(NotInitialized);
            }
            input.ReadMessage(subBuilder);
            NotInitialized = subBuilder;
            break;
          }
          case 58: {
            global::Automator.ErrorResponse subBuilder = new global::Automator.ErrorResponse();
            if (responseCase_ == ResponseOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 64: {
            AutomatorState = (global::Automator.AutomatorState) input.ReadEnum();
            break;
          }
          case 74: {
            AutomatorPublicEccKey = input.ReadBytes();
            break;
          }
          case 82: {
            global::Automator.ApproveTeamsForUserResponse subBuilder = new global::Automator.ApproveTeamsForUserResponse();
            if (responseCase_ == ResponseOneofCase.ApproveTeamsForUser) {
              subBuilder.MergeFrom(ApproveTeamsForUser);
            }
            input.ReadMessage(subBuilder);
            ApproveTeamsForUser = subBuilder;
            break;
          }
          case 90: {
            global::Automator.ApproveTeamsResponse subBuilder = new global::Automator.ApproveTeamsResponse();
            if (responseCase_ == ResponseOneofCase.ApproveTeams) {
              subBuilder.MergeFrom(ApproveTeams);
            }
            input.ReadMessage(subBuilder);
            ApproveTeams = subBuilder;
            break;
          }
          case 98: {
            if (version_ == null) {
              Version = new global::SemanticVersion.Version();
            }
            input.ReadMessage(Version);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 34: {
            global::Automator.ApproveDeviceResponse subBuilder = new global::Automator.ApproveDeviceResponse();
            if (responseCase_ == ResponseOneofCase.ApproveDevice) {
              subBuilder.MergeFrom(ApproveDevice);
            }
            input.ReadMessage(subBuilder);
            ApproveDevice = subBuilder;
            break;
          }
          case 42: {
            global::Automator.StatusResponse subBuilder = new global::Automator.StatusResponse();
            if (responseCase_ == ResponseOneofCase.Status) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder);
            Status = subBuilder;
            break;
          }
          case 50: {
            global::Automator.NotInitializedResponse subBuilder = new global::Automator.NotInitializedResponse();
            if (responseCase_ == ResponseOneofCase.NotInitialized) {
              subBuilder.MergeFrom(NotInitialized);
            }
            input.ReadMessage(subBuilder);
            NotInitialized = subBuilder;
            break;
          }
          case 58: {
            global::Automator.ErrorResponse subBuilder = new global::Automator.ErrorResponse();
            if (responseCase_ == ResponseOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 64: {
            AutomatorState = (global::Automator.AutomatorState) input.ReadEnum();
            break;
          }
          case 74: {
            AutomatorPublicEccKey = input.ReadBytes();
            break;
          }
          case 82: {
            global::Automator.ApproveTeamsForUserResponse subBuilder = new global::Automator.ApproveTeamsForUserResponse();
            if (responseCase_ == ResponseOneofCase.ApproveTeamsForUser) {
              subBuilder.MergeFrom(ApproveTeamsForUser);
            }
            input.ReadMessage(subBuilder);
            ApproveTeamsForUser = subBuilder;
            break;
          }
          case 90: {
            global::Automator.ApproveTeamsResponse subBuilder = new global::Automator.ApproveTeamsResponse();
            if (responseCase_ == ResponseOneofCase.ApproveTeams) {
              subBuilder.MergeFrom(ApproveTeams);
            }
            input.ReadMessage(subBuilder);
            ApproveTeams = subBuilder;
            break;
          }
          case 98: {
            if (version_ == null) {
              Version = new global::SemanticVersion.Version();
            }
            input.ReadMessage(Version);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// ApproveDeviceResponse
  /// Includes information about whether the device was approved or not.
  /// There will be a message in the 'message' field of the AutomatorResponse if the device was not approved.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ApproveDeviceResponse : pb::IMessage<ApproveDeviceResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ApproveDeviceResponse> _parser = new pb::MessageParser<ApproveDeviceResponse>(() => new ApproveDeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ApproveDeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveDeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveDeviceResponse(ApproveDeviceResponse other) : this() {
      approved_ = other.approved_;
      encryptedUserDataKey_ = other.encryptedUserDataKey_;
      message_ = other.message_;
      encryptedUserDataKeyType_ = other.encryptedUserDataKeyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveDeviceResponse Clone() {
      return new ApproveDeviceResponse(this);
    }

    /// <summary>Field number for the "approved" field.</summary>
    public const int ApprovedFieldNumber = 1;
    private bool approved_;
    /// <summary>
    /// True if the device is to be approved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Approved {
      get { return approved_; }
      set {
        approved_ = value;
      }
    }

    /// <summary>Field number for the "encryptedUserDataKey" field.</summary>
    public const int EncryptedUserDataKeyFieldNumber = 2;
    private pb::ByteString encryptedUserDataKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The enterprise data key encrypted with the ECC device public key, if it was approved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedUserDataKey {
      get { return encryptedUserDataKey_; }
      set {
        encryptedUserDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// If device was not approved, will contain a message explaining why
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedUserDataKeyType" field.</summary>
    public const int EncryptedUserDataKeyTypeFieldNumber = 4;
    private global::Enterprise.EncryptedKeyType encryptedUserDataKeyType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    /// <summary>
    /// The type of the encrypted User data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Enterprise.EncryptedKeyType EncryptedUserDataKeyType {
      get { return encryptedUserDataKeyType_; }
      set {
        encryptedUserDataKeyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ApproveDeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ApproveDeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Approved != other.Approved) return false;
      if (EncryptedUserDataKey != other.EncryptedUserDataKey) return false;
      if (Message != other.Message) return false;
      if (EncryptedUserDataKeyType != other.EncryptedUserDataKeyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Approved != false) hash ^= Approved.GetHashCode();
      if (EncryptedUserDataKey.Length != 0) hash ^= EncryptedUserDataKey.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (EncryptedUserDataKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= EncryptedUserDataKeyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Approved != false) {
        output.WriteRawTag(8);
        output.WriteBool(Approved);
      }
      if (EncryptedUserDataKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedUserDataKey);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (EncryptedUserDataKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EncryptedUserDataKeyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Approved != false) {
        output.WriteRawTag(8);
        output.WriteBool(Approved);
      }
      if (EncryptedUserDataKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedUserDataKey);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (EncryptedUserDataKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EncryptedUserDataKeyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Approved != false) {
        size += 1 + 1;
      }
      if (EncryptedUserDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedUserDataKey);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (EncryptedUserDataKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncryptedUserDataKeyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ApproveDeviceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Approved != false) {
        Approved = other.Approved;
      }
      if (other.EncryptedUserDataKey.Length != 0) {
        EncryptedUserDataKey = other.EncryptedUserDataKey;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.EncryptedUserDataKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        EncryptedUserDataKeyType = other.EncryptedUserDataKeyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Approved = input.ReadBool();
            break;
          }
          case 18: {
            EncryptedUserDataKey = input.ReadBytes();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            EncryptedUserDataKeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Approved = input.ReadBool();
            break;
          }
          case 18: {
            EncryptedUserDataKey = input.ReadBytes();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            EncryptedUserDataKeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// StatusResponse
  /// Includes information about the status of the Automator instance, if it has been initialized.
  /// There will be a message in the 'message' field of the AutomatorResponse if there was an internal error.
  /// If this is in response to an 'initializeRequest' message it will contain a NotInitializedResponse that
  /// contains information about the signing certificate used by the Automator.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StatusResponse : pb::IMessage<StatusResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatusResponse> _parser = new pb::MessageParser<StatusResponse>(() => new StatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatusResponse(StatusResponse other) : this() {
      initialized_ = other.initialized_;
      enabledTimestamp_ = other.enabledTimestamp_;
      initializedTimestamp_ = other.initializedTimestamp_;
      updatedTimestamp_ = other.updatedTimestamp_;
      numberOfDevicesApproved_ = other.numberOfDevicesApproved_;
      numberOfDevicesDenied_ = other.numberOfDevicesDenied_;
      numberOfErrors_ = other.numberOfErrors_;
      sslCertificateExpiration_ = other.sslCertificateExpiration_;
      notInitializedResponse_ = other.notInitializedResponse_ != null ? other.notInitializedResponse_.Clone() : null;
      config_ = other.config_;
      numberOfTeamMembershipsApproved_ = other.numberOfTeamMembershipsApproved_;
      numberOfTeamMembershipsDenied_ = other.numberOfTeamMembershipsDenied_;
      numberOfTeamsApproved_ = other.numberOfTeamsApproved_;
      numberOfTeamsDenied_ = other.numberOfTeamsDenied_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatusResponse Clone() {
      return new StatusResponse(this);
    }

    /// <summary>Field number for the "initialized" field.</summary>
    public const int InitializedFieldNumber = 1;
    private bool initialized_;
    /// <summary>
    /// True if this automator has been initialized
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Initialized {
      get { return initialized_; }
      set {
        initialized_ = value;
      }
    }

    /// <summary>Field number for the "enabledTimestamp" field.</summary>
    public const int EnabledTimestampFieldNumber = 2;
    private long enabledTimestamp_;
    /// <summary>
    /// Unix time when this instance was last enabled or disabled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EnabledTimestamp {
      get { return enabledTimestamp_; }
      set {
        enabledTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "initializedTimestamp" field.</summary>
    public const int InitializedTimestampFieldNumber = 3;
    private long initializedTimestamp_;
    /// <summary>
    /// Unix time - UTC.  Will be zero if not yet initialized
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long InitializedTimestamp {
      get { return initializedTimestamp_; }
      set {
        initializedTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "updatedTimestamp" field.</summary>
    public const int UpdatedTimestampFieldNumber = 4;
    private long updatedTimestamp_;
    /// <summary>
    /// Unix time when this instance was last updated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long UpdatedTimestamp {
      get { return updatedTimestamp_; }
      set {
        updatedTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "numberOfDevicesApproved" field.</summary>
    public const int NumberOfDevicesApprovedFieldNumber = 5;
    private long numberOfDevicesApproved_;
    /// <summary>
    /// Number of devices approved since initialization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumberOfDevicesApproved {
      get { return numberOfDevicesApproved_; }
      set {
        numberOfDevicesApproved_ = value;
      }
    }

    /// <summary>Field number for the "numberOfDevicesDenied" field.</summary>
    public const int NumberOfDevicesDeniedFieldNumber = 6;
    private long numberOfDevicesDenied_;
    /// <summary>
    /// Number of devices denied since initialization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumberOfDevicesDenied {
      get { return numberOfDevicesDenied_; }
      set {
        numberOfDevicesDenied_ = value;
      }
    }

    /// <summary>Field number for the "numberOfErrors" field.</summary>
    public const int NumberOfErrorsFieldNumber = 7;
    private long numberOfErrors_;
    /// <summary>
    /// Number of processing errors encountered since initialization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumberOfErrors {
      get { return numberOfErrors_; }
      set {
        numberOfErrors_ = value;
      }
    }

    /// <summary>Field number for the "sslCertificateExpiration" field.</summary>
    public const int SslCertificateExpirationFieldNumber = 8;
    private long sslCertificateExpiration_;
    /// <summary>
    /// Unix time when the SSL certificate will expire.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SslCertificateExpiration {
      get { return sslCertificateExpiration_; }
      set {
        sslCertificateExpiration_ = value;
      }
    }

    /// <summary>Field number for the "notInitializedResponse" field.</summary>
    public const int NotInitializedResponseFieldNumber = 9;
    private global::Automator.NotInitializedResponse notInitializedResponse_;
    /// <summary>
    /// If this is in response to an initialize request, this field will contain information aobut the Signing Certificate being used by Automator.  Otherwise it will be empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.NotInitializedResponse NotInitializedResponse {
      get { return notInitializedResponse_; }
      set {
        notInitializedResponse_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 10;
    private pb::ByteString config_ = pb::ByteString.Empty;
    /// <summary>
    /// If the config has been changed, this is the encrypted, encoded config and it should be stored on the server for future retrieval.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Config {
      get { return config_; }
      set {
        config_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "numberOfTeamMembershipsApproved" field.</summary>
    public const int NumberOfTeamMembershipsApprovedFieldNumber = 11;
    private long numberOfTeamMembershipsApproved_;
    /// <summary>
    /// Number of team memberships approved since initialization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumberOfTeamMembershipsApproved {
      get { return numberOfTeamMembershipsApproved_; }
      set {
        numberOfTeamMembershipsApproved_ = value;
      }
    }

    /// <summary>Field number for the "numberOfTeamMembershipsDenied" field.</summary>
    public const int NumberOfTeamMembershipsDeniedFieldNumber = 12;
    private long numberOfTeamMembershipsDenied_;
    /// <summary>
    /// Number of team memberships denied since initialization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumberOfTeamMembershipsDenied {
      get { return numberOfTeamMembershipsDenied_; }
      set {
        numberOfTeamMembershipsDenied_ = value;
      }
    }

    /// <summary>Field number for the "numberOfTeamsApproved" field.</summary>
    public const int NumberOfTeamsApprovedFieldNumber = 13;
    private long numberOfTeamsApproved_;
    /// <summary>
    /// Number of teams approved since initialization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumberOfTeamsApproved {
      get { return numberOfTeamsApproved_; }
      set {
        numberOfTeamsApproved_ = value;
      }
    }

    /// <summary>Field number for the "numberOfTeamsDenied" field.</summary>
    public const int NumberOfTeamsDeniedFieldNumber = 14;
    private long numberOfTeamsDenied_;
    /// <summary>
    /// Number of teams denied since initialization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumberOfTeamsDenied {
      get { return numberOfTeamsDenied_; }
      set {
        numberOfTeamsDenied_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Initialized != other.Initialized) return false;
      if (EnabledTimestamp != other.EnabledTimestamp) return false;
      if (InitializedTimestamp != other.InitializedTimestamp) return false;
      if (UpdatedTimestamp != other.UpdatedTimestamp) return false;
      if (NumberOfDevicesApproved != other.NumberOfDevicesApproved) return false;
      if (NumberOfDevicesDenied != other.NumberOfDevicesDenied) return false;
      if (NumberOfErrors != other.NumberOfErrors) return false;
      if (SslCertificateExpiration != other.SslCertificateExpiration) return false;
      if (!object.Equals(NotInitializedResponse, other.NotInitializedResponse)) return false;
      if (Config != other.Config) return false;
      if (NumberOfTeamMembershipsApproved != other.NumberOfTeamMembershipsApproved) return false;
      if (NumberOfTeamMembershipsDenied != other.NumberOfTeamMembershipsDenied) return false;
      if (NumberOfTeamsApproved != other.NumberOfTeamsApproved) return false;
      if (NumberOfTeamsDenied != other.NumberOfTeamsDenied) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Initialized != false) hash ^= Initialized.GetHashCode();
      if (EnabledTimestamp != 0L) hash ^= EnabledTimestamp.GetHashCode();
      if (InitializedTimestamp != 0L) hash ^= InitializedTimestamp.GetHashCode();
      if (UpdatedTimestamp != 0L) hash ^= UpdatedTimestamp.GetHashCode();
      if (NumberOfDevicesApproved != 0L) hash ^= NumberOfDevicesApproved.GetHashCode();
      if (NumberOfDevicesDenied != 0L) hash ^= NumberOfDevicesDenied.GetHashCode();
      if (NumberOfErrors != 0L) hash ^= NumberOfErrors.GetHashCode();
      if (SslCertificateExpiration != 0L) hash ^= SslCertificateExpiration.GetHashCode();
      if (notInitializedResponse_ != null) hash ^= NotInitializedResponse.GetHashCode();
      if (Config.Length != 0) hash ^= Config.GetHashCode();
      if (NumberOfTeamMembershipsApproved != 0L) hash ^= NumberOfTeamMembershipsApproved.GetHashCode();
      if (NumberOfTeamMembershipsDenied != 0L) hash ^= NumberOfTeamMembershipsDenied.GetHashCode();
      if (NumberOfTeamsApproved != 0L) hash ^= NumberOfTeamsApproved.GetHashCode();
      if (NumberOfTeamsDenied != 0L) hash ^= NumberOfTeamsDenied.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Initialized != false) {
        output.WriteRawTag(8);
        output.WriteBool(Initialized);
      }
      if (EnabledTimestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EnabledTimestamp);
      }
      if (InitializedTimestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(InitializedTimestamp);
      }
      if (UpdatedTimestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UpdatedTimestamp);
      }
      if (NumberOfDevicesApproved != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NumberOfDevicesApproved);
      }
      if (NumberOfDevicesDenied != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(NumberOfDevicesDenied);
      }
      if (NumberOfErrors != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(NumberOfErrors);
      }
      if (SslCertificateExpiration != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(SslCertificateExpiration);
      }
      if (notInitializedResponse_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(NotInitializedResponse);
      }
      if (Config.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Config);
      }
      if (NumberOfTeamMembershipsApproved != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(NumberOfTeamMembershipsApproved);
      }
      if (NumberOfTeamMembershipsDenied != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(NumberOfTeamMembershipsDenied);
      }
      if (NumberOfTeamsApproved != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(NumberOfTeamsApproved);
      }
      if (NumberOfTeamsDenied != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(NumberOfTeamsDenied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Initialized != false) {
        output.WriteRawTag(8);
        output.WriteBool(Initialized);
      }
      if (EnabledTimestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EnabledTimestamp);
      }
      if (InitializedTimestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(InitializedTimestamp);
      }
      if (UpdatedTimestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UpdatedTimestamp);
      }
      if (NumberOfDevicesApproved != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NumberOfDevicesApproved);
      }
      if (NumberOfDevicesDenied != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(NumberOfDevicesDenied);
      }
      if (NumberOfErrors != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(NumberOfErrors);
      }
      if (SslCertificateExpiration != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(SslCertificateExpiration);
      }
      if (notInitializedResponse_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(NotInitializedResponse);
      }
      if (Config.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Config);
      }
      if (NumberOfTeamMembershipsApproved != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(NumberOfTeamMembershipsApproved);
      }
      if (NumberOfTeamMembershipsDenied != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(NumberOfTeamMembershipsDenied);
      }
      if (NumberOfTeamsApproved != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(NumberOfTeamsApproved);
      }
      if (NumberOfTeamsDenied != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(NumberOfTeamsDenied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Initialized != false) {
        size += 1 + 1;
      }
      if (EnabledTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnabledTimestamp);
      }
      if (InitializedTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InitializedTimestamp);
      }
      if (UpdatedTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedTimestamp);
      }
      if (NumberOfDevicesApproved != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumberOfDevicesApproved);
      }
      if (NumberOfDevicesDenied != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumberOfDevicesDenied);
      }
      if (NumberOfErrors != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumberOfErrors);
      }
      if (SslCertificateExpiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SslCertificateExpiration);
      }
      if (notInitializedResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotInitializedResponse);
      }
      if (Config.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Config);
      }
      if (NumberOfTeamMembershipsApproved != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumberOfTeamMembershipsApproved);
      }
      if (NumberOfTeamMembershipsDenied != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumberOfTeamMembershipsDenied);
      }
      if (NumberOfTeamsApproved != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumberOfTeamsApproved);
      }
      if (NumberOfTeamsDenied != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumberOfTeamsDenied);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.Initialized != false) {
        Initialized = other.Initialized;
      }
      if (other.EnabledTimestamp != 0L) {
        EnabledTimestamp = other.EnabledTimestamp;
      }
      if (other.InitializedTimestamp != 0L) {
        InitializedTimestamp = other.InitializedTimestamp;
      }
      if (other.UpdatedTimestamp != 0L) {
        UpdatedTimestamp = other.UpdatedTimestamp;
      }
      if (other.NumberOfDevicesApproved != 0L) {
        NumberOfDevicesApproved = other.NumberOfDevicesApproved;
      }
      if (other.NumberOfDevicesDenied != 0L) {
        NumberOfDevicesDenied = other.NumberOfDevicesDenied;
      }
      if (other.NumberOfErrors != 0L) {
        NumberOfErrors = other.NumberOfErrors;
      }
      if (other.SslCertificateExpiration != 0L) {
        SslCertificateExpiration = other.SslCertificateExpiration;
      }
      if (other.notInitializedResponse_ != null) {
        if (notInitializedResponse_ == null) {
          NotInitializedResponse = new global::Automator.NotInitializedResponse();
        }
        NotInitializedResponse.MergeFrom(other.NotInitializedResponse);
      }
      if (other.Config.Length != 0) {
        Config = other.Config;
      }
      if (other.NumberOfTeamMembershipsApproved != 0L) {
        NumberOfTeamMembershipsApproved = other.NumberOfTeamMembershipsApproved;
      }
      if (other.NumberOfTeamMembershipsDenied != 0L) {
        NumberOfTeamMembershipsDenied = other.NumberOfTeamMembershipsDenied;
      }
      if (other.NumberOfTeamsApproved != 0L) {
        NumberOfTeamsApproved = other.NumberOfTeamsApproved;
      }
      if (other.NumberOfTeamsDenied != 0L) {
        NumberOfTeamsDenied = other.NumberOfTeamsDenied;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Initialized = input.ReadBool();
            break;
          }
          case 16: {
            EnabledTimestamp = input.ReadInt64();
            break;
          }
          case 24: {
            InitializedTimestamp = input.ReadInt64();
            break;
          }
          case 32: {
            UpdatedTimestamp = input.ReadInt64();
            break;
          }
          case 40: {
            NumberOfDevicesApproved = input.ReadInt64();
            break;
          }
          case 48: {
            NumberOfDevicesDenied = input.ReadInt64();
            break;
          }
          case 56: {
            NumberOfErrors = input.ReadInt64();
            break;
          }
          case 64: {
            SslCertificateExpiration = input.ReadInt64();
            break;
          }
          case 74: {
            if (notInitializedResponse_ == null) {
              NotInitializedResponse = new global::Automator.NotInitializedResponse();
            }
            input.ReadMessage(NotInitializedResponse);
            break;
          }
          case 82: {
            Config = input.ReadBytes();
            break;
          }
          case 88: {
            NumberOfTeamMembershipsApproved = input.ReadInt64();
            break;
          }
          case 96: {
            NumberOfTeamMembershipsDenied = input.ReadInt64();
            break;
          }
          case 104: {
            NumberOfTeamsApproved = input.ReadInt64();
            break;
          }
          case 112: {
            NumberOfTeamsDenied = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Initialized = input.ReadBool();
            break;
          }
          case 16: {
            EnabledTimestamp = input.ReadInt64();
            break;
          }
          case 24: {
            InitializedTimestamp = input.ReadInt64();
            break;
          }
          case 32: {
            UpdatedTimestamp = input.ReadInt64();
            break;
          }
          case 40: {
            NumberOfDevicesApproved = input.ReadInt64();
            break;
          }
          case 48: {
            NumberOfDevicesDenied = input.ReadInt64();
            break;
          }
          case 56: {
            NumberOfErrors = input.ReadInt64();
            break;
          }
          case 64: {
            SslCertificateExpiration = input.ReadInt64();
            break;
          }
          case 74: {
            if (notInitializedResponse_ == null) {
              NotInitializedResponse = new global::Automator.NotInitializedResponse();
            }
            input.ReadMessage(NotInitializedResponse);
            break;
          }
          case 82: {
            Config = input.ReadBytes();
            break;
          }
          case 88: {
            NumberOfTeamMembershipsApproved = input.ReadInt64();
            break;
          }
          case 96: {
            NumberOfTeamMembershipsDenied = input.ReadInt64();
            break;
          }
          case 104: {
            NumberOfTeamsApproved = input.ReadInt64();
            break;
          }
          case 112: {
            NumberOfTeamsDenied = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// ErrorResponse
  /// Includes error information, if the Automator encountered an error during processing.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ErrorResponse : pb::IMessage<ErrorResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ErrorResponse> _parser = new pb::MessageParser<ErrorResponse>(() => new ErrorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ErrorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ErrorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ErrorResponse(ErrorResponse other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ErrorResponse Clone() {
      return new ErrorResponse(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    /// <summary>
    /// An error message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ErrorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ErrorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ErrorResponse other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// One entry from the log.
  /// Normally, log entries will be sorted in reverse chronological order (newest first).
  ///
  /// Included in AdminResponse.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LogEntry : pb::IMessage<LogEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LogEntry> _parser = new pb::MessageParser<LogEntry>(() => new LogEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LogEntry(LogEntry other) : this() {
      serverTime_ = other.serverTime_;
      messageLevel_ = other.messageLevel_;
      component_ = other.component_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LogEntry Clone() {
      return new LogEntry(this);
    }

    /// <summary>Field number for the "serverTime" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private string serverTime_ = "";
    /// <summary>
    /// Time on the server, in ISO-8601 format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messageLevel" field.</summary>
    public const int MessageLevelFieldNumber = 2;
    private string messageLevel_ = "";
    /// <summary>
    /// INFO, DEBUG, ERROR, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MessageLevel {
      get { return messageLevel_; }
      set {
        messageLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "component" field.</summary>
    public const int ComponentFieldNumber = 3;
    private string component_ = "";
    /// <summary>
    /// The component doing the logging, such as AutomatorStatus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Component {
      get { return component_; }
      set {
        component_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    /// <summary>
    /// The log entry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerTime != other.ServerTime) return false;
      if (MessageLevel != other.MessageLevel) return false;
      if (Component != other.Component) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerTime.Length != 0) hash ^= ServerTime.GetHashCode();
      if (MessageLevel.Length != 0) hash ^= MessageLevel.GetHashCode();
      if (Component.Length != 0) hash ^= Component.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ServerTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerTime);
      }
      if (MessageLevel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageLevel);
      }
      if (Component.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Component);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ServerTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerTime);
      }
      if (MessageLevel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageLevel);
      }
      if (Component.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Component);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ServerTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerTime);
      }
      if (MessageLevel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageLevel);
      }
      if (Component.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Component);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LogEntry other) {
      if (other == null) {
        return;
      }
      if (other.ServerTime.Length != 0) {
        ServerTime = other.ServerTime;
      }
      if (other.MessageLevel.Length != 0) {
        MessageLevel = other.MessageLevel;
      }
      if (other.Component.Length != 0) {
        Component = other.Component;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerTime = input.ReadString();
            break;
          }
          case 18: {
            MessageLevel = input.ReadString();
            break;
          }
          case 26: {
            Component = input.ReadString();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServerTime = input.ReadString();
            break;
          }
          case 18: {
            MessageLevel = input.ReadString();
            break;
          }
          case 26: {
            Component = input.ReadString();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// AdminResponse
  ///
  /// This is sent in reply to an Admin request.
  /// There can be more than one Automator on a Node so that's why this is a multi-response.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminResponse : pb::IMessage<AdminResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminResponse> _parser = new pb::MessageParser<AdminResponse>(() => new AdminResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminResponse(AdminResponse other) : this() {
      success_ = other.success_;
      message_ = other.message_;
      automatorInfo_ = other.automatorInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminResponse Clone() {
      return new AdminResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    /// Was the call successful?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// If non-empty, should be displayed to the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "automatorInfo" field.</summary>
    public const int AutomatorInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Automator.AutomatorInfo> _repeated_automatorInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Automator.AutomatorInfo.Parser);
    private readonly pbc::RepeatedField<global::Automator.AutomatorInfo> automatorInfo_ = new pbc::RepeatedField<global::Automator.AutomatorInfo>();
    /// <summary>
    /// Information requested by the client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.AutomatorInfo> AutomatorInfo {
      get { return automatorInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Message != other.Message) return false;
      if(!automatorInfo_.Equals(other.automatorInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= automatorInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      automatorInfo_.WriteTo(output, _repeated_automatorInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      automatorInfo_.WriteTo(ref output, _repeated_automatorInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += automatorInfo_.CalculateSize(_repeated_automatorInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      automatorInfo_.Add(other.automatorInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            automatorInfo_.AddEntriesFrom(input, _repeated_automatorInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            automatorInfo_.AddEntriesFrom(ref input, _repeated_automatorInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Information about an automator for a client that is configuring an Automator.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AutomatorInfo : pb::IMessage<AutomatorInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AutomatorInfo> _parser = new pb::MessageParser<AutomatorInfo>(() => new AutomatorInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AutomatorInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorInfo(AutomatorInfo other) : this() {
      automatorId_ = other.automatorId_;
      nodeId_ = other.nodeId_;
      name_ = other.name_;
      enabled_ = other.enabled_;
      url_ = other.url_;
      automatorSkills_ = other.automatorSkills_.Clone();
      automatorSettingValues_ = other.automatorSettingValues_.Clone();
      status_ = other.status_ != null ? other.status_.Clone() : null;
      logEntries_ = other.logEntries_.Clone();
      automatorState_ = other.automatorState_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorInfo Clone() {
      return new AutomatorInfo(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// the automator in question
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private long nodeId_;
    /// <summary>
    /// The ID of the node the automator is attached to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// The name of the automator
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 4;
    private bool enabled_;
    /// <summary>
    /// if true, the automator is enabled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 5;
    private string url_ = "";
    /// <summary>
    /// The URL where the automator can be contacted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "automatorSkills" field.</summary>
    public const int AutomatorSkillsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Automator.AutomatorSkill> _repeated_automatorSkills_codec
        = pb::FieldCodec.ForMessage(50, global::Automator.AutomatorSkill.Parser);
    private readonly pbc::RepeatedField<global::Automator.AutomatorSkill> automatorSkills_ = new pbc::RepeatedField<global::Automator.AutomatorSkill>();
    /// <summary>
    /// An automator has one or more skills
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.AutomatorSkill> AutomatorSkills {
      get { return automatorSkills_; }
    }

    /// <summary>Field number for the "automatorSettingValues" field.</summary>
    public const int AutomatorSettingValuesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Automator.AutomatorSettingValue> _repeated_automatorSettingValues_codec
        = pb::FieldCodec.ForMessage(58, global::Automator.AutomatorSettingValue.Parser);
    private readonly pbc::RepeatedField<global::Automator.AutomatorSettingValue> automatorSettingValues_ = new pbc::RepeatedField<global::Automator.AutomatorSettingValue>();
    /// <summary>
    /// array of settings to display on the Automator Admin page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.AutomatorSettingValue> AutomatorSettingValues {
      get { return automatorSettingValues_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private global::Automator.StatusResponse status_;
    /// <summary>
    /// status received from the Automator, if requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.StatusResponse Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "logEntries" field.</summary>
    public const int LogEntriesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Automator.LogEntry> _repeated_logEntries_codec
        = pb::FieldCodec.ForMessage(74, global::Automator.LogEntry.Parser);
    private readonly pbc::RepeatedField<global::Automator.LogEntry> logEntries_ = new pbc::RepeatedField<global::Automator.LogEntry>();
    /// <summary>
    /// Entries from the remote Automator log, if requested
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.LogEntry> LogEntries {
      get { return logEntries_; }
    }

    /// <summary>Field number for the "automatorState" field.</summary>
    public const int AutomatorStateFieldNumber = 10;
    private global::Automator.AutomatorState automatorState_ = global::Automator.AutomatorState.UnknownState;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.AutomatorState AutomatorState {
      get { return automatorState_; }
      set {
        automatorState_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 11;
    private string version_ = "";
    /// <summary>
    /// Version of the Automator instance.  Will be empty if unknown. Automators v3.1.0 and above can supply this value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AutomatorInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AutomatorInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (NodeId != other.NodeId) return false;
      if (Name != other.Name) return false;
      if (Enabled != other.Enabled) return false;
      if (Url != other.Url) return false;
      if(!automatorSkills_.Equals(other.automatorSkills_)) return false;
      if(!automatorSettingValues_.Equals(other.automatorSettingValues_)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if(!logEntries_.Equals(other.logEntries_)) return false;
      if (AutomatorState != other.AutomatorState) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      hash ^= automatorSkills_.GetHashCode();
      hash ^= automatorSettingValues_.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= logEntries_.GetHashCode();
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) hash ^= AutomatorState.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NodeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Enabled != false) {
        output.WriteRawTag(32);
        output.WriteBool(Enabled);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Url);
      }
      automatorSkills_.WriteTo(output, _repeated_automatorSkills_codec);
      automatorSettingValues_.WriteTo(output, _repeated_automatorSettingValues_codec);
      if (status_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Status);
      }
      logEntries_.WriteTo(output, _repeated_logEntries_codec);
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        output.WriteRawTag(80);
        output.WriteEnum((int) AutomatorState);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (NodeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NodeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Enabled != false) {
        output.WriteRawTag(32);
        output.WriteBool(Enabled);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Url);
      }
      automatorSkills_.WriteTo(ref output, _repeated_automatorSkills_codec);
      automatorSettingValues_.WriteTo(ref output, _repeated_automatorSettingValues_codec);
      if (status_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Status);
      }
      logEntries_.WriteTo(ref output, _repeated_logEntries_codec);
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        output.WriteRawTag(80);
        output.WriteEnum((int) AutomatorState);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      size += automatorSkills_.CalculateSize(_repeated_automatorSkills_codec);
      size += automatorSettingValues_.CalculateSize(_repeated_automatorSettingValues_codec);
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += logEntries_.CalculateSize(_repeated_logEntries_codec);
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutomatorState);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AutomatorInfo other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      automatorSkills_.Add(other.automatorSkills_);
      automatorSettingValues_.Add(other.automatorSettingValues_);
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Automator.StatusResponse();
        }
        Status.MergeFrom(other.Status);
      }
      logEntries_.Add(other.logEntries_);
      if (other.AutomatorState != global::Automator.AutomatorState.UnknownState) {
        AutomatorState = other.AutomatorState;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            NodeId = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Enabled = input.ReadBool();
            break;
          }
          case 42: {
            Url = input.ReadString();
            break;
          }
          case 50: {
            automatorSkills_.AddEntriesFrom(input, _repeated_automatorSkills_codec);
            break;
          }
          case 58: {
            automatorSettingValues_.AddEntriesFrom(input, _repeated_automatorSettingValues_codec);
            break;
          }
          case 66: {
            if (status_ == null) {
              Status = new global::Automator.StatusResponse();
            }
            input.ReadMessage(Status);
            break;
          }
          case 74: {
            logEntries_.AddEntriesFrom(input, _repeated_logEntries_codec);
            break;
          }
          case 80: {
            AutomatorState = (global::Automator.AutomatorState) input.ReadEnum();
            break;
          }
          case 90: {
            Version = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            NodeId = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Enabled = input.ReadBool();
            break;
          }
          case 42: {
            Url = input.ReadString();
            break;
          }
          case 50: {
            automatorSkills_.AddEntriesFrom(ref input, _repeated_automatorSkills_codec);
            break;
          }
          case 58: {
            automatorSettingValues_.AddEntriesFrom(ref input, _repeated_automatorSettingValues_codec);
            break;
          }
          case 66: {
            if (status_ == null) {
              Status = new global::Automator.StatusResponse();
            }
            input.ReadMessage(Status);
            break;
          }
          case 74: {
            logEntries_.AddEntriesFrom(ref input, _repeated_logEntries_codec);
            break;
          }
          case 80: {
            AutomatorState = (global::Automator.AutomatorState) input.ReadEnum();
            break;
          }
          case 90: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// AdminCreateAutomatorRequest
  /// Create an automator on a Node.
  ///
  /// Returns AdminResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminCreateAutomatorRequest : pb::IMessage<AdminCreateAutomatorRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminCreateAutomatorRequest> _parser = new pb::MessageParser<AdminCreateAutomatorRequest>(() => new AdminCreateAutomatorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminCreateAutomatorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminCreateAutomatorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminCreateAutomatorRequest(AdminCreateAutomatorRequest other) : this() {
      nodeId_ = other.nodeId_;
      name_ = other.name_;
      skill_ = other.skill_ != null ? other.skill_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminCreateAutomatorRequest Clone() {
      return new AdminCreateAutomatorRequest(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private long nodeId_;
    /// <summary>
    /// An Automator belongs to a Node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the automator
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skill" field.</summary>
    public const int SkillFieldNumber = 3;
    private global::Automator.AutomatorSkill skill_;
    /// <summary>
    /// Initial skill of the Automator.  If none, it will be assigned DEVICE_APPROVAL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.AutomatorSkill Skill {
      get { return skill_; }
      set {
        skill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminCreateAutomatorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminCreateAutomatorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Skill, other.Skill)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (skill_ != null) hash ^= Skill.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NodeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (skill_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Skill);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NodeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (skill_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Skill);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (skill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Skill);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminCreateAutomatorRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.skill_ != null) {
        if (skill_ == null) {
          Skill = new global::Automator.AutomatorSkill();
        }
        Skill.MergeFrom(other.Skill);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (skill_ == null) {
              Skill = new global::Automator.AutomatorSkill();
            }
            input.ReadMessage(Skill);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NodeId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (skill_ == null) {
              Skill = new global::Automator.AutomatorSkill();
            }
            input.ReadMessage(Skill);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// AdminDeleteAutomatorRequest
  ///
  /// Delete an automator and its settings.
  /// Does not notify or affect the actual Automator running at the client site.
  ///
  /// Returns AdminResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminDeleteAutomatorRequest : pb::IMessage<AdminDeleteAutomatorRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminDeleteAutomatorRequest> _parser = new pb::MessageParser<AdminDeleteAutomatorRequest>(() => new AdminDeleteAutomatorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminDeleteAutomatorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminDeleteAutomatorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminDeleteAutomatorRequest(AdminDeleteAutomatorRequest other) : this() {
      automatorId_ = other.automatorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminDeleteAutomatorRequest Clone() {
      return new AdminDeleteAutomatorRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The automator to delete
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminDeleteAutomatorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminDeleteAutomatorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminDeleteAutomatorRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Retrieve automators on a node.
  /// The info should also be in enterprise_summary or whatever it is called.
  ///
  /// If you want info on a particular automator, use automator_get.
  /// Returns AdminResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminGetAutomatorsOnNodeRequest : pb::IMessage<AdminGetAutomatorsOnNodeRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminGetAutomatorsOnNodeRequest> _parser = new pb::MessageParser<AdminGetAutomatorsOnNodeRequest>(() => new AdminGetAutomatorsOnNodeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminGetAutomatorsOnNodeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminGetAutomatorsOnNodeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminGetAutomatorsOnNodeRequest(AdminGetAutomatorsOnNodeRequest other) : this() {
      nodeId_ = other.nodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminGetAutomatorsOnNodeRequest Clone() {
      return new AdminGetAutomatorsOnNodeRequest(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private long nodeId_;
    /// <summary>
    /// The node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminGetAutomatorsOnNodeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminGetAutomatorsOnNodeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminGetAutomatorsOnNodeRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NodeId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Retrieve automators in an enterprise.
  /// The info should also be in enterprise_summary or whatever it is called.
  ///
  /// If you want info on a particular automator, use automator_get.
  /// If you want a list of automators on a node, use automator_get_on_node
  /// Returns AdminResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminGetAutomatorsForEnterpriseRequest : pb::IMessage<AdminGetAutomatorsForEnterpriseRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminGetAutomatorsForEnterpriseRequest> _parser = new pb::MessageParser<AdminGetAutomatorsForEnterpriseRequest>(() => new AdminGetAutomatorsForEnterpriseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminGetAutomatorsForEnterpriseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminGetAutomatorsForEnterpriseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminGetAutomatorsForEnterpriseRequest(AdminGetAutomatorsForEnterpriseRequest other) : this() {
      enterpriseId_ = other.enterpriseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminGetAutomatorsForEnterpriseRequest Clone() {
      return new AdminGetAutomatorsForEnterpriseRequest(this);
    }

    /// <summary>Field number for the "enterpriseId" field.</summary>
    public const int EnterpriseIdFieldNumber = 1;
    private int enterpriseId_;
    /// <summary>
    /// The enterprise ID (short form)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EnterpriseId {
      get { return enterpriseId_; }
      set {
        enterpriseId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminGetAutomatorsForEnterpriseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminGetAutomatorsForEnterpriseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseId != other.EnterpriseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseId != 0) hash ^= EnterpriseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EnterpriseId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EnterpriseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EnterpriseId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EnterpriseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnterpriseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminGetAutomatorsForEnterpriseRequest other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseId != 0) {
        EnterpriseId = other.EnterpriseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EnterpriseId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Retrieve information about a specific automator.
  ///
  /// Returns AdminResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminGetAutomatorRequest : pb::IMessage<AdminGetAutomatorRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminGetAutomatorRequest> _parser = new pb::MessageParser<AdminGetAutomatorRequest>(() => new AdminGetAutomatorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminGetAutomatorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminGetAutomatorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminGetAutomatorRequest(AdminGetAutomatorRequest other) : this() {
      automatorId_ = other.automatorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminGetAutomatorRequest Clone() {
      return new AdminGetAutomatorRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The automator whose status is requested
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminGetAutomatorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminGetAutomatorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminGetAutomatorRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Enable or disable an automator.
  ///
  /// Returns AdminResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminEnableAutomatorRequest : pb::IMessage<AdminEnableAutomatorRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminEnableAutomatorRequest> _parser = new pb::MessageParser<AdminEnableAutomatorRequest>(() => new AdminEnableAutomatorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminEnableAutomatorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminEnableAutomatorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminEnableAutomatorRequest(AdminEnableAutomatorRequest other) : this() {
      automatorId_ = other.automatorId_;
      enabled_ = other.enabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminEnableAutomatorRequest Clone() {
      return new AdminEnableAutomatorRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The automator to enable or disable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    /// <summary>
    /// If true the Automator is enabled, otherwise it is disabled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminEnableAutomatorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminEnableAutomatorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (Enabled != other.Enabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminEnableAutomatorRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Edit settings on the automator.
  ///
  /// If a value is non-empty, it will be set on the Automator.
  ///
  /// Returns AdminResponse with all current settings
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminEditAutomatorRequest : pb::IMessage<AdminEditAutomatorRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminEditAutomatorRequest> _parser = new pb::MessageParser<AdminEditAutomatorRequest>(() => new AdminEditAutomatorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminEditAutomatorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminEditAutomatorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminEditAutomatorRequest(AdminEditAutomatorRequest other) : this() {
      automatorId_ = other.automatorId_;
      name_ = other.name_;
      enabled_ = other.enabled_;
      url_ = other.url_;
      skillTypes_ = other.skillTypes_.Clone();
      automatorSettingValues_ = other.automatorSettingValues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminEditAutomatorRequest Clone() {
      return new AdminEditAutomatorRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The automator being edited
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// new name, if non-empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 3;
    private bool enabled_;
    /// <summary>
    /// enabled or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 4;
    private string url_ = "";
    /// <summary>
    /// new url, if non-empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skillTypes" field.</summary>
    public const int SkillTypesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Automator.SkillType> _repeated_skillTypes_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Automator.SkillType) x);
    private readonly pbc::RepeatedField<global::Automator.SkillType> skillTypes_ = new pbc::RepeatedField<global::Automator.SkillType>();
    /// <summary>
    /// The skills of this Automator.  If non-empty, the skills list will be updated to this list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.SkillType> SkillTypes {
      get { return skillTypes_; }
    }

    /// <summary>Field number for the "automatorSettingValues" field.</summary>
    public const int AutomatorSettingValuesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Automator.AutomatorSettingValue> _repeated_automatorSettingValues_codec
        = pb::FieldCodec.ForMessage(50, global::Automator.AutomatorSettingValue.Parser);
    private readonly pbc::RepeatedField<global::Automator.AutomatorSettingValue> automatorSettingValues_ = new pbc::RepeatedField<global::Automator.AutomatorSettingValue>();
    /// <summary>
    /// If non-empty, the setting values will be set to the supplied values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.AutomatorSettingValue> AutomatorSettingValues {
      get { return automatorSettingValues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminEditAutomatorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminEditAutomatorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (Name != other.Name) return false;
      if (Enabled != other.Enabled) return false;
      if (Url != other.Url) return false;
      if(!skillTypes_.Equals(other.skillTypes_)) return false;
      if(!automatorSettingValues_.Equals(other.automatorSettingValues_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      hash ^= skillTypes_.GetHashCode();
      hash ^= automatorSettingValues_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Enabled != false) {
        output.WriteRawTag(24);
        output.WriteBool(Enabled);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Url);
      }
      skillTypes_.WriteTo(output, _repeated_skillTypes_codec);
      automatorSettingValues_.WriteTo(output, _repeated_automatorSettingValues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Enabled != false) {
        output.WriteRawTag(24);
        output.WriteBool(Enabled);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Url);
      }
      skillTypes_.WriteTo(ref output, _repeated_skillTypes_codec);
      automatorSettingValues_.WriteTo(ref output, _repeated_automatorSettingValues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      size += skillTypes_.CalculateSize(_repeated_skillTypes_codec);
      size += automatorSettingValues_.CalculateSize(_repeated_automatorSettingValues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminEditAutomatorRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      skillTypes_.Add(other.skillTypes_);
      automatorSettingValues_.Add(other.automatorSettingValues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Enabled = input.ReadBool();
            break;
          }
          case 34: {
            Url = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            skillTypes_.AddEntriesFrom(input, _repeated_skillTypes_codec);
            break;
          }
          case 50: {
            automatorSettingValues_.AddEntriesFrom(input, _repeated_automatorSettingValues_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Enabled = input.ReadBool();
            break;
          }
          case 34: {
            Url = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            skillTypes_.AddEntriesFrom(ref input, _repeated_skillTypes_codec);
            break;
          }
          case 50: {
            automatorSettingValues_.AddEntriesFrom(ref input, _repeated_automatorSettingValues_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Initiate a setup operation with the automator via Keeper.
  /// Step 1 is to request the Automator's ECC public key.  Use automatorState = NEEDS_CRYPTO_STEP_1
  /// Step 2 is to send the ec_enterprise_private_key encrypted with the public key. Use automatorState = NEEDS_CRYPTO_STEP_2
  ///
  /// Returns AdminSetupAutomatorResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminSetupAutomatorRequest : pb::IMessage<AdminSetupAutomatorRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminSetupAutomatorRequest> _parser = new pb::MessageParser<AdminSetupAutomatorRequest>(() => new AdminSetupAutomatorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminSetupAutomatorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminSetupAutomatorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminSetupAutomatorRequest(AdminSetupAutomatorRequest other) : this() {
      automatorId_ = other.automatorId_;
      automatorState_ = other.automatorState_;
      encryptedEccEnterprisePrivateKey_ = other.encryptedEccEnterprisePrivateKey_;
      encryptedRsaEnterprisePrivateKey_ = other.encryptedRsaEnterprisePrivateKey_;
      skillTypes_ = other.skillTypes_.Clone();
      encryptedTreeKey_ = other.encryptedTreeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminSetupAutomatorRequest Clone() {
      return new AdminSetupAutomatorRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The automator being set up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "automatorState" field.</summary>
    public const int AutomatorStateFieldNumber = 2;
    private global::Automator.AutomatorState automatorState_ = global::Automator.AutomatorState.UnknownState;
    /// <summary>
    /// The state of the Automator at this time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.AutomatorState AutomatorState {
      get { return automatorState_; }
      set {
        automatorState_ = value;
      }
    }

    /// <summary>Field number for the "encryptedEccEnterprisePrivateKey" field.</summary>
    public const int EncryptedEccEnterprisePrivateKeyFieldNumber = 3;
    private pb::ByteString encryptedEccEnterprisePrivateKey_ = pb::ByteString.Empty;
    /// <summary>
    /// ecc_enterprise_private_key encrypted with the Automator's ECC public key.  Required if state is NEEDS_CRYPTO_STEP_2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedEccEnterprisePrivateKey {
      get { return encryptedEccEnterprisePrivateKey_; }
      set {
        encryptedEccEnterprisePrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedRsaEnterprisePrivateKey" field.</summary>
    public const int EncryptedRsaEnterprisePrivateKeyFieldNumber = 4;
    private pb::ByteString encryptedRsaEnterprisePrivateKey_ = pb::ByteString.Empty;
    /// <summary>
    /// enterprise_private_key encrypted with the Automator's ECC public key.  Required if state is NEEDS_CRYPTO_STEP_2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedRsaEnterprisePrivateKey {
      get { return encryptedRsaEnterprisePrivateKey_; }
      set {
        encryptedRsaEnterprisePrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skillTypes" field.</summary>
    public const int SkillTypesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Automator.SkillType> _repeated_skillTypes_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Automator.SkillType) x);
    private readonly pbc::RepeatedField<global::Automator.SkillType> skillTypes_ = new pbc::RepeatedField<global::Automator.SkillType>();
    /// <summary>
    /// Which skill(s) do you want to set up?  If empty, defaults to device approval for backward compatibility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.SkillType> SkillTypes {
      get { return skillTypes_; }
    }

    /// <summary>Field number for the "encryptedTreeKey" field.</summary>
    public const int EncryptedTreeKeyFieldNumber = 6;
    private pb::ByteString encryptedTreeKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The enterprise's tree key encrypted with the Automator's ECC public key. Required if state is NEEDS_CRYPTO_STEP_2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedTreeKey {
      get { return encryptedTreeKey_; }
      set {
        encryptedTreeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminSetupAutomatorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminSetupAutomatorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (AutomatorState != other.AutomatorState) return false;
      if (EncryptedEccEnterprisePrivateKey != other.EncryptedEccEnterprisePrivateKey) return false;
      if (EncryptedRsaEnterprisePrivateKey != other.EncryptedRsaEnterprisePrivateKey) return false;
      if(!skillTypes_.Equals(other.skillTypes_)) return false;
      if (EncryptedTreeKey != other.EncryptedTreeKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) hash ^= AutomatorState.GetHashCode();
      if (EncryptedEccEnterprisePrivateKey.Length != 0) hash ^= EncryptedEccEnterprisePrivateKey.GetHashCode();
      if (EncryptedRsaEnterprisePrivateKey.Length != 0) hash ^= EncryptedRsaEnterprisePrivateKey.GetHashCode();
      hash ^= skillTypes_.GetHashCode();
      if (EncryptedTreeKey.Length != 0) hash ^= EncryptedTreeKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AutomatorState);
      }
      if (EncryptedEccEnterprisePrivateKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedEccEnterprisePrivateKey);
      }
      if (EncryptedRsaEnterprisePrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedRsaEnterprisePrivateKey);
      }
      skillTypes_.WriteTo(output, _repeated_skillTypes_codec);
      if (EncryptedTreeKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(EncryptedTreeKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AutomatorState);
      }
      if (EncryptedEccEnterprisePrivateKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedEccEnterprisePrivateKey);
      }
      if (EncryptedRsaEnterprisePrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedRsaEnterprisePrivateKey);
      }
      skillTypes_.WriteTo(ref output, _repeated_skillTypes_codec);
      if (EncryptedTreeKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(EncryptedTreeKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutomatorState);
      }
      if (EncryptedEccEnterprisePrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedEccEnterprisePrivateKey);
      }
      if (EncryptedRsaEnterprisePrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedRsaEnterprisePrivateKey);
      }
      size += skillTypes_.CalculateSize(_repeated_skillTypes_codec);
      if (EncryptedTreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTreeKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminSetupAutomatorRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.AutomatorState != global::Automator.AutomatorState.UnknownState) {
        AutomatorState = other.AutomatorState;
      }
      if (other.EncryptedEccEnterprisePrivateKey.Length != 0) {
        EncryptedEccEnterprisePrivateKey = other.EncryptedEccEnterprisePrivateKey;
      }
      if (other.EncryptedRsaEnterprisePrivateKey.Length != 0) {
        EncryptedRsaEnterprisePrivateKey = other.EncryptedRsaEnterprisePrivateKey;
      }
      skillTypes_.Add(other.skillTypes_);
      if (other.EncryptedTreeKey.Length != 0) {
        EncryptedTreeKey = other.EncryptedTreeKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            AutomatorState = (global::Automator.AutomatorState) input.ReadEnum();
            break;
          }
          case 26: {
            EncryptedEccEnterprisePrivateKey = input.ReadBytes();
            break;
          }
          case 34: {
            EncryptedRsaEnterprisePrivateKey = input.ReadBytes();
            break;
          }
          case 42:
          case 40: {
            skillTypes_.AddEntriesFrom(input, _repeated_skillTypes_codec);
            break;
          }
          case 50: {
            EncryptedTreeKey = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            AutomatorState = (global::Automator.AutomatorState) input.ReadEnum();
            break;
          }
          case 26: {
            EncryptedEccEnterprisePrivateKey = input.ReadBytes();
            break;
          }
          case 34: {
            EncryptedRsaEnterprisePrivateKey = input.ReadBytes();
            break;
          }
          case 42:
          case 40: {
            skillTypes_.AddEntriesFrom(ref input, _repeated_skillTypes_codec);
            break;
          }
          case 50: {
            EncryptedTreeKey = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// The response to an AdminSetupAutomatorRequest.
  /// The automatorEccPublicKey fields will be non-empty iff the AutomatorState is NEEDS_CRYPTO_STEP_2
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminSetupAutomatorResponse : pb::IMessage<AdminSetupAutomatorResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminSetupAutomatorResponse> _parser = new pb::MessageParser<AdminSetupAutomatorResponse>(() => new AdminSetupAutomatorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminSetupAutomatorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminSetupAutomatorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminSetupAutomatorResponse(AdminSetupAutomatorResponse other) : this() {
      success_ = other.success_;
      message_ = other.message_;
      automatorId_ = other.automatorId_;
      automatorState_ = other.automatorState_;
      automatorEccPublicKey_ = other.automatorEccPublicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminSetupAutomatorResponse Clone() {
      return new AdminSetupAutomatorResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    /// Successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// Error message if not successful
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 3;
    private long automatorId_;
    /// <summary>
    /// The automator being setup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "automatorState" field.</summary>
    public const int AutomatorStateFieldNumber = 4;
    private global::Automator.AutomatorState automatorState_ = global::Automator.AutomatorState.UnknownState;
    /// <summary>
    /// The state of the automator at this time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.AutomatorState AutomatorState {
      get { return automatorState_; }
      set {
        automatorState_ = value;
      }
    }

    /// <summary>Field number for the "automatorEccPublicKey" field.</summary>
    public const int AutomatorEccPublicKeyFieldNumber = 5;
    private pb::ByteString automatorEccPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The public key of this automator in raw (65-byte) format, used for sending data to the automator. Only present if state is NEEDS_CRYPTO_STEP_2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString AutomatorEccPublicKey {
      get { return automatorEccPublicKey_; }
      set {
        automatorEccPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminSetupAutomatorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminSetupAutomatorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Message != other.Message) return false;
      if (AutomatorId != other.AutomatorId) return false;
      if (AutomatorState != other.AutomatorState) return false;
      if (AutomatorEccPublicKey != other.AutomatorEccPublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) hash ^= AutomatorState.GetHashCode();
      if (AutomatorEccPublicKey.Length != 0) hash ^= AutomatorEccPublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (AutomatorId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AutomatorId);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AutomatorState);
      }
      if (AutomatorEccPublicKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(AutomatorEccPublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (AutomatorId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AutomatorId);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AutomatorState);
      }
      if (AutomatorEccPublicKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(AutomatorEccPublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (AutomatorState != global::Automator.AutomatorState.UnknownState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutomatorState);
      }
      if (AutomatorEccPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AutomatorEccPublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminSetupAutomatorResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.AutomatorState != global::Automator.AutomatorState.UnknownState) {
        AutomatorState = other.AutomatorState;
      }
      if (other.AutomatorEccPublicKey.Length != 0) {
        AutomatorEccPublicKey = other.AutomatorEccPublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 24: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 32: {
            AutomatorState = (global::Automator.AutomatorState) input.ReadEnum();
            break;
          }
          case 42: {
            AutomatorEccPublicKey = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 24: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 32: {
            AutomatorState = (global::Automator.AutomatorState) input.ReadEnum();
            break;
          }
          case 42: {
            AutomatorEccPublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Retrieve the list of known skills that Automators can have.
  /// This is NOT the list of skills that a particular Automator has.
  ///
  /// Returns AdminAutomatorSkillsResponse.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminAutomatorSkillsRequest : pb::IMessage<AdminAutomatorSkillsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminAutomatorSkillsRequest> _parser = new pb::MessageParser<AdminAutomatorSkillsRequest>(() => new AdminAutomatorSkillsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminAutomatorSkillsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorSkillsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorSkillsRequest(AdminAutomatorSkillsRequest other) : this() {
      automatorId_ = other.automatorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorSkillsRequest Clone() {
      return new AdminAutomatorSkillsRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// Not currently used but may be used in the future to filter the returned list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminAutomatorSkillsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminAutomatorSkillsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminAutomatorSkillsRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Information about a specific defined skill such as Device Approval.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AutomatorSkill : pb::IMessage<AutomatorSkill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AutomatorSkill> _parser = new pb::MessageParser<AutomatorSkill>(() => new AutomatorSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AutomatorSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorSkill(AutomatorSkill other) : this() {
      skillType_ = other.skillType_;
      name_ = other.name_;
      translatedName_ = other.translatedName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AutomatorSkill Clone() {
      return new AutomatorSkill(this);
    }

    /// <summary>Field number for the "skillType" field.</summary>
    public const int SkillTypeFieldNumber = 1;
    private global::Automator.SkillType skillType_ = global::Automator.SkillType.UnknownSkillType;
    /// <summary>
    /// The actual skill type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.SkillType SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// An internal ID tag, to be translated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "translatedName" field.</summary>
    public const int TranslatedNameFieldNumber = 3;
    private string translatedName_ = "";
    /// <summary>
    /// The skill name translated into the destination language
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TranslatedName {
      get { return translatedName_; }
      set {
        translatedName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AutomatorSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AutomatorSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillType != other.SkillType) return false;
      if (Name != other.Name) return false;
      if (TranslatedName != other.TranslatedName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillType != global::Automator.SkillType.UnknownSkillType) hash ^= SkillType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TranslatedName.Length != 0) hash ^= TranslatedName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SkillType != global::Automator.SkillType.UnknownSkillType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SkillType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (TranslatedName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TranslatedName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SkillType != global::Automator.SkillType.UnknownSkillType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SkillType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (TranslatedName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TranslatedName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SkillType != global::Automator.SkillType.UnknownSkillType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SkillType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TranslatedName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TranslatedName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AutomatorSkill other) {
      if (other == null) {
        return;
      }
      if (other.SkillType != global::Automator.SkillType.UnknownSkillType) {
        SkillType = other.SkillType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TranslatedName.Length != 0) {
        TranslatedName = other.TranslatedName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillType = (global::Automator.SkillType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            TranslatedName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SkillType = (global::Automator.SkillType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            TranslatedName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Contains a list of known skill types that Automators can have.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminAutomatorSkillsResponse : pb::IMessage<AdminAutomatorSkillsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminAutomatorSkillsResponse> _parser = new pb::MessageParser<AdminAutomatorSkillsResponse>(() => new AdminAutomatorSkillsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminAutomatorSkillsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorSkillsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorSkillsResponse(AdminAutomatorSkillsResponse other) : this() {
      success_ = other.success_;
      message_ = other.message_;
      automatorSkills_ = other.automatorSkills_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorSkillsResponse Clone() {
      return new AdminAutomatorSkillsResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    /// Was the call successful?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// If non-empty, should be displayed to the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "automatorSkills" field.</summary>
    public const int AutomatorSkillsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Automator.AutomatorSkill> _repeated_automatorSkills_codec
        = pb::FieldCodec.ForMessage(26, global::Automator.AutomatorSkill.Parser);
    private readonly pbc::RepeatedField<global::Automator.AutomatorSkill> automatorSkills_ = new pbc::RepeatedField<global::Automator.AutomatorSkill>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.AutomatorSkill> AutomatorSkills {
      get { return automatorSkills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminAutomatorSkillsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminAutomatorSkillsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Message != other.Message) return false;
      if(!automatorSkills_.Equals(other.automatorSkills_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= automatorSkills_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      automatorSkills_.WriteTo(output, _repeated_automatorSkills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      automatorSkills_.WriteTo(ref output, _repeated_automatorSkills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += automatorSkills_.CalculateSize(_repeated_automatorSkills_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminAutomatorSkillsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      automatorSkills_.Add(other.automatorSkills_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            automatorSkills_.AddEntriesFrom(input, _repeated_automatorSkills_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            automatorSkills_.AddEntriesFrom(ref input, _repeated_automatorSkills_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Sends a message to an Automator to reset all of its settings so that it can be re-initialized.
  ///
  /// We don't want this in the Console - just in Commander, or for use in testing.
  ///
  /// Returns AdminResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminResetAutomatorRequest : pb::IMessage<AdminResetAutomatorRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminResetAutomatorRequest> _parser = new pb::MessageParser<AdminResetAutomatorRequest>(() => new AdminResetAutomatorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminResetAutomatorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminResetAutomatorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminResetAutomatorRequest(AdminResetAutomatorRequest other) : this() {
      automatorId_ = other.automatorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminResetAutomatorRequest Clone() {
      return new AdminResetAutomatorRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminResetAutomatorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminResetAutomatorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminResetAutomatorRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Sends configuration settings to an Automator.
  /// Call this after AdminAutomatorEdit to send the new settings to the Automator.
  ///
  /// Returns AdminResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminInitializeAutomatorRequest : pb::IMessage<AdminInitializeAutomatorRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminInitializeAutomatorRequest> _parser = new pb::MessageParser<AdminInitializeAutomatorRequest>(() => new AdminInitializeAutomatorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminInitializeAutomatorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminInitializeAutomatorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminInitializeAutomatorRequest(AdminInitializeAutomatorRequest other) : this() {
      automatorId_ = other.automatorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminInitializeAutomatorRequest Clone() {
      return new AdminInitializeAutomatorRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminInitializeAutomatorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminInitializeAutomatorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminInitializeAutomatorRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// AdminAutomatorLogRequest
  ///
  /// Retrieves the internal log entries of Keeper that relate to the given Automator instance.
  /// It does not contact the remote Automator.
  ///
  /// Returns AdminResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminAutomatorLogRequest : pb::IMessage<AdminAutomatorLogRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminAutomatorLogRequest> _parser = new pb::MessageParser<AdminAutomatorLogRequest>(() => new AdminAutomatorLogRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminAutomatorLogRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorLogRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorLogRequest(AdminAutomatorLogRequest other) : this() {
      automatorId_ = other.automatorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorLogRequest Clone() {
      return new AdminAutomatorLogRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminAutomatorLogRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminAutomatorLogRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminAutomatorLogRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// AdminAutomatorLogClearRequest
  ///
  /// Clears the internal log entries of Keeper that relate to the given Automator instance.
  /// It does not contact the remote Automator.
  ///
  /// Returns AdminResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AdminAutomatorLogClearRequest : pb::IMessage<AdminAutomatorLogClearRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminAutomatorLogClearRequest> _parser = new pb::MessageParser<AdminAutomatorLogClearRequest>(() => new AdminAutomatorLogClearRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdminAutomatorLogClearRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorLogClearRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorLogClearRequest(AdminAutomatorLogClearRequest other) : this() {
      automatorId_ = other.automatorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdminAutomatorLogClearRequest Clone() {
      return new AdminAutomatorLogClearRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdminAutomatorLogClearRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdminAutomatorLogClearRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdminAutomatorLogClearRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// ApproveTeamsForUserRequest
  ///
  /// A message from Keeper to Automator asking for approval to add a user to one or more teams.
  ///
  /// @return an AutomatorResponse containing an ApproveTeamsForUserResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ApproveTeamsForUserRequest : pb::IMessage<ApproveTeamsForUserRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ApproveTeamsForUserRequest> _parser = new pb::MessageParser<ApproveTeamsForUserRequest>(() => new ApproveTeamsForUserRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ApproveTeamsForUserRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsForUserRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsForUserRequest(ApproveTeamsForUserRequest other) : this() {
      automatorId_ = other.automatorId_;
      ssoAuthenticationProtocolType_ = other.ssoAuthenticationProtocolType_;
      authMessage_ = other.authMessage_;
      email_ = other.email_;
      serverEccPublicKeyId_ = other.serverEccPublicKeyId_;
      ipAddress_ = other.ipAddress_;
      userPublicKey_ = other.userPublicKey_;
      teamDescription_ = other.teamDescription_.Clone();
      isTesting_ = other.isTesting_;
      isEccOnly_ = other.isEccOnly_;
      userPublicKeyEcc_ = other.userPublicKeyEcc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsForUserRequest Clone() {
      return new ApproveTeamsForUserRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The ID of the automator instance being contacted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "ssoAuthenticationProtocolType" field.</summary>
    public const int SsoAuthenticationProtocolTypeFieldNumber = 2;
    private global::Automator.SsoAuthenticationProtocolType ssoAuthenticationProtocolType_ = global::Automator.SsoAuthenticationProtocolType.UnknownProtocol;
    /// <summary>
    /// SAML2 or other
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.SsoAuthenticationProtocolType SsoAuthenticationProtocolType {
      get { return ssoAuthenticationProtocolType_; }
      set {
        ssoAuthenticationProtocolType_ = value;
      }
    }

    /// <summary>Field number for the "authMessage" field.</summary>
    public const int AuthMessageFieldNumber = 3;
    private string authMessage_ = "";
    /// <summary>
    /// The SAML (or other) authentication message sent from the IdP to Keeper
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AuthMessage {
      get { return authMessage_; }
      set {
        authMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    /// <summary>
    /// Email address of the user being authenticated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverEccPublicKeyId" field.</summary>
    public const int ServerEccPublicKeyIdFieldNumber = 5;
    private int serverEccPublicKeyId_;
    /// <summary>
    /// This is included in every request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ServerEccPublicKeyId {
      get { return serverEccPublicKeyId_; }
      set {
        serverEccPublicKeyId_ = value;
      }
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 6;
    private string ipAddress_ = "";
    /// <summary>
    /// The ip address of the user requesting approval
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userPublicKey" field.</summary>
    public const int UserPublicKeyFieldNumber = 7;
    private pb::ByteString userPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// RSA public key used to encrypt the team key upon approval
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString UserPublicKey {
      get { return userPublicKey_; }
      set {
        userPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamDescription" field.</summary>
    public const int TeamDescriptionFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Automator.TeamDescription> _repeated_teamDescription_codec
        = pb::FieldCodec.ForMessage(66, global::Automator.TeamDescription.Parser);
    private readonly pbc::RepeatedField<global::Automator.TeamDescription> teamDescription_ = new pbc::RepeatedField<global::Automator.TeamDescription>();
    /// <summary>
    /// One or more teams to add the user to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.TeamDescription> TeamDescription {
      get { return teamDescription_; }
    }

    /// <summary>Field number for the "isTesting" field.</summary>
    public const int IsTestingFieldNumber = 9;
    private bool isTesting_;
    /// <summary>
    /// True if this call is part of a unit test
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTesting {
      get { return isTesting_; }
      set {
        isTesting_ = value;
      }
    }

    /// <summary>Field number for the "isEccOnly" field.</summary>
    public const int IsEccOnlyFieldNumber = 10;
    private bool isEccOnly_;
    /// <summary>
    /// If true, do not send any RSA-encrypted results
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEccOnly {
      get { return isEccOnly_; }
      set {
        isEccOnly_ = value;
      }
    }

    /// <summary>Field number for the "userPublicKeyEcc" field.</summary>
    public const int UserPublicKeyEccFieldNumber = 11;
    private pb::ByteString userPublicKeyEcc_ = pb::ByteString.Empty;
    /// <summary>
    /// ECC public key Used to encrypt the team key upon approval
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString UserPublicKeyEcc {
      get { return userPublicKeyEcc_; }
      set {
        userPublicKeyEcc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ApproveTeamsForUserRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ApproveTeamsForUserRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (SsoAuthenticationProtocolType != other.SsoAuthenticationProtocolType) return false;
      if (AuthMessage != other.AuthMessage) return false;
      if (Email != other.Email) return false;
      if (ServerEccPublicKeyId != other.ServerEccPublicKeyId) return false;
      if (IpAddress != other.IpAddress) return false;
      if (UserPublicKey != other.UserPublicKey) return false;
      if(!teamDescription_.Equals(other.teamDescription_)) return false;
      if (IsTesting != other.IsTesting) return false;
      if (IsEccOnly != other.IsEccOnly) return false;
      if (UserPublicKeyEcc != other.UserPublicKeyEcc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) hash ^= SsoAuthenticationProtocolType.GetHashCode();
      if (AuthMessage.Length != 0) hash ^= AuthMessage.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (ServerEccPublicKeyId != 0) hash ^= ServerEccPublicKeyId.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (UserPublicKey.Length != 0) hash ^= UserPublicKey.GetHashCode();
      hash ^= teamDescription_.GetHashCode();
      if (IsTesting != false) hash ^= IsTesting.GetHashCode();
      if (IsEccOnly != false) hash ^= IsEccOnly.GetHashCode();
      if (UserPublicKeyEcc.Length != 0) hash ^= UserPublicKeyEcc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SsoAuthenticationProtocolType);
      }
      if (AuthMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AuthMessage);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IpAddress);
      }
      if (UserPublicKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(UserPublicKey);
      }
      teamDescription_.WriteTo(output, _repeated_teamDescription_codec);
      if (IsTesting != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsTesting);
      }
      if (IsEccOnly != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsEccOnly);
      }
      if (UserPublicKeyEcc.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(UserPublicKeyEcc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SsoAuthenticationProtocolType);
      }
      if (AuthMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AuthMessage);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IpAddress);
      }
      if (UserPublicKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(UserPublicKey);
      }
      teamDescription_.WriteTo(ref output, _repeated_teamDescription_codec);
      if (IsTesting != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsTesting);
      }
      if (IsEccOnly != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsEccOnly);
      }
      if (UserPublicKeyEcc.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(UserPublicKeyEcc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SsoAuthenticationProtocolType);
      }
      if (AuthMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthMessage);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (ServerEccPublicKeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerEccPublicKeyId);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (UserPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserPublicKey);
      }
      size += teamDescription_.CalculateSize(_repeated_teamDescription_codec);
      if (IsTesting != false) {
        size += 1 + 1;
      }
      if (IsEccOnly != false) {
        size += 1 + 1;
      }
      if (UserPublicKeyEcc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserPublicKeyEcc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ApproveTeamsForUserRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        SsoAuthenticationProtocolType = other.SsoAuthenticationProtocolType;
      }
      if (other.AuthMessage.Length != 0) {
        AuthMessage = other.AuthMessage;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.ServerEccPublicKeyId != 0) {
        ServerEccPublicKeyId = other.ServerEccPublicKeyId;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.UserPublicKey.Length != 0) {
        UserPublicKey = other.UserPublicKey;
      }
      teamDescription_.Add(other.teamDescription_);
      if (other.IsTesting != false) {
        IsTesting = other.IsTesting;
      }
      if (other.IsEccOnly != false) {
        IsEccOnly = other.IsEccOnly;
      }
      if (other.UserPublicKeyEcc.Length != 0) {
        UserPublicKeyEcc = other.UserPublicKeyEcc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            SsoAuthenticationProtocolType = (global::Automator.SsoAuthenticationProtocolType) input.ReadEnum();
            break;
          }
          case 26: {
            AuthMessage = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 40: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 50: {
            IpAddress = input.ReadString();
            break;
          }
          case 58: {
            UserPublicKey = input.ReadBytes();
            break;
          }
          case 66: {
            teamDescription_.AddEntriesFrom(input, _repeated_teamDescription_codec);
            break;
          }
          case 72: {
            IsTesting = input.ReadBool();
            break;
          }
          case 80: {
            IsEccOnly = input.ReadBool();
            break;
          }
          case 90: {
            UserPublicKeyEcc = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            SsoAuthenticationProtocolType = (global::Automator.SsoAuthenticationProtocolType) input.ReadEnum();
            break;
          }
          case 26: {
            AuthMessage = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 40: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 50: {
            IpAddress = input.ReadString();
            break;
          }
          case 58: {
            UserPublicKey = input.ReadBytes();
            break;
          }
          case 66: {
            teamDescription_.AddEntriesFrom(ref input, _repeated_teamDescription_codec);
            break;
          }
          case 72: {
            IsTesting = input.ReadBool();
            break;
          }
          case 80: {
            IsEccOnly = input.ReadBool();
            break;
          }
          case 90: {
            UserPublicKeyEcc = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// TeamDescription
  ///
  /// Description of a team involved in a Team approval or Team for User approval.
  /// Used in ApproveTeamsForUserRequest.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TeamDescription : pb::IMessage<TeamDescription>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamDescription> _parser = new pb::MessageParser<TeamDescription>(() => new TeamDescription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TeamDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TeamDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TeamDescription(TeamDescription other) : this() {
      teamUid_ = other.teamUid_;
      teamName_ = other.teamName_;
      encryptedTeamKey_ = other.encryptedTeamKey_;
      encryptedTeamKeyType_ = other.encryptedTeamKeyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TeamDescription Clone() {
      return new TeamDescription(this);
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 1;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    /// <summary>
    /// The team UID the user is being added to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamName" field.</summary>
    public const int TeamNameFieldNumber = 2;
    private string teamName_ = "";
    /// <summary>
    /// The name of the team the user is being added to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamKey" field.</summary>
    public const int EncryptedTeamKeyFieldNumber = 3;
    private pb::ByteString encryptedTeamKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The encrypted team key.  It is encrypted by the user's public key or the enterprise tree key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedTeamKey {
      get { return encryptedTeamKey_; }
      set {
        encryptedTeamKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamKeyType" field.</summary>
    public const int EncryptedTeamKeyTypeFieldNumber = 4;
    private global::Enterprise.EncryptedKeyType encryptedTeamKeyType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    /// <summary>
    /// The type of the encrypted team key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Enterprise.EncryptedKeyType EncryptedTeamKeyType {
      get { return encryptedTeamKeyType_; }
      set {
        encryptedTeamKeyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TeamDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TeamDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamUid != other.TeamUid) return false;
      if (TeamName != other.TeamName) return false;
      if (EncryptedTeamKey != other.EncryptedTeamKey) return false;
      if (EncryptedTeamKeyType != other.EncryptedTeamKeyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
      if (EncryptedTeamKey.Length != 0) hash ^= EncryptedTeamKey.GetHashCode();
      if (EncryptedTeamKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= EncryptedTeamKeyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TeamName);
      }
      if (EncryptedTeamKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedTeamKey);
      }
      if (EncryptedTeamKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EncryptedTeamKeyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TeamUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamUid);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TeamName);
      }
      if (EncryptedTeamKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedTeamKey);
      }
      if (EncryptedTeamKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EncryptedTeamKeyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (EncryptedTeamKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTeamKey);
      }
      if (EncryptedTeamKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncryptedTeamKeyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TeamDescription other) {
      if (other == null) {
        return;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      if (other.TeamName.Length != 0) {
        TeamName = other.TeamName;
      }
      if (other.EncryptedTeamKey.Length != 0) {
        EncryptedTeamKey = other.EncryptedTeamKey;
      }
      if (other.EncryptedTeamKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        EncryptedTeamKeyType = other.EncryptedTeamKeyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 18: {
            TeamName = input.ReadString();
            break;
          }
          case 26: {
            EncryptedTeamKey = input.ReadBytes();
            break;
          }
          case 32: {
            EncryptedTeamKeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 18: {
            TeamName = input.ReadString();
            break;
          }
          case 26: {
            EncryptedTeamKey = input.ReadBytes();
            break;
          }
          case 32: {
            EncryptedTeamKeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// ApproveTeamsForUserResponse
  ///
  /// The Response from Automator when a team is or is not approved.
  /// It is included in an AutomatorResponse.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ApproveTeamsForUserResponse : pb::IMessage<ApproveTeamsForUserResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ApproveTeamsForUserResponse> _parser = new pb::MessageParser<ApproveTeamsForUserResponse>(() => new ApproveTeamsForUserResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ApproveTeamsForUserResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsForUserResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsForUserResponse(ApproveTeamsForUserResponse other) : this() {
      automatorId_ = other.automatorId_;
      email_ = other.email_;
      message_ = other.message_;
      approveTeamResponse_ = other.approveTeamResponse_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsForUserResponse Clone() {
      return new ApproveTeamsForUserResponse(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The automator responding
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    /// <summary>
    /// The username of the user being approved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// If a general error occurred, this will contain an error message and approveTeamResponse will be empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "approveTeamResponse" field.</summary>
    public const int ApproveTeamResponseFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Automator.ApproveOneTeamForUserResponse> _repeated_approveTeamResponse_codec
        = pb::FieldCodec.ForMessage(34, global::Automator.ApproveOneTeamForUserResponse.Parser);
    private readonly pbc::RepeatedField<global::Automator.ApproveOneTeamForUserResponse> approveTeamResponse_ = new pbc::RepeatedField<global::Automator.ApproveOneTeamForUserResponse>();
    /// <summary>
    /// One approval decision for each team listed in the ApproveTeamsForUserRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.ApproveOneTeamForUserResponse> ApproveTeamResponse {
      get { return approveTeamResponse_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ApproveTeamsForUserResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ApproveTeamsForUserResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (Email != other.Email) return false;
      if (Message != other.Message) return false;
      if(!approveTeamResponse_.Equals(other.approveTeamResponse_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= approveTeamResponse_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      approveTeamResponse_.WriteTo(output, _repeated_approveTeamResponse_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      approveTeamResponse_.WriteTo(ref output, _repeated_approveTeamResponse_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += approveTeamResponse_.CalculateSize(_repeated_approveTeamResponse_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ApproveTeamsForUserResponse other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      approveTeamResponse_.Add(other.approveTeamResponse_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            approveTeamResponse_.AddEntriesFrom(input, _repeated_approveTeamResponse_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            approveTeamResponse_.AddEntriesFrom(ref input, _repeated_approveTeamResponse_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// ApproveOneTeamForUserResponse
  ///
  /// Part of the ApproveTeamsForUserResponse.
  /// Provides information needed to add one user to one team.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ApproveOneTeamForUserResponse : pb::IMessage<ApproveOneTeamForUserResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ApproveOneTeamForUserResponse> _parser = new pb::MessageParser<ApproveOneTeamForUserResponse>(() => new ApproveOneTeamForUserResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ApproveOneTeamForUserResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveOneTeamForUserResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveOneTeamForUserResponse(ApproveOneTeamForUserResponse other) : this() {
      approved_ = other.approved_;
      message_ = other.message_;
      teamUid_ = other.teamUid_;
      teamName_ = other.teamName_;
      userEncryptedTeamKey_ = other.userEncryptedTeamKey_;
      userEncryptedTeamKeyType_ = other.userEncryptedTeamKeyType_;
      userEncryptedTeamKeyByEcc_ = other.userEncryptedTeamKeyByEcc_;
      userEncryptedTeamKeyByEccType_ = other.userEncryptedTeamKeyByEccType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveOneTeamForUserResponse Clone() {
      return new ApproveOneTeamForUserResponse(this);
    }

    /// <summary>Field number for the "approved" field.</summary>
    public const int ApprovedFieldNumber = 1;
    private bool approved_;
    /// <summary>
    /// True if the user is approved for the team
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Approved {
      get { return approved_; }
      set {
        approved_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// If the team was not approved, this field will contain a message explaining why
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 3;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    /// <summary>
    /// The team involved in this request/response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamName" field.</summary>
    public const int TeamNameFieldNumber = 4;
    private string teamName_ = "";
    /// <summary>
    /// The team name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userEncryptedTeamKey" field.</summary>
    public const int UserEncryptedTeamKeyFieldNumber = 5;
    private pb::ByteString userEncryptedTeamKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The team key encrypted with the user's public RSA key, if it was approved.  Empty if not approved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString UserEncryptedTeamKey {
      get { return userEncryptedTeamKey_; }
      set {
        userEncryptedTeamKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userEncryptedTeamKeyType" field.</summary>
    public const int UserEncryptedTeamKeyTypeFieldNumber = 6;
    private global::Enterprise.EncryptedKeyType userEncryptedTeamKeyType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    /// <summary>
    /// Will normally be 2, corresponding to ENCRYPTED_BY_PUBLIC_KEY.  Empty if not approved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Enterprise.EncryptedKeyType UserEncryptedTeamKeyType {
      get { return userEncryptedTeamKeyType_; }
      set {
        userEncryptedTeamKeyType_ = value;
      }
    }

    /// <summary>Field number for the "userEncryptedTeamKeyByEcc" field.</summary>
    public const int UserEncryptedTeamKeyByEccFieldNumber = 7;
    private pb::ByteString userEncryptedTeamKeyByEcc_ = pb::ByteString.Empty;
    /// <summary>
    /// The team key encrypted with the user's public ECC key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString UserEncryptedTeamKeyByEcc {
      get { return userEncryptedTeamKeyByEcc_; }
      set {
        userEncryptedTeamKeyByEcc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userEncryptedTeamKeyByEccType" field.</summary>
    public const int UserEncryptedTeamKeyByEccTypeFieldNumber = 8;
    private global::Enterprise.EncryptedKeyType userEncryptedTeamKeyByEccType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    /// <summary>
    /// Will normally be 4, corresponding to ENCRYPTED_BY_PUBLIC_KEY_ECC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Enterprise.EncryptedKeyType UserEncryptedTeamKeyByEccType {
      get { return userEncryptedTeamKeyByEccType_; }
      set {
        userEncryptedTeamKeyByEccType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ApproveOneTeamForUserResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ApproveOneTeamForUserResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Approved != other.Approved) return false;
      if (Message != other.Message) return false;
      if (TeamUid != other.TeamUid) return false;
      if (TeamName != other.TeamName) return false;
      if (UserEncryptedTeamKey != other.UserEncryptedTeamKey) return false;
      if (UserEncryptedTeamKeyType != other.UserEncryptedTeamKeyType) return false;
      if (UserEncryptedTeamKeyByEcc != other.UserEncryptedTeamKeyByEcc) return false;
      if (UserEncryptedTeamKeyByEccType != other.UserEncryptedTeamKeyByEccType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Approved != false) hash ^= Approved.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
      if (UserEncryptedTeamKey.Length != 0) hash ^= UserEncryptedTeamKey.GetHashCode();
      if (UserEncryptedTeamKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= UserEncryptedTeamKeyType.GetHashCode();
      if (UserEncryptedTeamKeyByEcc.Length != 0) hash ^= UserEncryptedTeamKeyByEcc.GetHashCode();
      if (UserEncryptedTeamKeyByEccType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= UserEncryptedTeamKeyByEccType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Approved != false) {
        output.WriteRawTag(8);
        output.WriteBool(Approved);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (TeamUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TeamUid);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TeamName);
      }
      if (UserEncryptedTeamKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(UserEncryptedTeamKey);
      }
      if (UserEncryptedTeamKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(48);
        output.WriteEnum((int) UserEncryptedTeamKeyType);
      }
      if (UserEncryptedTeamKeyByEcc.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(UserEncryptedTeamKeyByEcc);
      }
      if (UserEncryptedTeamKeyByEccType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(64);
        output.WriteEnum((int) UserEncryptedTeamKeyByEccType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Approved != false) {
        output.WriteRawTag(8);
        output.WriteBool(Approved);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (TeamUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TeamUid);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TeamName);
      }
      if (UserEncryptedTeamKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(UserEncryptedTeamKey);
      }
      if (UserEncryptedTeamKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(48);
        output.WriteEnum((int) UserEncryptedTeamKeyType);
      }
      if (UserEncryptedTeamKeyByEcc.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(UserEncryptedTeamKeyByEcc);
      }
      if (UserEncryptedTeamKeyByEccType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(64);
        output.WriteEnum((int) UserEncryptedTeamKeyByEccType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Approved != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (UserEncryptedTeamKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserEncryptedTeamKey);
      }
      if (UserEncryptedTeamKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UserEncryptedTeamKeyType);
      }
      if (UserEncryptedTeamKeyByEcc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserEncryptedTeamKeyByEcc);
      }
      if (UserEncryptedTeamKeyByEccType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UserEncryptedTeamKeyByEccType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ApproveOneTeamForUserResponse other) {
      if (other == null) {
        return;
      }
      if (other.Approved != false) {
        Approved = other.Approved;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      if (other.TeamName.Length != 0) {
        TeamName = other.TeamName;
      }
      if (other.UserEncryptedTeamKey.Length != 0) {
        UserEncryptedTeamKey = other.UserEncryptedTeamKey;
      }
      if (other.UserEncryptedTeamKeyType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        UserEncryptedTeamKeyType = other.UserEncryptedTeamKeyType;
      }
      if (other.UserEncryptedTeamKeyByEcc.Length != 0) {
        UserEncryptedTeamKeyByEcc = other.UserEncryptedTeamKeyByEcc;
      }
      if (other.UserEncryptedTeamKeyByEccType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        UserEncryptedTeamKeyByEccType = other.UserEncryptedTeamKeyByEccType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Approved = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 34: {
            TeamName = input.ReadString();
            break;
          }
          case 42: {
            UserEncryptedTeamKey = input.ReadBytes();
            break;
          }
          case 48: {
            UserEncryptedTeamKeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 58: {
            UserEncryptedTeamKeyByEcc = input.ReadBytes();
            break;
          }
          case 64: {
            UserEncryptedTeamKeyByEccType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Approved = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 34: {
            TeamName = input.ReadString();
            break;
          }
          case 42: {
            UserEncryptedTeamKey = input.ReadBytes();
            break;
          }
          case 48: {
            UserEncryptedTeamKeyType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 58: {
            UserEncryptedTeamKeyByEcc = input.ReadBytes();
            break;
          }
          case 64: {
            UserEncryptedTeamKeyByEccType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// ApproveTeamsRequest
  ///
  /// A message from Keeper to Automator asking for approval to create one or more teams.
  ///
  /// @return an AutomatorResponse containing an ApproveTeamsResponse
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ApproveTeamsRequest : pb::IMessage<ApproveTeamsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ApproveTeamsRequest> _parser = new pb::MessageParser<ApproveTeamsRequest>(() => new ApproveTeamsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ApproveTeamsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsRequest(ApproveTeamsRequest other) : this() {
      automatorId_ = other.automatorId_;
      ssoAuthenticationProtocolType_ = other.ssoAuthenticationProtocolType_;
      authMessage_ = other.authMessage_;
      email_ = other.email_;
      serverEccPublicKeyId_ = other.serverEccPublicKeyId_;
      ipAddress_ = other.ipAddress_;
      teamDescription_ = other.teamDescription_.Clone();
      isEccOnly_ = other.isEccOnly_;
      isTesting_ = other.isTesting_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsRequest Clone() {
      return new ApproveTeamsRequest(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The ID of the automator instance being contacted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "ssoAuthenticationProtocolType" field.</summary>
    public const int SsoAuthenticationProtocolTypeFieldNumber = 2;
    private global::Automator.SsoAuthenticationProtocolType ssoAuthenticationProtocolType_ = global::Automator.SsoAuthenticationProtocolType.UnknownProtocol;
    /// <summary>
    /// SAML2 or other
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Automator.SsoAuthenticationProtocolType SsoAuthenticationProtocolType {
      get { return ssoAuthenticationProtocolType_; }
      set {
        ssoAuthenticationProtocolType_ = value;
      }
    }

    /// <summary>Field number for the "authMessage" field.</summary>
    public const int AuthMessageFieldNumber = 3;
    private string authMessage_ = "";
    /// <summary>
    /// The SAML (or other) authentication message sent from the IdP to Keeper
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AuthMessage {
      get { return authMessage_; }
      set {
        authMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    /// <summary>
    /// Email address of the user being authenticated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverEccPublicKeyId" field.</summary>
    public const int ServerEccPublicKeyIdFieldNumber = 5;
    private int serverEccPublicKeyId_;
    /// <summary>
    /// This is included in every request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ServerEccPublicKeyId {
      get { return serverEccPublicKeyId_; }
      set {
        serverEccPublicKeyId_ = value;
      }
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 6;
    private string ipAddress_ = "";
    /// <summary>
    /// The ip address of the user requesting approval
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamDescription" field.</summary>
    public const int TeamDescriptionFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Automator.TeamDescription> _repeated_teamDescription_codec
        = pb::FieldCodec.ForMessage(58, global::Automator.TeamDescription.Parser);
    private readonly pbc::RepeatedField<global::Automator.TeamDescription> teamDescription_ = new pbc::RepeatedField<global::Automator.TeamDescription>();
    /// <summary>
    /// One or more teams to approve/create.  The encrypted key field is ignored
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.TeamDescription> TeamDescription {
      get { return teamDescription_; }
    }

    /// <summary>Field number for the "isEccOnly" field.</summary>
    public const int IsEccOnlyFieldNumber = 8;
    private bool isEccOnly_;
    /// <summary>
    /// If true, do not send any RSA-encrypted results
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEccOnly {
      get { return isEccOnly_; }
      set {
        isEccOnly_ = value;
      }
    }

    /// <summary>Field number for the "isTesting" field.</summary>
    public const int IsTestingFieldNumber = 9;
    private bool isTesting_;
    /// <summary>
    /// True if this call is part of a unit test
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTesting {
      get { return isTesting_; }
      set {
        isTesting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ApproveTeamsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ApproveTeamsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (SsoAuthenticationProtocolType != other.SsoAuthenticationProtocolType) return false;
      if (AuthMessage != other.AuthMessage) return false;
      if (Email != other.Email) return false;
      if (ServerEccPublicKeyId != other.ServerEccPublicKeyId) return false;
      if (IpAddress != other.IpAddress) return false;
      if(!teamDescription_.Equals(other.teamDescription_)) return false;
      if (IsEccOnly != other.IsEccOnly) return false;
      if (IsTesting != other.IsTesting) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) hash ^= SsoAuthenticationProtocolType.GetHashCode();
      if (AuthMessage.Length != 0) hash ^= AuthMessage.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (ServerEccPublicKeyId != 0) hash ^= ServerEccPublicKeyId.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      hash ^= teamDescription_.GetHashCode();
      if (IsEccOnly != false) hash ^= IsEccOnly.GetHashCode();
      if (IsTesting != false) hash ^= IsTesting.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SsoAuthenticationProtocolType);
      }
      if (AuthMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AuthMessage);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IpAddress);
      }
      teamDescription_.WriteTo(output, _repeated_teamDescription_codec);
      if (IsEccOnly != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsEccOnly);
      }
      if (IsTesting != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsTesting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SsoAuthenticationProtocolType);
      }
      if (AuthMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AuthMessage);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (ServerEccPublicKeyId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerEccPublicKeyId);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IpAddress);
      }
      teamDescription_.WriteTo(ref output, _repeated_teamDescription_codec);
      if (IsEccOnly != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsEccOnly);
      }
      if (IsTesting != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsTesting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SsoAuthenticationProtocolType);
      }
      if (AuthMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthMessage);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (ServerEccPublicKeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerEccPublicKeyId);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      size += teamDescription_.CalculateSize(_repeated_teamDescription_codec);
      if (IsEccOnly != false) {
        size += 1 + 1;
      }
      if (IsTesting != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ApproveTeamsRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.SsoAuthenticationProtocolType != global::Automator.SsoAuthenticationProtocolType.UnknownProtocol) {
        SsoAuthenticationProtocolType = other.SsoAuthenticationProtocolType;
      }
      if (other.AuthMessage.Length != 0) {
        AuthMessage = other.AuthMessage;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.ServerEccPublicKeyId != 0) {
        ServerEccPublicKeyId = other.ServerEccPublicKeyId;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      teamDescription_.Add(other.teamDescription_);
      if (other.IsEccOnly != false) {
        IsEccOnly = other.IsEccOnly;
      }
      if (other.IsTesting != false) {
        IsTesting = other.IsTesting;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            SsoAuthenticationProtocolType = (global::Automator.SsoAuthenticationProtocolType) input.ReadEnum();
            break;
          }
          case 26: {
            AuthMessage = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 40: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 50: {
            IpAddress = input.ReadString();
            break;
          }
          case 58: {
            teamDescription_.AddEntriesFrom(input, _repeated_teamDescription_codec);
            break;
          }
          case 64: {
            IsEccOnly = input.ReadBool();
            break;
          }
          case 72: {
            IsTesting = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 16: {
            SsoAuthenticationProtocolType = (global::Automator.SsoAuthenticationProtocolType) input.ReadEnum();
            break;
          }
          case 26: {
            AuthMessage = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 40: {
            ServerEccPublicKeyId = input.ReadInt32();
            break;
          }
          case 50: {
            IpAddress = input.ReadString();
            break;
          }
          case 58: {
            teamDescription_.AddEntriesFrom(ref input, _repeated_teamDescription_codec);
            break;
          }
          case 64: {
            IsEccOnly = input.ReadBool();
            break;
          }
          case 72: {
            IsTesting = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// ApproveTeamsResponse
  ///
  /// The Response from Automator when a team is or is not approved.
  /// It is included in an AutomatorResponse.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ApproveTeamsResponse : pb::IMessage<ApproveTeamsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ApproveTeamsResponse> _parser = new pb::MessageParser<ApproveTeamsResponse>(() => new ApproveTeamsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ApproveTeamsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsResponse(ApproveTeamsResponse other) : this() {
      automatorId_ = other.automatorId_;
      message_ = other.message_;
      approveTeamResponse_ = other.approveTeamResponse_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveTeamsResponse Clone() {
      return new ApproveTeamsResponse(this);
    }

    /// <summary>Field number for the "automatorId" field.</summary>
    public const int AutomatorIdFieldNumber = 1;
    private long automatorId_;
    /// <summary>
    /// The automator responding
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AutomatorId {
      get { return automatorId_; }
      set {
        automatorId_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// If a general error occurred, this will contain an error message and approveTeamResponse will be empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "approveTeamResponse" field.</summary>
    public const int ApproveTeamResponseFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Automator.ApproveOneTeamResponse> _repeated_approveTeamResponse_codec
        = pb::FieldCodec.ForMessage(26, global::Automator.ApproveOneTeamResponse.Parser);
    private readonly pbc::RepeatedField<global::Automator.ApproveOneTeamResponse> approveTeamResponse_ = new pbc::RepeatedField<global::Automator.ApproveOneTeamResponse>();
    /// <summary>
    /// One approval decision for each team listed in the ApproveTeamsRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Automator.ApproveOneTeamResponse> ApproveTeamResponse {
      get { return approveTeamResponse_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ApproveTeamsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ApproveTeamsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutomatorId != other.AutomatorId) return false;
      if (Message != other.Message) return false;
      if(!approveTeamResponse_.Equals(other.approveTeamResponse_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AutomatorId != 0L) hash ^= AutomatorId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= approveTeamResponse_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      approveTeamResponse_.WriteTo(output, _repeated_approveTeamResponse_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutomatorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AutomatorId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      approveTeamResponse_.WriteTo(ref output, _repeated_approveTeamResponse_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AutomatorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutomatorId);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += approveTeamResponse_.CalculateSize(_repeated_approveTeamResponse_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ApproveTeamsResponse other) {
      if (other == null) {
        return;
      }
      if (other.AutomatorId != 0L) {
        AutomatorId = other.AutomatorId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      approveTeamResponse_.Add(other.approveTeamResponse_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            approveTeamResponse_.AddEntriesFrom(input, _repeated_approveTeamResponse_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutomatorId = input.ReadInt64();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            approveTeamResponse_.AddEntriesFrom(ref input, _repeated_approveTeamResponse_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// ApproveOneTeamResponse
  ///
  /// The Response from Automator when a team is or is not approved.
  /// It is included in an ApproveTeamsResponse.
  /// Fields 5 and above will be empty if the team was not approved.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ApproveOneTeamResponse : pb::IMessage<ApproveOneTeamResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ApproveOneTeamResponse> _parser = new pb::MessageParser<ApproveOneTeamResponse>(() => new ApproveOneTeamResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ApproveOneTeamResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Automator.AutomatorReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveOneTeamResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveOneTeamResponse(ApproveOneTeamResponse other) : this() {
      approved_ = other.approved_;
      message_ = other.message_;
      teamUid_ = other.teamUid_;
      teamName_ = other.teamName_;
      encryptedTeamKeyCbc_ = other.encryptedTeamKeyCbc_;
      encryptedTeamKeyCbcType_ = other.encryptedTeamKeyCbcType_;
      encryptedTeamKeyGcm_ = other.encryptedTeamKeyGcm_;
      encryptedTeamKeyGcmType_ = other.encryptedTeamKeyGcmType_;
      teamPublicKeyRsa_ = other.teamPublicKeyRsa_;
      encryptedTeamPrivateKeyRsa_ = other.encryptedTeamPrivateKeyRsa_;
      encryptedTeamPrivateKeyRsaType_ = other.encryptedTeamPrivateKeyRsaType_;
      teamPublicKeyEcc_ = other.teamPublicKeyEcc_;
      encryptedTeamPrivateKeyEcc_ = other.encryptedTeamPrivateKeyEcc_;
      encryptedTeamPrivateKeyEccType_ = other.encryptedTeamPrivateKeyEccType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ApproveOneTeamResponse Clone() {
      return new ApproveOneTeamResponse(this);
    }

    /// <summary>Field number for the "approved" field.</summary>
    public const int ApprovedFieldNumber = 1;
    private bool approved_;
    /// <summary>
    /// True if the team was approved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Approved {
      get { return approved_; }
      set {
        approved_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// If the team was not approved, this field will contain a message explaining why
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamUid" field.</summary>
    public const int TeamUidFieldNumber = 3;
    private pb::ByteString teamUid_ = pb::ByteString.Empty;
    /// <summary>
    /// The team involved in this request/response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString TeamUid {
      get { return teamUid_; }
      set {
        teamUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamName" field.</summary>
    public const int TeamNameFieldNumber = 4;
    private string teamName_ = "";
    /// <summary>
    /// The team name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamKeyCbc" field.</summary>
    public const int EncryptedTeamKeyCbcFieldNumber = 5;
    private pb::ByteString encryptedTeamKeyCbc_ = pb::ByteString.Empty;
    /// <summary>
    /// The team key encrypted with the user's data key using AES/CBC.  Base64 url-encoded. THIS WILL BE EMPTY FOR NOW.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedTeamKeyCbc {
      get { return encryptedTeamKeyCbc_; }
      set {
        encryptedTeamKeyCbc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamKeyCbcType" field.</summary>
    public const int EncryptedTeamKeyCbcTypeFieldNumber = 6;
    private global::Enterprise.EncryptedKeyType encryptedTeamKeyCbcType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    /// <summary>
    /// Will normally be 1, ENCRYPTED_BY_DATA_KEY_CBC. Base64 url-encoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Enterprise.EncryptedKeyType EncryptedTeamKeyCbcType {
      get { return encryptedTeamKeyCbcType_; }
      set {
        encryptedTeamKeyCbcType_ = value;
      }
    }

    /// <summary>Field number for the "encryptedTeamKeyGcm" field.</summary>
    public const int EncryptedTeamKeyGcmFieldNumber = 7;
    private pb::ByteString encryptedTeamKeyGcm_ = pb::ByteString.Empty;
    /// <summary>
    /// The team key encrypted with the tree key using AES/GCM.  Base64 url-encoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedTeamKeyGcm {
      get { return encryptedTeamKeyGcm_; }
      set {
        encryptedTeamKeyGcm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamKeyGcmType" field.</summary>
    public const int EncryptedTeamKeyGcmTypeFieldNumber = 8;
    private global::Enterprise.EncryptedKeyType encryptedTeamKeyGcmType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    /// <summary>
    /// Will normally be 3, ENCRYPTED_BY_DATA_KEY_GCM. Base64 url-encoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Enterprise.EncryptedKeyType EncryptedTeamKeyGcmType {
      get { return encryptedTeamKeyGcmType_; }
      set {
        encryptedTeamKeyGcmType_ = value;
      }
    }

    /// <summary>Field number for the "teamPublicKeyRsa" field.</summary>
    public const int TeamPublicKeyRsaFieldNumber = 9;
    private pb::ByteString teamPublicKeyRsa_ = pb::ByteString.Empty;
    /// <summary>
    /// Generated team RSA public key, Base64 url-encoded.  May be empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString TeamPublicKeyRsa {
      get { return teamPublicKeyRsa_; }
      set {
        teamPublicKeyRsa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamPrivateKeyRsa" field.</summary>
    public const int EncryptedTeamPrivateKeyRsaFieldNumber = 10;
    private pb::ByteString encryptedTeamPrivateKeyRsa_ = pb::ByteString.Empty;
    /// <summary>
    /// Generated RSA private key encrypted with the team key using AES/CBC. Base64 url-encoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedTeamPrivateKeyRsa {
      get { return encryptedTeamPrivateKeyRsa_; }
      set {
        encryptedTeamPrivateKeyRsa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamPrivateKeyRsaType" field.</summary>
    public const int EncryptedTeamPrivateKeyRsaTypeFieldNumber = 11;
    private global::Enterprise.EncryptedKeyType encryptedTeamPrivateKeyRsaType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    /// <summary>
    /// Will normally be 1, ENCRYPTED_BY_DATA_KEY_CBC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Enterprise.EncryptedKeyType EncryptedTeamPrivateKeyRsaType {
      get { return encryptedTeamPrivateKeyRsaType_; }
      set {
        encryptedTeamPrivateKeyRsaType_ = value;
      }
    }

    /// <summary>Field number for the "teamPublicKeyEcc" field.</summary>
    public const int TeamPublicKeyEccFieldNumber = 12;
    private pb::ByteString teamPublicKeyEcc_ = pb::ByteString.Empty;
    /// <summary>
    /// Generated team ECC public key. Base64 url-encoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString TeamPublicKeyEcc {
      get { return teamPublicKeyEcc_; }
      set {
        teamPublicKeyEcc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamPrivateKeyEcc" field.</summary>
    public const int EncryptedTeamPrivateKeyEccFieldNumber = 13;
    private pb::ByteString encryptedTeamPrivateKeyEcc_ = pb::ByteString.Empty;
    /// <summary>
    /// Generated team ECC private key encrypted with the team key using AES/GCM.  Base64 url-encoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncryptedTeamPrivateKeyEcc {
      get { return encryptedTeamPrivateKeyEcc_; }
      set {
        encryptedTeamPrivateKeyEcc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTeamPrivateKeyEccType" field.</summary>
    public const int EncryptedTeamPrivateKeyEccTypeFieldNumber = 14;
    private global::Enterprise.EncryptedKeyType encryptedTeamPrivateKeyEccType_ = global::Enterprise.EncryptedKeyType.KtNoKey;
    /// <summary>
    /// Will normally be 3, ENCRYPTED_BY_DATA_KEY_GCM. Base64 url-encoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Enterprise.EncryptedKeyType EncryptedTeamPrivateKeyEccType {
      get { return encryptedTeamPrivateKeyEccType_; }
      set {
        encryptedTeamPrivateKeyEccType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ApproveOneTeamResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ApproveOneTeamResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Approved != other.Approved) return false;
      if (Message != other.Message) return false;
      if (TeamUid != other.TeamUid) return false;
      if (TeamName != other.TeamName) return false;
      if (EncryptedTeamKeyCbc != other.EncryptedTeamKeyCbc) return false;
      if (EncryptedTeamKeyCbcType != other.EncryptedTeamKeyCbcType) return false;
      if (EncryptedTeamKeyGcm != other.EncryptedTeamKeyGcm) return false;
      if (EncryptedTeamKeyGcmType != other.EncryptedTeamKeyGcmType) return false;
      if (TeamPublicKeyRsa != other.TeamPublicKeyRsa) return false;
      if (EncryptedTeamPrivateKeyRsa != other.EncryptedTeamPrivateKeyRsa) return false;
      if (EncryptedTeamPrivateKeyRsaType != other.EncryptedTeamPrivateKeyRsaType) return false;
      if (TeamPublicKeyEcc != other.TeamPublicKeyEcc) return false;
      if (EncryptedTeamPrivateKeyEcc != other.EncryptedTeamPrivateKeyEcc) return false;
      if (EncryptedTeamPrivateKeyEccType != other.EncryptedTeamPrivateKeyEccType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Approved != false) hash ^= Approved.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (TeamUid.Length != 0) hash ^= TeamUid.GetHashCode();
      if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
      if (EncryptedTeamKeyCbc.Length != 0) hash ^= EncryptedTeamKeyCbc.GetHashCode();
      if (EncryptedTeamKeyCbcType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= EncryptedTeamKeyCbcType.GetHashCode();
      if (EncryptedTeamKeyGcm.Length != 0) hash ^= EncryptedTeamKeyGcm.GetHashCode();
      if (EncryptedTeamKeyGcmType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= EncryptedTeamKeyGcmType.GetHashCode();
      if (TeamPublicKeyRsa.Length != 0) hash ^= TeamPublicKeyRsa.GetHashCode();
      if (EncryptedTeamPrivateKeyRsa.Length != 0) hash ^= EncryptedTeamPrivateKeyRsa.GetHashCode();
      if (EncryptedTeamPrivateKeyRsaType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= EncryptedTeamPrivateKeyRsaType.GetHashCode();
      if (TeamPublicKeyEcc.Length != 0) hash ^= TeamPublicKeyEcc.GetHashCode();
      if (EncryptedTeamPrivateKeyEcc.Length != 0) hash ^= EncryptedTeamPrivateKeyEcc.GetHashCode();
      if (EncryptedTeamPrivateKeyEccType != global::Enterprise.EncryptedKeyType.KtNoKey) hash ^= EncryptedTeamPrivateKeyEccType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Approved != false) {
        output.WriteRawTag(8);
        output.WriteBool(Approved);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (TeamUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TeamUid);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TeamName);
      }
      if (EncryptedTeamKeyCbc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EncryptedTeamKeyCbc);
      }
      if (EncryptedTeamKeyCbcType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(48);
        output.WriteEnum((int) EncryptedTeamKeyCbcType);
      }
      if (EncryptedTeamKeyGcm.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(EncryptedTeamKeyGcm);
      }
      if (EncryptedTeamKeyGcmType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(64);
        output.WriteEnum((int) EncryptedTeamKeyGcmType);
      }
      if (TeamPublicKeyRsa.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(TeamPublicKeyRsa);
      }
      if (EncryptedTeamPrivateKeyRsa.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(EncryptedTeamPrivateKeyRsa);
      }
      if (EncryptedTeamPrivateKeyRsaType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(88);
        output.WriteEnum((int) EncryptedTeamPrivateKeyRsaType);
      }
      if (TeamPublicKeyEcc.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(TeamPublicKeyEcc);
      }
      if (EncryptedTeamPrivateKeyEcc.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(EncryptedTeamPrivateKeyEcc);
      }
      if (EncryptedTeamPrivateKeyEccType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(112);
        output.WriteEnum((int) EncryptedTeamPrivateKeyEccType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Approved != false) {
        output.WriteRawTag(8);
        output.WriteBool(Approved);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (TeamUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TeamUid);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TeamName);
      }
      if (EncryptedTeamKeyCbc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EncryptedTeamKeyCbc);
      }
      if (EncryptedTeamKeyCbcType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(48);
        output.WriteEnum((int) EncryptedTeamKeyCbcType);
      }
      if (EncryptedTeamKeyGcm.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(EncryptedTeamKeyGcm);
      }
      if (EncryptedTeamKeyGcmType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(64);
        output.WriteEnum((int) EncryptedTeamKeyGcmType);
      }
      if (TeamPublicKeyRsa.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(TeamPublicKeyRsa);
      }
      if (EncryptedTeamPrivateKeyRsa.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(EncryptedTeamPrivateKeyRsa);
      }
      if (EncryptedTeamPrivateKeyRsaType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(88);
        output.WriteEnum((int) EncryptedTeamPrivateKeyRsaType);
      }
      if (TeamPublicKeyEcc.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(TeamPublicKeyEcc);
      }
      if (EncryptedTeamPrivateKeyEcc.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(EncryptedTeamPrivateKeyEcc);
      }
      if (EncryptedTeamPrivateKeyEccType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        output.WriteRawTag(112);
        output.WriteEnum((int) EncryptedTeamPrivateKeyEccType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Approved != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TeamUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamUid);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (EncryptedTeamKeyCbc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTeamKeyCbc);
      }
      if (EncryptedTeamKeyCbcType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncryptedTeamKeyCbcType);
      }
      if (EncryptedTeamKeyGcm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTeamKeyGcm);
      }
      if (EncryptedTeamKeyGcmType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncryptedTeamKeyGcmType);
      }
      if (TeamPublicKeyRsa.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamPublicKeyRsa);
      }
      if (EncryptedTeamPrivateKeyRsa.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTeamPrivateKeyRsa);
      }
      if (EncryptedTeamPrivateKeyRsaType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncryptedTeamPrivateKeyRsaType);
      }
      if (TeamPublicKeyEcc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamPublicKeyEcc);
      }
      if (EncryptedTeamPrivateKeyEcc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTeamPrivateKeyEcc);
      }
      if (EncryptedTeamPrivateKeyEccType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncryptedTeamPrivateKeyEccType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ApproveOneTeamResponse other) {
      if (other == null) {
        return;
      }
      if (other.Approved != false) {
        Approved = other.Approved;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.TeamUid.Length != 0) {
        TeamUid = other.TeamUid;
      }
      if (other.TeamName.Length != 0) {
        TeamName = other.TeamName;
      }
      if (other.EncryptedTeamKeyCbc.Length != 0) {
        EncryptedTeamKeyCbc = other.EncryptedTeamKeyCbc;
      }
      if (other.EncryptedTeamKeyCbcType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        EncryptedTeamKeyCbcType = other.EncryptedTeamKeyCbcType;
      }
      if (other.EncryptedTeamKeyGcm.Length != 0) {
        EncryptedTeamKeyGcm = other.EncryptedTeamKeyGcm;
      }
      if (other.EncryptedTeamKeyGcmType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        EncryptedTeamKeyGcmType = other.EncryptedTeamKeyGcmType;
      }
      if (other.TeamPublicKeyRsa.Length != 0) {
        TeamPublicKeyRsa = other.TeamPublicKeyRsa;
      }
      if (other.EncryptedTeamPrivateKeyRsa.Length != 0) {
        EncryptedTeamPrivateKeyRsa = other.EncryptedTeamPrivateKeyRsa;
      }
      if (other.EncryptedTeamPrivateKeyRsaType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        EncryptedTeamPrivateKeyRsaType = other.EncryptedTeamPrivateKeyRsaType;
      }
      if (other.TeamPublicKeyEcc.Length != 0) {
        TeamPublicKeyEcc = other.TeamPublicKeyEcc;
      }
      if (other.EncryptedTeamPrivateKeyEcc.Length != 0) {
        EncryptedTeamPrivateKeyEcc = other.EncryptedTeamPrivateKeyEcc;
      }
      if (other.EncryptedTeamPrivateKeyEccType != global::Enterprise.EncryptedKeyType.KtNoKey) {
        EncryptedTeamPrivateKeyEccType = other.EncryptedTeamPrivateKeyEccType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Approved = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 34: {
            TeamName = input.ReadString();
            break;
          }
          case 42: {
            EncryptedTeamKeyCbc = input.ReadBytes();
            break;
          }
          case 48: {
            EncryptedTeamKeyCbcType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 58: {
            EncryptedTeamKeyGcm = input.ReadBytes();
            break;
          }
          case 64: {
            EncryptedTeamKeyGcmType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 74: {
            TeamPublicKeyRsa = input.ReadBytes();
            break;
          }
          case 82: {
            EncryptedTeamPrivateKeyRsa = input.ReadBytes();
            break;
          }
          case 88: {
            EncryptedTeamPrivateKeyRsaType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 98: {
            TeamPublicKeyEcc = input.ReadBytes();
            break;
          }
          case 106: {
            EncryptedTeamPrivateKeyEcc = input.ReadBytes();
            break;
          }
          case 112: {
            EncryptedTeamPrivateKeyEccType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Approved = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            TeamUid = input.ReadBytes();
            break;
          }
          case 34: {
            TeamName = input.ReadString();
            break;
          }
          case 42: {
            EncryptedTeamKeyCbc = input.ReadBytes();
            break;
          }
          case 48: {
            EncryptedTeamKeyCbcType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 58: {
            EncryptedTeamKeyGcm = input.ReadBytes();
            break;
          }
          case 64: {
            EncryptedTeamKeyGcmType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 74: {
            TeamPublicKeyRsa = input.ReadBytes();
            break;
          }
          case 82: {
            EncryptedTeamPrivateKeyRsa = input.ReadBytes();
            break;
          }
          case 88: {
            EncryptedTeamPrivateKeyRsaType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
          case 98: {
            TeamPublicKeyEcc = input.ReadBytes();
            break;
          }
          case 106: {
            EncryptedTeamPrivateKeyEcc = input.ReadBytes();
            break;
          }
          case 112: {
            EncryptedTeamPrivateKeyEccType = (global::Enterprise.EncryptedKeyType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
