// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: APIRequest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Authentication {

  /// <summary>Holder for reflection information generated from APIRequest.proto</summary>
  public static partial class APIRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for APIRequest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static APIRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBBUElSZXF1ZXN0LnByb3RvEg5BdXRoZW50aWNhdGlvbhoQZW50ZXJwcmlz",
            "ZS5wcm90byKwAQoKQXBpUmVxdWVzdBIgChhlbmNyeXB0ZWRUcmFuc21pc3Np",
            "b25LZXkYASABKAwSEwoLcHVibGljS2V5SWQYAiABKAUSDgoGbG9jYWxlGAMg",
            "ASgJEhgKEGVuY3J5cHRlZFBheWxvYWQYBCABKAwSFgoOZW5jcnlwdGlvblR5",
            "cGUYBSABKAUSEQoJcmVjYXB0Y2hhGAYgASgJEhYKDnN1YkVudmlyb25tZW50",
            "GAcgASgJImoKEUFwaVJlcXVlc3RQYXlsb2FkEg8KB3BheWxvYWQYASABKAwS",
            "HQoVZW5jcnlwdGVkU2Vzc2lvblRva2VuGAIgASgMEhEKCXRpbWVUb2tlbhgD",
            "IAEoDBISCgphcGlWZXJzaW9uGAQgASgFIjYKCVRyYW5zZm9ybRILCgNrZXkY",
            "ASABKAwSHAoUZW5jcnlwdGVkRGV2aWNlVG9rZW4YAiABKAwiOgoNRGV2aWNl",
            "UmVxdWVzdBIVCg1jbGllbnRWZXJzaW9uGAEgASgJEhIKCmRldmljZU5hbWUY",
            "AiABKAkiVAoLQXV0aFJlcXVlc3QSFQoNY2xpZW50VmVyc2lvbhgBIAEoCRIQ",
            "Cgh1c2VybmFtZRgCIAEoCRIcChRlbmNyeXB0ZWREZXZpY2VUb2tlbhgDIAEo",
            "DCKLAQoUTmV3VXNlck1pbmltdW1QYXJhbXMSGQoRbWluaW11bUl0ZXJhdGlv",
            "bnMYASABKAUSGgoScGFzc3dvcmRNYXRjaFJlZ2V4GAIgAygJEiAKGHBhc3N3",
            "b3JkTWF0Y2hEZXNjcmlwdGlvbhgDIAMoCRIaChJpc0VudGVycHJpc2VEb21h",
            "aW4YBCABKAgiiQEKD1ByZUxvZ2luUmVxdWVzdBIwCgthdXRoUmVxdWVzdBgB",
            "IAEoCzIbLkF1dGhlbnRpY2F0aW9uLkF1dGhSZXF1ZXN0EiwKCWxvZ2luVHlw",
            "ZRgCIAEoDjIZLkF1dGhlbnRpY2F0aW9uLkxvZ2luVHlwZRIWCg50d29GYWN0",
            "b3JUb2tlbhgDIAEoDCKAAgoMTG9naW5SZXF1ZXN0EjAKC2F1dGhSZXF1ZXN0",
            "GAEgASgLMhsuQXV0aGVudGljYXRpb24uQXV0aFJlcXVlc3QSLAoJbG9naW5U",
            "eXBlGAIgASgOMhkuQXV0aGVudGljYXRpb24uTG9naW5UeXBlEh8KF2F1dGhl",
            "bnRpY2F0aW9uSGFzaFByaW1lGAMgASgMEhsKE2VuY3J5cHRlZExvZ2luVG9r",
            "ZW4YBCABKAwSFAoMYXV0aFJlc3BvbnNlGAUgASgMEhYKDm1jRW50ZXJwcmlz",
            "ZUlkGAYgASgFEhIKCnB1c2hfdG9rZW4YByABKAkSEAoIcGxhdGZvcm0YCCAB",
            "KAkiXAoORGV2aWNlUmVzcG9uc2USHAoUZW5jcnlwdGVkRGV2aWNlVG9rZW4Y",
            "ASABKAwSLAoGc3RhdHVzGAIgASgOMhwuQXV0aGVudGljYXRpb24uRGV2aWNl",
            "U3RhdHVzIlYKBFNhbHQSEgoKaXRlcmF0aW9ucxgBIAEoBRIMCgRzYWx0GAIg",
            "ASgMEhEKCWFsZ29yaXRobRgDIAEoBRILCgN1aWQYBCABKAwSDAoEbmFtZRgF",
            "IAEoCSIgChBUd29GYWN0b3JDaGFubmVsEgwKBHR5cGUYASABKAUi4gIKEVN0",
            "YXJ0TG9naW5SZXF1ZXN0EhwKFGVuY3J5cHRlZERldmljZVRva2VuGAEgASgM",
            "EhAKCHVzZXJuYW1lGAIgASgJEhUKDWNsaWVudFZlcnNpb24YAyABKAkSGQoR",
            "bWVzc2FnZVNlc3Npb25VaWQYBCABKAwSGwoTZW5jcnlwdGVkTG9naW5Ub2tl",
            "bhgFIAEoDBIsCglsb2dpblR5cGUYBiABKA4yGS5BdXRoZW50aWNhdGlvbi5M",
            "b2dpblR5cGUSFgoObWNFbnRlcnByaXNlSWQYByABKAUSMAoLbG9naW5NZXRo",
            "b2QYCCABKA4yGy5BdXRoZW50aWNhdGlvbi5Mb2dpbk1ldGhvZBIVCg1mb3Jj",
            "ZU5ld0xvZ2luGAkgASgIEhEKCWNsb25lQ29kZRgKIAEoDBIYChB2MlR3b0Zh",
            "Y3RvclRva2VuGAsgASgJEhIKCmFjY291bnRVaWQYDCABKAwihQQKDUxvZ2lu",
            "UmVzcG9uc2USLgoKbG9naW5TdGF0ZRgBIAEoDjIaLkF1dGhlbnRpY2F0aW9u",
            "LkxvZ2luU3RhdGUSEgoKYWNjb3VudFVpZBgCIAEoDBIXCg9wcmltYXJ5VXNl",
            "cm5hbWUYAyABKAkSGAoQZW5jcnlwdGVkRGF0YUtleRgEIAEoDBJCChRlbmNy",
            "eXB0ZWREYXRhS2V5VHlwZRgFIAEoDjIkLkF1dGhlbnRpY2F0aW9uLkVuY3J5",
            "cHRlZERhdGFLZXlUeXBlEhsKE2VuY3J5cHRlZExvZ2luVG9rZW4YBiABKAwS",
            "HQoVZW5jcnlwdGVkU2Vzc2lvblRva2VuGAcgASgMEjoKEHNlc3Npb25Ub2tl",
            "blR5cGUYCCABKA4yIC5BdXRoZW50aWNhdGlvbi5TZXNzaW9uVG9rZW5UeXBl",
            "Eg8KB21lc3NhZ2UYCSABKAkSCwoDdXJsGAogASgJEjYKCGNoYW5uZWxzGAsg",
            "AygLMiQuQXV0aGVudGljYXRpb24uVHdvRmFjdG9yQ2hhbm5lbEluZm8SIgoE",
            "c2FsdBgMIAMoCzIULkF1dGhlbnRpY2F0aW9uLlNhbHQSEQoJY2xvbmVDb2Rl",
            "GA0gASgMEhoKEnN0YXRlU3BlY2lmaWNWYWx1ZRgOIAEoCRIYChBzc29DbGll",
            "bnRWZXJzaW9uGA8gASgJIowBCgtTc29Vc2VySW5mbxITCgtjb21wYW55TmFt",
            "ZRgBIAEoCRITCgtzYW1sUmVxdWVzdBgCIAEoCRIXCg9zYW1sUmVxdWVzdFR5",
            "cGUYAyABKAkSFQoNc3NvRG9tYWluTmFtZRgEIAEoCRIQCghsb2dpblVybBgF",
            "IAEoCRIRCglsb2dvdXRVcmwYBiABKAki1gEKEFByZUxvZ2luUmVzcG9uc2US",
            "MgoMZGV2aWNlU3RhdHVzGAEgASgOMhwuQXV0aGVudGljYXRpb24uRGV2aWNl",
            "U3RhdHVzEiIKBHNhbHQYAiADKAsyFC5BdXRoZW50aWNhdGlvbi5TYWx0EjgK",
            "Dk9CU09MRVRFX0ZJRUxEGAMgAygLMiAuQXV0aGVudGljYXRpb24uVHdvRmFj",
            "dG9yQ2hhbm5lbBIwCgtzc29Vc2VySW5mbxgEIAEoCzIbLkF1dGhlbnRpY2F0",
            "aW9uLlNzb1VzZXJJbmZvIioKEExvZ2luVG9NY1JlcXVlc3QSFgoObWNFbnRl",
            "cnByaXNlSWQYASABKAUiTAoRTG9naW5Ub01jUmVzcG9uc2USHQoVZW5jcnlw",
            "dGVkU2Vzc2lvblRva2VuGAEgASgMEhgKEGVuY3J5cHRlZFRyZWVLZXkYAiAB",
            "KAkiJgoSTG9naW5Bc1VzZXJSZXF1ZXN0EhAKCHVzZXJuYW1lGAEgASgJIlcK",
            "E0xvZ2luQXNVc2VyUmVzcG9uc2USHQoVZW5jcnlwdGVkU2Vzc2lvblRva2Vu",
            "GAEgASgMEiEKGWVuY3J5cHRlZFNoYXJlZEFjY291bnRLZXkYAiABKAwihAEK",
            "F1ZhbGlkYXRlQXV0aEhhc2hSZXF1ZXN0EjYKDnBhc3N3b3JkTWV0aG9kGAEg",
            "ASgOMh4uQXV0aGVudGljYXRpb24uUGFzc3dvcmRNZXRob2QSFAoMYXV0aFJl",
            "c3BvbnNlGAIgASgMEhsKE2VuY3J5cHRlZExvZ2luVG9rZW4YAyABKAwi9QEK",
            "FFR3b0ZhY3RvckNoYW5uZWxJbmZvEjkKC2NoYW5uZWxUeXBlGAEgASgOMiQu",
            "QXV0aGVudGljYXRpb24uVHdvRmFjdG9yQ2hhbm5lbFR5cGUSEwoLY2hhbm5l",
            "bF91aWQYAiABKAwSEwoLY2hhbm5lbE5hbWUYAyABKAkSEQoJY2hhbGxlbmdl",
            "GAQgASgJEhQKDGNhcGFiaWxpdGllcxgFIAMoCRITCgtwaG9uZU51bWJlchgG",
            "IAEoCRI6Cg1tYXhFeHBpcmF0aW9uGAcgASgOMiMuQXV0aGVudGljYXRpb24u",
            "VHdvRmFjdG9yRXhwaXJhdGlvbiLJAQoYVHdvRmFjdG9yVmFsaWRhdGVSZXF1",
            "ZXN0EhsKE2VuY3J5cHRlZExvZ2luVG9rZW4YASABKAwSNQoJdmFsdWVUeXBl",
            "GAIgASgOMiIuQXV0aGVudGljYXRpb24uVHdvRmFjdG9yVmFsdWVUeXBlEg0K",
            "BXZhbHVlGAMgASgJEhMKC2NoYW5uZWxfdWlkGAQgASgMEjUKCGV4cGlyZUlu",
            "GAUgASgOMiMuQXV0aGVudGljYXRpb24uVHdvRmFjdG9yRXhwaXJhdGlvbiI4",
            "ChlUd29GYWN0b3JWYWxpZGF0ZVJlc3BvbnNlEhsKE2VuY3J5cHRlZExvZ2lu",
            "VG9rZW4YASABKAwiuAEKGFR3b0ZhY3RvclNlbmRQdXNoUmVxdWVzdBIbChNl",
            "bmNyeXB0ZWRMb2dpblRva2VuGAEgASgMEjMKCHB1c2hUeXBlGAIgASgOMiEu",
            "QXV0aGVudGljYXRpb24uVHdvRmFjdG9yUHVzaFR5cGUSEwoLY2hhbm5lbF91",
            "aWQYAyABKAwSNQoIZXhwaXJlSW4YBCABKA4yIy5BdXRoZW50aWNhdGlvbi5U",
            "d29GYWN0b3JFeHBpcmF0aW9uIoMBCgdMaWNlbnNlEg8KB2NyZWF0ZWQYASAB",
            "KAMSEgoKZXhwaXJhdGlvbhgCIAEoAxI0Cg1saWNlbnNlU3RhdHVzGAMgASgO",
            "Mh0uQXV0aGVudGljYXRpb24uTGljZW5zZVN0YXR1cxIMCgRwYWlkGAQgASgI",
            "Eg8KB21lc3NhZ2UYBSABKAkiRwoPT3duZXJsZXNzUmVjb3JkEhEKCXJlY29y",
            "ZFVpZBgBIAEoDBIRCglyZWNvcmRLZXkYAiABKAwSDgoGc3RhdHVzGAMgASgF",
            "IkwKEE93bmVybGVzc1JlY29yZHMSOAoPb3duZXJsZXNzUmVjb3JkGAEgAygL",
            "Mh8uQXV0aGVudGljYXRpb24uT3duZXJsZXNzUmVjb3JkItcBCg9Vc2VyQXV0",
            "aFJlcXVlc3QSCwoDdWlkGAEgASgMEgwKBHNhbHQYAiABKAwSEgoKaXRlcmF0",
            "aW9ucxgDIAEoBRIaChJlbmNyeXB0ZWRDbGllbnRLZXkYBCABKAwSEAoIYXV0",
            "aEhhc2gYBSABKAwSGAoQZW5jcnlwdGVkRGF0YUtleRgGIAEoDBIsCglsb2dp",
            "blR5cGUYByABKA4yGS5BdXRoZW50aWNhdGlvbi5Mb2dpblR5cGUSDAoEbmFt",
            "ZRgIIAEoCRIRCglhbGdvcml0aG0YCSABKAUiGQoKVWlkUmVxdWVzdBILCgN1",
            "aWQYASADKAwiqwEKE0RldmljZVVwZGF0ZVJlcXVlc3QSHAoUZW5jcnlwdGVk",
            "RGV2aWNlVG9rZW4YASABKAwSFQoNY2xpZW50VmVyc2lvbhgCIAEoCRISCgpk",
            "ZXZpY2VOYW1lGAMgASgJEhcKD2RldmljZVB1YmxpY0tleRgEIAEoDBIyCgxk",
            "ZXZpY2VTdGF0dXMYBSABKA4yHC5BdXRoZW50aWNhdGlvbi5EZXZpY2VTdGF0",
            "dXMigQEKHVJlZ2lzdGVyRGV2aWNlSW5SZWdpb25SZXF1ZXN0EhwKFGVuY3J5",
            "cHRlZERldmljZVRva2VuGAEgASgMEhUKDWNsaWVudFZlcnNpb24YAiABKAkS",
            "EgoKZGV2aWNlTmFtZRgDIAEoCRIXCg9kZXZpY2VQdWJsaWNLZXkYBCABKAwi",
            "+AIKE1JlZ2lzdHJhdGlvblJlcXVlc3QSMAoLYXV0aFJlcXVlc3QYASABKAsy",
            "Gy5BdXRoZW50aWNhdGlvbi5BdXRoUmVxdWVzdBI4Cg91c2VyQXV0aFJlcXVl",
            "c3QYAiABKAsyHy5BdXRoZW50aWNhdGlvbi5Vc2VyQXV0aFJlcXVlc3QSGgoS",
            "ZW5jcnlwdGVkQ2xpZW50S2V5GAMgASgMEhsKE2VuY3J5cHRlZFByaXZhdGVL",
            "ZXkYBCABKAwSEQoJcHVibGljS2V5GAUgASgMEhgKEHZlcmlmaWNhdGlvbkNv",
            "ZGUYBiABKAkSHgoWZGVwcmVjYXRlZEF1dGhIYXNoSGFzaBgHIAEoDBIkChxk",
            "ZXByZWNhdGVkRW5jcnlwdGVkQ2xpZW50S2V5GAggASgMEiUKHWRlcHJlY2F0",
            "ZWRFbmNyeXB0ZWRQcml2YXRlS2V5GAkgASgMEiIKGmRlcHJlY2F0ZWRFbmNy",
            "eXB0aW9uUGFyYW1zGAogASgMItABChZDb252ZXJ0VXNlclRvVjNSZXF1ZXN0",
            "EjAKC2F1dGhSZXF1ZXN0GAEgASgLMhsuQXV0aGVudGljYXRpb24uQXV0aFJl",
            "cXVlc3QSOAoPdXNlckF1dGhSZXF1ZXN0GAIgASgLMh8uQXV0aGVudGljYXRp",
            "b24uVXNlckF1dGhSZXF1ZXN0EhoKEmVuY3J5cHRlZENsaWVudEtleRgDIAEo",
            "DBIbChNlbmNyeXB0ZWRQcml2YXRlS2V5GAQgASgMEhEKCXB1YmxpY0tleRgF",
            "IAEoDCIkChBSZXZpc2lvblJlc3BvbnNlEhAKCHJldmlzaW9uGAEgASgDIiYK",
            "EkNoYW5nZUVtYWlsUmVxdWVzdBIQCghuZXdFbWFpbBgBIAEoCSI4ChNDaGFu",
            "Z2VFbWFpbFJlc3BvbnNlEiEKGWVuY3J5cHRlZENoYW5nZUVtYWlsVG9rZW4Y",
            "ASABKAwiNgodRW1haWxWZXJpZmljYXRpb25MaW5rUmVzcG9uc2USFQoNZW1h",
            "aWxWZXJpZmllZBgBIAEoCCIpCgxTZWN1cml0eURhdGESCwoDdWlkGAEgASgM",
            "EgwKBGRhdGEYAiABKAwikQEKE1NlY3VyaXR5RGF0YVJlcXVlc3QSOAoScmVj",
            "b3JkU2VjdXJpdHlEYXRhGAEgAygLMhwuQXV0aGVudGljYXRpb24uU2VjdXJp",
            "dHlEYXRhEkAKGm1hc3RlclBhc3N3b3JkU2VjdXJpdHlEYXRhGAIgAygLMhwu",
            "QXV0aGVudGljYXRpb24uU2VjdXJpdHlEYXRhIrUBCh1TZWN1cml0eVJlcG9y",
            "dEluY3JlbWVudGFsRGF0YRIYChBlbnRlcnByaXNlVXNlcklkGAEgASgDEhsK",
            "E2N1cnJlbnRTZWN1cml0eURhdGEYAiABKAwSIwobY3VycmVudFNlY3VyaXR5",
            "RGF0YVJldmlzaW9uGAMgASgDEhcKD29sZFNlY3VyaXR5RGF0YRgEIAEoDBIf",
            "ChdvbGRTZWN1cml0eURhdGFSZXZpc2lvbhgFIAEoAyL1AQoOU2VjdXJpdHlS",
            "ZXBvcnQSGAoQZW50ZXJwcmlzZVVzZXJJZBgBIAEoAxIbChNlbmNyeXB0ZWRS",
            "ZXBvcnREYXRhGAIgASgMEhAKCHJldmlzaW9uGAMgASgDEhEKCXR3b0ZhY3Rv",
            "chgEIAEoCRIRCglsYXN0TG9naW4YBSABKAMSHgoWbnVtYmVyT2ZSZXVzZWRQ",
            "YXNzd29yZBgGIAEoBRJUCh1zZWN1cml0eVJlcG9ydEluY3JlbWVudGFsRGF0",
            "YRgHIAMoCzItLkF1dGhlbnRpY2F0aW9uLlNlY3VyaXR5UmVwb3J0SW5jcmVt",
            "ZW50YWxEYXRhIlMKGVNlY3VyaXR5UmVwb3J0U2F2ZVJlcXVlc3QSNgoOc2Vj",
            "dXJpdHlSZXBvcnQYASADKAsyHi5BdXRoZW50aWNhdGlvbi5TZWN1cml0eVJl",
            "cG9ydCIpChVTZWN1cml0eVJlcG9ydFJlcXVlc3QSEAoIZnJvbVBhZ2UYASAB",
            "KAMiuAEKFlNlY3VyaXR5UmVwb3J0UmVzcG9uc2USHAoUZW50ZXJwcmlzZVBy",
            "aXZhdGVLZXkYASABKAwSNgoOc2VjdXJpdHlSZXBvcnQYAiADKAsyHi5BdXRo",
            "ZW50aWNhdGlvbi5TZWN1cml0eVJlcG9ydBIUCgxhc09mUmV2aXNpb24YAyAB",
            "KAMSEAoIZnJvbVBhZ2UYBCABKAMSDgoGdG9QYWdlGAUgASgDEhAKCGNvbXBs",
            "ZXRlGAYgASgIIicKFlJldXNlZFBhc3N3b3Jkc1JlcXVlc3QSDQoFY291bnQY",
            "ASABKAUiPgoUU3VtbWFyeUNvbnNvbGVSZXBvcnQSEgoKcmVwb3J0VHlwZRgB",
            "IAEoBRISCgpyZXBvcnREYXRhGAIgASgMInwKEkNoYW5nZVRvS2V5VHlwZU9u",
            "ZRIvCgpvYmplY3RUeXBlGAEgASgOMhsuQXV0aGVudGljYXRpb24uT2JqZWN0",
            "VHlwZXMSEgoKcHJpbWFyeVVpZBgCIAEoDBIUCgxzZWNvbmRhcnlVaWQYAyAB",
            "KAwSCwoDa2V5GAQgASgMIlsKGUNoYW5nZVRvS2V5VHlwZU9uZVJlcXVlc3QS",
            "PgoSY2hhbmdlVG9LZXlUeXBlT25lGAEgAygLMiIuQXV0aGVudGljYXRpb24u",
            "Q2hhbmdlVG9LZXlUeXBlT25lIlUKGENoYW5nZVRvS2V5VHlwZU9uZVN0YXR1",
            "cxILCgN1aWQYASABKAwSDAoEdHlwZRgCIAEoCRIOCgZzdGF0dXMYAyABKAkS",
            "DgoGcmVhc29uGAQgASgJImgKGkNoYW5nZVRvS2V5VHlwZU9uZVJlc3BvbnNl",
            "EkoKGGNoYW5nZVRvS2V5VHlwZU9uZVN0YXR1cxgBIAMoCzIoLkF1dGhlbnRp",
            "Y2F0aW9uLkNoYW5nZVRvS2V5VHlwZU9uZVN0YXR1cyIhCgZTZXRLZXkSCgoC",
            "aWQYASABKAMSCwoDa2V5GAIgASgMIjUKDVNldEtleVJlcXVlc3QSJAoEa2V5",
            "cxgBIAMoCzIWLkF1dGhlbnRpY2F0aW9uLlNldEtleSLOBAoRQ3JlYXRlVXNl",
            "clJlcXVlc3QSEAoIdXNlcm5hbWUYASABKAkSFAoMYXV0aFZlcmlmaWVyGAIg",
            "ASgMEhgKEGVuY3J5cHRpb25QYXJhbXMYAyABKAwSFAoMcnNhUHVibGljS2V5",
            "GAQgASgMEh4KFnJzYUVuY3J5cHRlZFByaXZhdGVLZXkYBSABKAwSFAoMZWNj",
            "UHVibGljS2V5GAYgASgMEh4KFmVjY0VuY3J5cHRlZFByaXZhdGVLZXkYByAB",
            "KAwSHAoUZW5jcnlwdGVkRGV2aWNlVG9rZW4YCCABKAwSGgoSZW5jcnlwdGVk",
            "Q2xpZW50S2V5GAkgASgMEhUKDWNsaWVudFZlcnNpb24YCiABKAkSHgoWZW5j",
            "cnlwdGVkRGV2aWNlRGF0YUtleRgLIAEoDBIbChNlbmNyeXB0ZWRMb2dpblRv",
            "a2VuGAwgASgMEhkKEW1lc3NhZ2VTZXNzaW9uVWlkGA0gASgMEhcKD2luc3Rh",
            "bGxSZWZlcnJlchgOIAEoCRIOCgZtY2NNTkMYDyABKAUSCwoDbWZnGBAgASgJ",
            "Eg0KBW1vZGVsGBEgASgJEg0KBWJyYW5kGBIgASgJEg8KB3Byb2R1Y3QYEyAB",
            "KAkSDgoGZGV2aWNlGBQgASgJEg8KB2NhcnJpZXIYFSABKAkSGAoQdmVyaWZp",
            "Y2F0aW9uQ29kZRgWIAEoCRJCChZlbnRlcnByaXNlUmVnaXN0cmF0aW9uGBcg",
            "ASgLMiIuRW50ZXJwcmlzZS5FbnRlcnByaXNlUmVnaXN0cmF0aW9uIlcKIU5v",
            "ZGVFbmZvcmNlbWVudEFkZE9yVXBkYXRlUmVxdWVzdBIOCgZub2RlSWQYASAB",
            "KAMSEwoLZW5mb3JjZW1lbnQYAiABKAkSDQoFdmFsdWUYAyABKAkiQwocTm9k",
            "ZUVuZm9yY2VtZW50UmVtb3ZlUmVxdWVzdBIOCgZub2RlSWQYASABKAMSEwoL",
            "ZW5mb3JjZW1lbnQYAiABKAkiIgoMVXNlckFjY291bnRzEhIKCmFjY291bnRV",
            "aWQYASADKAwinwEKD0FwaVJlcXVlc3RCeUtleRINCgVrZXlJZBgBIAEoBRIP",
            "CgdwYXlsb2FkGAIgASgMEhAKCHVzZXJuYW1lGAMgASgJEg4KBmxvY2FsZRgE",
            "IAEoCRI8ChFzdXBwb3J0ZWRMYW5ndWFnZRgFIAEoDjIhLkF1dGhlbnRpY2F0",
            "aW9uLlN1cHBvcnRlZExhbmd1YWdlEgwKBHR5cGUYBiABKAUiLgoPTWVtY2Fj",
            "aGVSZXF1ZXN0EgsKA2tleRgBIAEoCRIOCgZ1c2VySWQYAiABKAUiLgoQTWVt",
            "Y2FjaGVSZXNwb25zZRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAkidwoc",
            "TWFzdGVyUGFzc3dvcmRSZWVudHJ5UmVxdWVzdBIWCg5wYmtkZjJQYXNzd29y",
            "ZBgBIAEoCRI/CgZhY3Rpb24YAiABKA4yLy5BdXRoZW50aWNhdGlvbi5NYXN0",
            "ZXJQYXNzd29yZFJlZW50cnlBY3Rpb25UeXBlIl8KGURldmljZVJlZ2lzdHJh",
            "dGlvblJlcXVlc3QSFQoNY2xpZW50VmVyc2lvbhgBIAEoCRISCgpkZXZpY2VO",
            "YW1lGAIgASgJEhcKD2RldmljZVB1YmxpY0tleRgDIAEoDCKaAQoZRGV2aWNl",
            "VmVyaWZpY2F0aW9uUmVxdWVzdBIcChRlbmNyeXB0ZWREZXZpY2VUb2tlbhgB",
            "IAEoDBIQCgh1c2VybmFtZRgCIAEoCRIbChN2ZXJpZmljYXRpb25DaGFubmVs",
            "GAMgASgJEhkKEW1lc3NhZ2VTZXNzaW9uVWlkGAQgASgMEhUKDWNsaWVudFZl",
            "cnNpb24YBSABKAkisgEKGkRldmljZVZlcmlmaWNhdGlvblJlc3BvbnNlEhwK",
            "FGVuY3J5cHRlZERldmljZVRva2VuGAEgASgMEhAKCHVzZXJuYW1lGAIgASgJ",
            "EhkKEW1lc3NhZ2VTZXNzaW9uVWlkGAMgASgMEhUKDWNsaWVudFZlcnNpb24Y",
            "BCABKAkSMgoMZGV2aWNlU3RhdHVzGAUgASgOMhwuQXV0aGVudGljYXRpb24u",
            "RGV2aWNlU3RhdHVzIsgBChVEZXZpY2VBcHByb3ZhbFJlcXVlc3QSDQoFZW1h",
            "aWwYASABKAkSGAoQdHdvRmFjdG9yQ2hhbm5lbBgCIAEoCRIVCg1jbGllbnRW",
            "ZXJzaW9uGAMgASgJEg4KBmxvY2FsZRgEIAEoCRIcChRlbmNyeXB0ZWREZXZp",
            "Y2VUb2tlbhgFIAEoDBIQCgh0b3RwQ29kZRgGIAEoCRIQCghkZXZpY2VJcBgH",
            "IAEoCRIdChVkZXZpY2VUb2tlbkV4cGlyZURheXMYCCABKAkiOQoWRGV2aWNl",
            "QXBwcm92YWxSZXNwb25zZRIfChdlbmNyeXB0ZWRUd29GYWN0b3JUb2tlbhgB",
            "IAEoDCJ+ChRBcHByb3ZlRGV2aWNlUmVxdWVzdBIcChRlbmNyeXB0ZWREZXZp",
            "Y2VUb2tlbhgBIAEoDBIeChZlbmNyeXB0ZWREZXZpY2VEYXRhS2V5GAIgASgM",
            "EhQKDGRlbnlBcHByb3ZhbBgDIAEoCBISCgpsaW5rRGV2aWNlGAQgASgIIkUK",
            "GkVudGVycHJpc2VVc2VyQWxpYXNSZXF1ZXN0EhgKEGVudGVycHJpc2VVc2Vy",
            "SWQYASABKAMSDQoFYWxpYXMYAiABKAkiJgoGRGV2aWNlEhwKFGVuY3J5cHRl",
            "ZERldmljZVRva2VuGAEgASgMIlwKHFJlZ2lzdGVyRGV2aWNlRGF0YUtleVJl",
            "cXVlc3QSHAoUZW5jcnlwdGVkRGV2aWNlVG9rZW4YASABKAwSHgoWZW5jcnlw",
            "dGVkRGV2aWNlRGF0YUtleRgCIAEoDCJuCilWYWxpZGF0ZUNyZWF0ZVVzZXJW",
            "ZXJpZmljYXRpb25Db2RlUmVxdWVzdBIQCgh1c2VybmFtZRgBIAEoCRIVCg1j",
            "bGllbnRWZXJzaW9uGAIgASgJEhgKEHZlcmlmaWNhdGlvbkNvZGUYAyABKAki",
            "owEKJVZhbGlkYXRlRGV2aWNlVmVyaWZpY2F0aW9uQ29kZVJlcXVlc3QSEAoI",
            "dXNlcm5hbWUYASABKAkSFQoNY2xpZW50VmVyc2lvbhgCIAEoCRIYChB2ZXJp",
            "ZmljYXRpb25Db2RlGAMgASgJEhkKEW1lc3NhZ2VTZXNzaW9uVWlkGAQgASgM",
            "EhwKFGVuY3J5cHRlZERldmljZVRva2VuGAUgASgMIlkKGVNlbmRTZXNzaW9u",
            "TWVzc2FnZVJlcXVlc3QSGQoRbWVzc2FnZVNlc3Npb25VaWQYASABKAwSDwoH",
            "Y29tbWFuZBgCIAEoCRIQCgh1c2VybmFtZRgDIAEoCSJNChFHbG9iYWxVc2Vy",
            "QWNjb3VudBIQCgh1c2VybmFtZRgBIAEoCRISCgphY2NvdW50VWlkGAIgASgM",
            "EhIKCnJlZ2lvbk5hbWUYAyABKAkiNwoPQWNjb3VudFVzZXJuYW1lEhAKCHVz",
            "ZXJuYW1lGAEgASgJEhIKCmRhdGVBY3RpdmUYAiABKAkiUAoZU3NvU2Vydmlj",
            "ZVByb3ZpZGVyUmVxdWVzdBIMCgRuYW1lGAEgASgJEhUKDWNsaWVudFZlcnNp",
            "b24YAiABKAkSDgoGbG9jYWxlGAMgASgJImEKGlNzb1NlcnZpY2VQcm92aWRl",
            "clJlc3BvbnNlEgwKBG5hbWUYASABKAkSDQoFc3BVcmwYAiABKAkSDwoHaXND",
            "bG91ZBgDIAEoCBIVCg1jbGllbnRWZXJzaW9uGAQgASgJIjQKElVzZXJTZXR0",
            "aW5nUmVxdWVzdBIPCgdzZXR0aW5nGAEgASgJEg0KBXZhbHVlGAIgASgJImYK",
            "DVRocm90dGxlU3RhdGUSKgoEdHlwZRgBIAEoDjIcLkF1dGhlbnRpY2F0aW9u",
            "LlRocm90dGxlVHlwZRILCgNrZXkYAiABKAkSDQoFdmFsdWUYAyABKAkSDQoF",
            "c3RhdGUYBCABKAgilwEKEURldmljZUluZm9ybWF0aW9uEhAKCGRldmljZUlk",
            "GAEgASgDEhIKCmRldmljZU5hbWUYAiABKAkSFQoNY2xpZW50VmVyc2lvbhgD",
            "IAEoCRIRCglsYXN0TG9naW4YBCABKAMSMgoMZGV2aWNlU3RhdHVzGAUgASgO",
            "MhwuQXV0aGVudGljYXRpb24uRGV2aWNlU3RhdHVzIioKC1VzZXJTZXR0aW5n",
            "EgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAgiLgoSVXNlckRhdGFLZXlS",
            "ZXF1ZXN0EhgKEGVudGVycHJpc2VVc2VySWQYASADKAMiUQobRW50ZXJwcmlz",
            "ZVVzZXJJZERhdGFLZXlQYWlyEhgKEGVudGVycHJpc2VVc2VySWQYASABKAMS",
            "GAoQZW5jcnlwdGVkRGF0YUtleRgCIAEoDCKVAQoLVXNlckRhdGFLZXkSDgoG",
            "cm9sZUlkGAEgASgDEg8KB3JvbGVLZXkYAiABKAwSEgoKcHJpdmF0ZUtleRgD",
            "IAEoCRJRChxlbnRlcnByaXNlVXNlcklkRGF0YUtleVBhaXJzGAQgAygLMisu",
            "QXV0aGVudGljYXRpb24uRW50ZXJwcmlzZVVzZXJJZERhdGFLZXlQYWlyInoK",
            "E1VzZXJEYXRhS2V5UmVzcG9uc2USMQoMdXNlckRhdGFLZXlzGAEgAygLMhsu",
            "QXV0aGVudGljYXRpb24uVXNlckRhdGFLZXkSFAoMYWNjZXNzRGVuaWVkGAIg",
            "AygDEhoKEm5vRW5jcnlwdGVkRGF0YUtleRgDIAMoAyJICilNYXN0ZXJQYXNz",
            "d29yZFJlY292ZXJ5VmVyaWZpY2F0aW9uUmVxdWVzdBIbChNlbmNyeXB0ZWRM",
            "b2dpblRva2VuGAEgASgMIlUKHEdldFNlY3VyaXR5UXVlc3Rpb25WM1JlcXVl",
            "c3QSGwoTZW5jcnlwdGVkTG9naW5Ub2tlbhgBIAEoDBIYChB2ZXJpZmljYXRp",
            "b25Db2RlGAIgASgJInIKHUdldFNlY3VyaXR5UXVlc3Rpb25WM1Jlc3BvbnNl",
            "EhgKEHNlY3VyaXR5UXVlc3Rpb24YASABKAkSFQoNYmFja3VwS2V5RGF0ZRgC",
            "IAEoAxIMCgRzYWx0GAMgASgMEhIKCml0ZXJhdGlvbnMYBCABKAUibgoZR2V0",
            "RGF0YUtleUJhY2t1cFYzUmVxdWVzdBIbChNlbmNyeXB0ZWRMb2dpblRva2Vu",
            "GAEgASgMEhgKEHZlcmlmaWNhdGlvbkNvZGUYAiABKAkSGgoSc2VjdXJpdHlB",
            "bnN3ZXJIYXNoGAMgASgMInYKDVBhc3N3b3JkUnVsZXMSEAoIcnVsZVR5cGUY",
            "ASABKAkSDQoFbWF0Y2gYAiABKAgSDwoHcGF0dGVybhgDIAEoCRITCgtkZXNj",
            "cmlwdGlvbhgEIAEoCRIPCgdtaW5pbXVtGAUgASgFEg0KBXZhbHVlGAYgASgJ",
            "IqMCChpHZXREYXRhS2V5QmFja3VwVjNSZXNwb25zZRIVCg1kYXRhS2V5QmFj",
            "a3VwGAEgASgMEhkKEWRhdGFLZXlCYWNrdXBEYXRlGAIgASgDEhEKCXB1Ymxp",
            "Y0tleRgDIAEoDBIbChNlbmNyeXB0ZWRQcml2YXRlS2V5GAQgASgMEhEKCWNs",
            "aWVudEtleRgFIAEoDBIdChVlbmNyeXB0ZWRTZXNzaW9uVG9rZW4YBiABKAwS",
            "NAoNcGFzc3dvcmRSdWxlcxgHIAMoCzIdLkF1dGhlbnRpY2F0aW9uLlBhc3N3",
            "b3JkUnVsZXMSGgoScGFzc3dvcmRSdWxlc0ludHJvGAggASgJEh8KF21pbmlt",
            "dW1QYmtkZjJJdGVyYXRpb25zGAkgASgFKrkCChFTdXBwb3J0ZWRMYW5ndWFn",
            "ZRILCgdFTkdMSVNIEAASCgoGQVJBQklDEAESCwoHQlJJVElTSBACEgsKB0NI",
            "SU5FU0UQAxIVChFDSElORVNFX0hPTkdfS09ORxAEEhIKDkNISU5FU0VfVEFJ",
            "V0FOEAUSCQoFRFVUQ0gQBhIKCgZGUkVOQ0gQBxIKCgZHRVJNQU4QCBIJCgVH",
            "UkVFSxAJEgoKBkhFQlJFVxAKEgsKB0lUQUxJQU4QCxIMCghKQVBBTkVTRRAM",
            "EgoKBktPUkVBThANEgoKBlBPTElTSBAOEg4KClBPUlRVR1VFU0UQDxIVChFQ",
            "T1JUVUdVRVNFX0JSQVpJTBAQEgwKCFJPTUFOSUFOEBESCwoHUlVTU0lBThAS",
            "EgoKBlNMT1ZBSxATEgsKB1NQQU5JU0gQFCpFCglMb2dpblR5cGUSCgoGTk9S",
            "TUFMEAASBwoDU1NPEAESBwoDQklPEAISDQoJQUxURVJOQVRFEAMSCwoHT0ZG",
            "TElORRAEKnEKDERldmljZVN0YXR1cxIZChVERVZJQ0VfTkVFRFNfQVBQUk9W",
            "QUwQABINCglERVZJQ0VfT0sQARIbChdERVZJQ0VfRElTQUJMRURfQllfVVNF",
            "UhACEhoKFkRFVklDRV9MT0NLRURfQllfQURNSU4QAypBCg1MaWNlbnNlU3Rh",
            "dHVzEgkKBU9USEVSEAASCgoGQUNUSVZFEAESCwoHRVhQSVJFRBACEgwKCERJ",
            "U0FCTEVEEAMqNwoLQWNjb3VudFR5cGUSDAoIQ09OU1VNRVIQABIKCgZGQU1J",
            "TFkQARIOCgpFTlRFUlBSSVNFEAIqzAEKEFNlc3Npb25Ub2tlblR5cGUSEgoO",
            "Tk9fUkVTVFJJQ1RJT04QABIUChBBQ0NPVU5UX1JFQ09WRVJZEAESEQoNU0hB",
            "UkVfQUNDT1VOVBACEgwKCFBVUkNIQVNFEAMSDAoIUkVTVFJJQ1QQBBIRCg1B",
            "Q0NFUFRfSU5WSVRFEAUSEgoOU1VQUE9SVF9TRVJWRVIQBhIXChNFTlRFUlBS",
            "SVNFX0NSRUFUSU9OEAcSHwobRVhQSVJFRF9CVVRfQUxMT1dFRF9UT19TWU5D",
            "EAgqRwoHVmVyc2lvbhITCg9pbnZhbGlkX3ZlcnNpb24QABITCg9kZWZhdWx0",
            "X3ZlcnNpb24QARISCg5zZWNvbmRfdmVyc2lvbhACKjcKH01hc3RlclBhc3N3",
            "b3JkUmVlbnRyeUFjdGlvblR5cGUSCgoGVU5NQVNLEAASCAoEQ09QWRABKmwK",
            "C0xvZ2luTWV0aG9kEhcKE0lOVkFMSURfTE9HSU5NRVRIT0QQABIUChBFWElT",
            "VElOR19BQ0NPVU5UEAESDgoKU1NPX0RPTUFJThACEg0KCUFGVEVSX1NTTxAD",
            "Eg8KC05FV19BQ0NPVU5UEAQqxwMKCkxvZ2luU3RhdGUSFgoSSU5WQUxJRF9M",
            "T0dJTlNUQVRFEAASDgoKTE9HR0VEX09VVBABEhwKGERFVklDRV9BUFBST1ZB",
            "TF9SRVFVSVJFRBACEhEKDURFVklDRV9MT0NLRUQQAxISCg5BQ0NPVU5UX0xP",
            "Q0tFRBAEEhkKFURFVklDRV9BQ0NPVU5UX0xPQ0tFRBAFEgsKB1VQR1JBREUQ",
            "BhITCg9MSUNFTlNFX0VYUElSRUQQBxITCg9SRUdJT05fUkVESVJFQ1QQCBIW",
            "ChJSRURJUkVDVF9DTE9VRF9TU08QCRIXChNSRURJUkVDVF9PTlNJVEVfU1NP",
            "EAoSEAoMUkVRVUlSRVNfMkZBEAwSFgoSUkVRVUlSRVNfQVVUSF9IQVNIEA0S",
            "FQoRUkVRVUlSRVNfVVNFUk5BTUUQDhIZChVBRlRFUl9DTE9VRF9TU09fTE9H",
            "SU4QDxIdChlSRVFVSVJFU19BQ0NPVU5UX0NSRUFUSU9OEBASJgoiUkVRVUlS",
            "RVNfREVWSUNFX0VOQ1JZUFRFRF9EQVRBX0tFWRAREhcKE0xPR0lOX1RPS0VO",
            "X0VYUElSRUQQEhINCglMT0dHRURfSU4QYyprChRFbmNyeXB0ZWREYXRhS2V5",
            "VHlwZRIKCgZOT19LRVkQABIYChRCWV9ERVZJQ0VfUFVCTElDX0tFWRABEg8K",
            "C0JZX1BBU1NXT1JEEAISEAoMQllfQUxURVJOQVRFEAMSCgoGQllfQklPEAQq",
            "LQoOUGFzc3dvcmRNZXRob2QSCwoHRU5URVJFRBAAEg4KCkJJT01FVFJJQ1MQ",
            "ASq5AQoRVHdvRmFjdG9yUHVzaFR5cGUSFAoQVFdPX0ZBX1BVU0hfTk9ORRAA",
            "EhMKD1RXT19GQV9QVVNIX1NNUxABEhYKElRXT19GQV9QVVNIX0tFRVBFUhAC",
            "EhgKFFRXT19GQV9QVVNIX0RVT19QVVNIEAMSGAoUVFdPX0ZBX1BVU0hfRFVP",
            "X1RFWFQQBBIYChRUV09fRkFfUFVTSF9EVU9fQ0FMTBAFEhMKD1RXT19GQV9Q",
            "VVNIX0ROQRAGKsMBChJUd29GYWN0b3JWYWx1ZVR5cGUSFAoQVFdPX0ZBX0NP",
            "REVfTk9ORRAAEhQKEFRXT19GQV9DT0RFX1RPVFAQARITCg9UV09fRkFfQ09E",
            "RV9TTVMQAhITCg9UV09fRkFfQ09ERV9EVU8QAxITCg9UV09fRkFfQ09ERV9S",
            "U0EQBBITCg9UV09fRkFfUkVTUF9VMkYQBRIYChRUV09fRkFfUkVTUF9XRUJB",
            "VVRIThAGEhMKD1RXT19GQV9DT0RFX0ROQRAHKuEBChRUd29GYWN0b3JDaGFu",
            "bmVsVHlwZRISCg5UV09fRkFfQ1RfTk9ORRAAEhIKDlRXT19GQV9DVF9UT1RQ",
            "EAESEQoNVFdPX0ZBX0NUX1NNUxACEhEKDVRXT19GQV9DVF9EVU8QAxIRCg1U",
            "V09fRkFfQ1RfUlNBEAQSFAoQVFdPX0ZBX0NUX0JBQ0tVUBAFEhEKDVRXT19G",
            "QV9DVF9VMkYQBhIWChJUV09fRkFfQ1RfV0VCQVVUSE4QBxIUChBUV09fRkFf",
            "Q1RfS0VFUEVSEAgSEQoNVFdPX0ZBX0NUX0ROQRAJKqsBChNUd29GYWN0b3JF",
            "eHBpcmF0aW9uEhoKFlRXT19GQV9FWFBfSU1NRURJQVRFTFkQABIYChRUV09f",
            "RkFfRVhQXzVfTUlOVVRFUxABEhcKE1RXT19GQV9FWFBfMTJfSE9VUlMQAhIX",
            "ChNUV09fRkFfRVhQXzI0X0hPVVJTEAMSFgoSVFdPX0ZBX0VYUF8zMF9EQVlT",
            "EAQSFAoQVFdPX0ZBX0VYUF9ORVZFUhAFKkAKC0xpY2Vuc2VUeXBlEgkKBVZB",
            "VUxUEAASCAoEQ0hBVBABEgsKB1NUT1JBR0UQAhIPCgtCUkVBQ0hXQVRDSBAD",
            "KmkKC09iamVjdFR5cGVzEgoKBlJFQ09SRBAAEhYKElNIQVJFRF9GT0xERVJf",
            "VVNFUhABEhYKElNIQVJFRF9GT0xERVJfVEVBTRACEg8KC1VTRVJfRk9MREVS",
            "EAMSDQoJVEVBTV9VU0VSEAQqYAobQWx0ZXJuYXRlQXV0aGVudGljYXRpb25U",
            "eXBlEh0KGUFMVEVSTkFURV9NQVNURVJfUEFTU1dPUkQQABINCglCSU9NRVRS",
            "SUMQARITCg9BQ0NPVU5UX1JFQ09WRVIQAiqaAgoMVGhyb3R0bGVUeXBlEhsK",
            "F1BBU1NXT1JEX1JFVFJZX1RIUk9UVExFEAASIgoeUEFTU1dPUkRfUkVUUllf",
            "TEVHQUNZX1RIUk9UVExFEAESEwoPVFdPX0ZBX1RIUk9UVExFEAISGgoWVFdP",
            "X0ZBX0xFR0FDWV9USFJPVFRMRRADEhUKEVFBX1JFVFJZX1RIUk9UVExFEAQS",
            "HAoYQUNDT1VOVF9SRUNPVkVSX1RIUk9UVExFEAUSLgoqVkFMSURBVEVfREVW",
            "SUNFX1ZFUklGSUNBVElPTl9DT0RFX1RIUk9UVExFEAYSMwovVkFMSURBVEVf",
            "Q1JFQVRFX1VTRVJfVkVSSUZJQ0FUSU9OX0NPREVfVEhST1RUTEUQB0IqChhj",
            "b20ua2VlcGVyc2VjdXJpdHkucHJvdG9CDkF1dGhlbnRpY2F0aW9uYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Enterprise.EnterpriseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Authentication.SupportedLanguage), typeof(global::Authentication.LoginType), typeof(global::Authentication.DeviceStatus), typeof(global::Authentication.LicenseStatus), typeof(global::Authentication.AccountType), typeof(global::Authentication.SessionTokenType), typeof(global::Authentication.Version), typeof(global::Authentication.MasterPasswordReentryActionType), typeof(global::Authentication.LoginMethod), typeof(global::Authentication.LoginState), typeof(global::Authentication.EncryptedDataKeyType), typeof(global::Authentication.PasswordMethod), typeof(global::Authentication.TwoFactorPushType), typeof(global::Authentication.TwoFactorValueType), typeof(global::Authentication.TwoFactorChannelType), typeof(global::Authentication.TwoFactorExpiration), typeof(global::Authentication.LicenseType), typeof(global::Authentication.ObjectTypes), typeof(global::Authentication.AlternateAuthenticationType), typeof(global::Authentication.ThrottleType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ApiRequest), global::Authentication.ApiRequest.Parser, new[]{ "EncryptedTransmissionKey", "PublicKeyId", "Locale", "EncryptedPayload", "EncryptionType", "Recaptcha", "SubEnvironment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ApiRequestPayload), global::Authentication.ApiRequestPayload.Parser, new[]{ "Payload", "EncryptedSessionToken", "TimeToken", "ApiVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.Transform), global::Authentication.Transform.Parser, new[]{ "Key", "EncryptedDeviceToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceRequest), global::Authentication.DeviceRequest.Parser, new[]{ "ClientVersion", "DeviceName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.AuthRequest), global::Authentication.AuthRequest.Parser, new[]{ "ClientVersion", "Username", "EncryptedDeviceToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.NewUserMinimumParams), global::Authentication.NewUserMinimumParams.Parser, new[]{ "MinimumIterations", "PasswordMatchRegex", "PasswordMatchDescription", "IsEnterpriseDomain" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.PreLoginRequest), global::Authentication.PreLoginRequest.Parser, new[]{ "AuthRequest", "LoginType", "TwoFactorToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.LoginRequest), global::Authentication.LoginRequest.Parser, new[]{ "AuthRequest", "LoginType", "AuthenticationHashPrime", "EncryptedLoginToken", "AuthResponse", "McEnterpriseId", "PushToken", "Platform" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceResponse), global::Authentication.DeviceResponse.Parser, new[]{ "EncryptedDeviceToken", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.Salt), global::Authentication.Salt.Parser, new[]{ "Iterations", "Salt_", "Algorithm", "Uid", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.TwoFactorChannel), global::Authentication.TwoFactorChannel.Parser, new[]{ "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.StartLoginRequest), global::Authentication.StartLoginRequest.Parser, new[]{ "EncryptedDeviceToken", "Username", "ClientVersion", "MessageSessionUid", "EncryptedLoginToken", "LoginType", "McEnterpriseId", "LoginMethod", "ForceNewLogin", "CloneCode", "V2TwoFactorToken", "AccountUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.LoginResponse), global::Authentication.LoginResponse.Parser, new[]{ "LoginState", "AccountUid", "PrimaryUsername", "EncryptedDataKey", "EncryptedDataKeyType", "EncryptedLoginToken", "EncryptedSessionToken", "SessionTokenType", "Message", "Url", "Channels", "Salt", "CloneCode", "StateSpecificValue", "SsoClientVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SsoUserInfo), global::Authentication.SsoUserInfo.Parser, new[]{ "CompanyName", "SamlRequest", "SamlRequestType", "SsoDomainName", "LoginUrl", "LogoutUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.PreLoginResponse), global::Authentication.PreLoginResponse.Parser, new[]{ "DeviceStatus", "Salt", "OBSOLETEFIELD", "SsoUserInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.LoginToMcRequest), global::Authentication.LoginToMcRequest.Parser, new[]{ "McEnterpriseId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.LoginToMcResponse), global::Authentication.LoginToMcResponse.Parser, new[]{ "EncryptedSessionToken", "EncryptedTreeKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.LoginAsUserRequest), global::Authentication.LoginAsUserRequest.Parser, new[]{ "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.LoginAsUserResponse), global::Authentication.LoginAsUserResponse.Parser, new[]{ "EncryptedSessionToken", "EncryptedSharedAccountKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ValidateAuthHashRequest), global::Authentication.ValidateAuthHashRequest.Parser, new[]{ "PasswordMethod", "AuthResponse", "EncryptedLoginToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.TwoFactorChannelInfo), global::Authentication.TwoFactorChannelInfo.Parser, new[]{ "ChannelType", "ChannelUid", "ChannelName", "Challenge", "Capabilities", "PhoneNumber", "MaxExpiration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.TwoFactorValidateRequest), global::Authentication.TwoFactorValidateRequest.Parser, new[]{ "EncryptedLoginToken", "ValueType", "Value", "ChannelUid", "ExpireIn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.TwoFactorValidateResponse), global::Authentication.TwoFactorValidateResponse.Parser, new[]{ "EncryptedLoginToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.TwoFactorSendPushRequest), global::Authentication.TwoFactorSendPushRequest.Parser, new[]{ "EncryptedLoginToken", "PushType", "ChannelUid", "ExpireIn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.License), global::Authentication.License.Parser, new[]{ "Created", "Expiration", "LicenseStatus", "Paid", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.OwnerlessRecord), global::Authentication.OwnerlessRecord.Parser, new[]{ "RecordUid", "RecordKey", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.OwnerlessRecords), global::Authentication.OwnerlessRecords.Parser, new[]{ "OwnerlessRecord" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.UserAuthRequest), global::Authentication.UserAuthRequest.Parser, new[]{ "Uid", "Salt", "Iterations", "EncryptedClientKey", "AuthHash", "EncryptedDataKey", "LoginType", "Name", "Algorithm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.UidRequest), global::Authentication.UidRequest.Parser, new[]{ "Uid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceUpdateRequest), global::Authentication.DeviceUpdateRequest.Parser, new[]{ "EncryptedDeviceToken", "ClientVersion", "DeviceName", "DevicePublicKey", "DeviceStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.RegisterDeviceInRegionRequest), global::Authentication.RegisterDeviceInRegionRequest.Parser, new[]{ "EncryptedDeviceToken", "ClientVersion", "DeviceName", "DevicePublicKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.RegistrationRequest), global::Authentication.RegistrationRequest.Parser, new[]{ "AuthRequest", "UserAuthRequest", "EncryptedClientKey", "EncryptedPrivateKey", "PublicKey", "VerificationCode", "DeprecatedAuthHashHash", "DeprecatedEncryptedClientKey", "DeprecatedEncryptedPrivateKey", "DeprecatedEncryptionParams" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ConvertUserToV3Request), global::Authentication.ConvertUserToV3Request.Parser, new[]{ "AuthRequest", "UserAuthRequest", "EncryptedClientKey", "EncryptedPrivateKey", "PublicKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.RevisionResponse), global::Authentication.RevisionResponse.Parser, new[]{ "Revision" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ChangeEmailRequest), global::Authentication.ChangeEmailRequest.Parser, new[]{ "NewEmail" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ChangeEmailResponse), global::Authentication.ChangeEmailResponse.Parser, new[]{ "EncryptedChangeEmailToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.EmailVerificationLinkResponse), global::Authentication.EmailVerificationLinkResponse.Parser, new[]{ "EmailVerified" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SecurityData), global::Authentication.SecurityData.Parser, new[]{ "Uid", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SecurityDataRequest), global::Authentication.SecurityDataRequest.Parser, new[]{ "RecordSecurityData", "MasterPasswordSecurityData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SecurityReportIncrementalData), global::Authentication.SecurityReportIncrementalData.Parser, new[]{ "EnterpriseUserId", "CurrentSecurityData", "CurrentSecurityDataRevision", "OldSecurityData", "OldSecurityDataRevision" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SecurityReport), global::Authentication.SecurityReport.Parser, new[]{ "EnterpriseUserId", "EncryptedReportData", "Revision", "TwoFactor", "LastLogin", "NumberOfReusedPassword", "SecurityReportIncrementalData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SecurityReportSaveRequest), global::Authentication.SecurityReportSaveRequest.Parser, new[]{ "SecurityReport" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SecurityReportRequest), global::Authentication.SecurityReportRequest.Parser, new[]{ "FromPage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SecurityReportResponse), global::Authentication.SecurityReportResponse.Parser, new[]{ "EnterprisePrivateKey", "SecurityReport", "AsOfRevision", "FromPage", "ToPage", "Complete" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ReusedPasswordsRequest), global::Authentication.ReusedPasswordsRequest.Parser, new[]{ "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SummaryConsoleReport), global::Authentication.SummaryConsoleReport.Parser, new[]{ "ReportType", "ReportData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ChangeToKeyTypeOne), global::Authentication.ChangeToKeyTypeOne.Parser, new[]{ "ObjectType", "PrimaryUid", "SecondaryUid", "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ChangeToKeyTypeOneRequest), global::Authentication.ChangeToKeyTypeOneRequest.Parser, new[]{ "ChangeToKeyTypeOne" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ChangeToKeyTypeOneStatus), global::Authentication.ChangeToKeyTypeOneStatus.Parser, new[]{ "Uid", "Type", "Status", "Reason" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ChangeToKeyTypeOneResponse), global::Authentication.ChangeToKeyTypeOneResponse.Parser, new[]{ "ChangeToKeyTypeOneStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SetKey), global::Authentication.SetKey.Parser, new[]{ "Id", "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SetKeyRequest), global::Authentication.SetKeyRequest.Parser, new[]{ "Keys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.CreateUserRequest), global::Authentication.CreateUserRequest.Parser, new[]{ "Username", "AuthVerifier", "EncryptionParams", "RsaPublicKey", "RsaEncryptedPrivateKey", "EccPublicKey", "EccEncryptedPrivateKey", "EncryptedDeviceToken", "EncryptedClientKey", "ClientVersion", "EncryptedDeviceDataKey", "EncryptedLoginToken", "MessageSessionUid", "InstallReferrer", "MccMNC", "Mfg", "Model", "Brand", "Product", "Device", "Carrier", "VerificationCode", "EnterpriseRegistration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.NodeEnforcementAddOrUpdateRequest), global::Authentication.NodeEnforcementAddOrUpdateRequest.Parser, new[]{ "NodeId", "Enforcement", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.NodeEnforcementRemoveRequest), global::Authentication.NodeEnforcementRemoveRequest.Parser, new[]{ "NodeId", "Enforcement" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.UserAccounts), global::Authentication.UserAccounts.Parser, new[]{ "AccountUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ApiRequestByKey), global::Authentication.ApiRequestByKey.Parser, new[]{ "KeyId", "Payload", "Username", "Locale", "SupportedLanguage", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.MemcacheRequest), global::Authentication.MemcacheRequest.Parser, new[]{ "Key", "UserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.MemcacheResponse), global::Authentication.MemcacheResponse.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.MasterPasswordReentryRequest), global::Authentication.MasterPasswordReentryRequest.Parser, new[]{ "Pbkdf2Password", "Action" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceRegistrationRequest), global::Authentication.DeviceRegistrationRequest.Parser, new[]{ "ClientVersion", "DeviceName", "DevicePublicKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceVerificationRequest), global::Authentication.DeviceVerificationRequest.Parser, new[]{ "EncryptedDeviceToken", "Username", "VerificationChannel", "MessageSessionUid", "ClientVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceVerificationResponse), global::Authentication.DeviceVerificationResponse.Parser, new[]{ "EncryptedDeviceToken", "Username", "MessageSessionUid", "ClientVersion", "DeviceStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceApprovalRequest), global::Authentication.DeviceApprovalRequest.Parser, new[]{ "Email", "TwoFactorChannel", "ClientVersion", "Locale", "EncryptedDeviceToken", "TotpCode", "DeviceIp", "DeviceTokenExpireDays" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceApprovalResponse), global::Authentication.DeviceApprovalResponse.Parser, new[]{ "EncryptedTwoFactorToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ApproveDeviceRequest), global::Authentication.ApproveDeviceRequest.Parser, new[]{ "EncryptedDeviceToken", "EncryptedDeviceDataKey", "DenyApproval", "LinkDevice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.EnterpriseUserAliasRequest), global::Authentication.EnterpriseUserAliasRequest.Parser, new[]{ "EnterpriseUserId", "Alias" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.Device), global::Authentication.Device.Parser, new[]{ "EncryptedDeviceToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.RegisterDeviceDataKeyRequest), global::Authentication.RegisterDeviceDataKeyRequest.Parser, new[]{ "EncryptedDeviceToken", "EncryptedDeviceDataKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ValidateCreateUserVerificationCodeRequest), global::Authentication.ValidateCreateUserVerificationCodeRequest.Parser, new[]{ "Username", "ClientVersion", "VerificationCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ValidateDeviceVerificationCodeRequest), global::Authentication.ValidateDeviceVerificationCodeRequest.Parser, new[]{ "Username", "ClientVersion", "VerificationCode", "MessageSessionUid", "EncryptedDeviceToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SendSessionMessageRequest), global::Authentication.SendSessionMessageRequest.Parser, new[]{ "MessageSessionUid", "Command", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.GlobalUserAccount), global::Authentication.GlobalUserAccount.Parser, new[]{ "Username", "AccountUid", "RegionName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.AccountUsername), global::Authentication.AccountUsername.Parser, new[]{ "Username", "DateActive" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SsoServiceProviderRequest), global::Authentication.SsoServiceProviderRequest.Parser, new[]{ "Name", "ClientVersion", "Locale" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.SsoServiceProviderResponse), global::Authentication.SsoServiceProviderResponse.Parser, new[]{ "Name", "SpUrl", "IsCloud", "ClientVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.UserSettingRequest), global::Authentication.UserSettingRequest.Parser, new[]{ "Setting", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.ThrottleState), global::Authentication.ThrottleState.Parser, new[]{ "Type", "Key", "Value", "State" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.DeviceInformation), global::Authentication.DeviceInformation.Parser, new[]{ "DeviceId", "DeviceName", "ClientVersion", "LastLogin", "DeviceStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.UserSetting), global::Authentication.UserSetting.Parser, new[]{ "Name", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.UserDataKeyRequest), global::Authentication.UserDataKeyRequest.Parser, new[]{ "EnterpriseUserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.EnterpriseUserIdDataKeyPair), global::Authentication.EnterpriseUserIdDataKeyPair.Parser, new[]{ "EnterpriseUserId", "EncryptedDataKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.UserDataKey), global::Authentication.UserDataKey.Parser, new[]{ "RoleId", "RoleKey", "PrivateKey", "EnterpriseUserIdDataKeyPairs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.UserDataKeyResponse), global::Authentication.UserDataKeyResponse.Parser, new[]{ "UserDataKeys", "AccessDenied", "NoEncryptedDataKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.MasterPasswordRecoveryVerificationRequest), global::Authentication.MasterPasswordRecoveryVerificationRequest.Parser, new[]{ "EncryptedLoginToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.GetSecurityQuestionV3Request), global::Authentication.GetSecurityQuestionV3Request.Parser, new[]{ "EncryptedLoginToken", "VerificationCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.GetSecurityQuestionV3Response), global::Authentication.GetSecurityQuestionV3Response.Parser, new[]{ "SecurityQuestion", "BackupKeyDate", "Salt", "Iterations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.GetDataKeyBackupV3Request), global::Authentication.GetDataKeyBackupV3Request.Parser, new[]{ "EncryptedLoginToken", "VerificationCode", "SecurityAnswerHash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.PasswordRules), global::Authentication.PasswordRules.Parser, new[]{ "RuleType", "Match", "Pattern", "Description", "Minimum", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.GetDataKeyBackupV3Response), global::Authentication.GetDataKeyBackupV3Response.Parser, new[]{ "DataKeyBackup", "DataKeyBackupDate", "PublicKey", "EncryptedPrivateKey", "ClientKey", "EncryptedSessionToken", "PasswordRules", "PasswordRulesIntro", "MinimumPbkdf2Iterations" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SupportedLanguage {
    [pbr::OriginalName("ENGLISH")] English = 0,
    [pbr::OriginalName("ARABIC")] Arabic = 1,
    [pbr::OriginalName("BRITISH")] British = 2,
    [pbr::OriginalName("CHINESE")] Chinese = 3,
    [pbr::OriginalName("CHINESE_HONG_KONG")] ChineseHongKong = 4,
    [pbr::OriginalName("CHINESE_TAIWAN")] ChineseTaiwan = 5,
    [pbr::OriginalName("DUTCH")] Dutch = 6,
    [pbr::OriginalName("FRENCH")] French = 7,
    [pbr::OriginalName("GERMAN")] German = 8,
    [pbr::OriginalName("GREEK")] Greek = 9,
    [pbr::OriginalName("HEBREW")] Hebrew = 10,
    [pbr::OriginalName("ITALIAN")] Italian = 11,
    [pbr::OriginalName("JAPANESE")] Japanese = 12,
    [pbr::OriginalName("KOREAN")] Korean = 13,
    [pbr::OriginalName("POLISH")] Polish = 14,
    [pbr::OriginalName("PORTUGUESE")] Portuguese = 15,
    [pbr::OriginalName("PORTUGUESE_BRAZIL")] PortugueseBrazil = 16,
    [pbr::OriginalName("ROMANIAN")] Romanian = 17,
    [pbr::OriginalName("RUSSIAN")] Russian = 18,
    [pbr::OriginalName("SLOVAK")] Slovak = 19,
    [pbr::OriginalName("SPANISH")] Spanish = 20,
  }

  public enum LoginType {
    [pbr::OriginalName("NORMAL")] Normal = 0,
    [pbr::OriginalName("SSO")] Sso = 1,
    [pbr::OriginalName("BIO")] Bio = 2,
    [pbr::OriginalName("ALTERNATE")] Alternate = 3,
    [pbr::OriginalName("OFFLINE")] Offline = 4,
  }

  public enum DeviceStatus {
    [pbr::OriginalName("DEVICE_NEEDS_APPROVAL")] DeviceNeedsApproval = 0,
    [pbr::OriginalName("DEVICE_OK")] DeviceOk = 1,
    [pbr::OriginalName("DEVICE_DISABLED_BY_USER")] DeviceDisabledByUser = 2,
    [pbr::OriginalName("DEVICE_LOCKED_BY_ADMIN")] DeviceLockedByAdmin = 3,
  }

  public enum LicenseStatus {
    /// <summary>
    /// trial for bw
    /// </summary>
    [pbr::OriginalName("OTHER")] Other = 0,
    [pbr::OriginalName("ACTIVE")] Active = 1,
    [pbr::OriginalName("EXPIRED")] Expired = 2,
    [pbr::OriginalName("DISABLED")] Disabled = 3,
  }

  public enum AccountType {
    [pbr::OriginalName("CONSUMER")] Consumer = 0,
    [pbr::OriginalName("FAMILY")] Family = 1,
    [pbr::OriginalName("ENTERPRISE")] Enterprise = 2,
  }

  public enum SessionTokenType {
    /// <summary>
    /// can do everything
    /// </summary>
    [pbr::OriginalName("NO_RESTRICTION")] NoRestriction = 0,
    /// <summary>
    /// can only change password
    /// </summary>
    [pbr::OriginalName("ACCOUNT_RECOVERY")] AccountRecovery = 1,
    /// <summary>
    /// must first agree to share their account
    /// </summary>
    [pbr::OriginalName("SHARE_ACCOUNT")] ShareAccount = 2,
    /// <summary>
    /// can only get sku's for purchase
    /// </summary>
    [pbr::OriginalName("PURCHASE")] Purchase = 3,
    /// <summary>
    /// This is for a session token where the account is expired, but can still log in
    /// </summary>
    [pbr::OriginalName("RESTRICT")] Restrict = 4,
    /// <summary>
    /// can only accept the enterprise invite
    /// </summary>
    [pbr::OriginalName("ACCEPT_INVITE")] AcceptInvite = 5,
    /// <summary>
    /// from BI (Token object is created manually in Chat Server after decrypting BI's json token)
    /// </summary>
    [pbr::OriginalName("SUPPORT_SERVER")] SupportServer = 6,
    /// <summary>
    /// user has tried to log into the console but no enterprise exists
    /// </summary>
    [pbr::OriginalName("ENTERPRISE_CREATION")] EnterpriseCreation = 7,
    /// <summary>
    /// for webapp
    /// </summary>
    [pbr::OriginalName("EXPIRED_BUT_ALLOWED_TO_SYNC")] ExpiredButAllowedToSync = 8,
  }

  public enum Version {
    /// <summary>
    ///protobuf enum has to start with 0.
    /// </summary>
    [pbr::OriginalName("invalid_version")] InvalidVersion = 0,
    [pbr::OriginalName("default_version")] DefaultVersion = 1,
    [pbr::OriginalName("second_version")] SecondVersion = 2,
  }

  public enum MasterPasswordReentryActionType {
    [pbr::OriginalName("UNMASK")] Unmask = 0,
    [pbr::OriginalName("COPY")] Copy = 1,
  }

  /// <summary>
  ///loginMethod is one of ( existing_account, sso_domain, after_sso )
  /// </summary>
  public enum LoginMethod {
    [pbr::OriginalName("INVALID_LOGINMETHOD")] InvalidLoginmethod = 0,
    [pbr::OriginalName("EXISTING_ACCOUNT")] ExistingAccount = 1,
    [pbr::OriginalName("SSO_DOMAIN")] SsoDomain = 2,
    [pbr::OriginalName("AFTER_SSO")] AfterSso = 3,
    [pbr::OriginalName("NEW_ACCOUNT")] NewAccount = 4,
  }

  public enum LoginState {
    /// <summary>
    /// something is wrong, should never be in this state
    /// </summary>
    [pbr::OriginalName("INVALID_LOGINSTATE")] InvalidLoginstate = 0,
    /// <summary>
    /// the client has been logged out
    /// </summary>
    [pbr::OriginalName("LOGGED_OUT")] LoggedOut = 1,
    /// <summary>
    /// device needs to be approved to use for this user
    /// </summary>
    [pbr::OriginalName("DEVICE_APPROVAL_REQUIRED")] DeviceApprovalRequired = 2,
    /// <summary>
    /// the device is locked for all accounts
    /// </summary>
    [pbr::OriginalName("DEVICE_LOCKED")] DeviceLocked = 3,
    /// <summary>
    /// the account is locked
    /// </summary>
    [pbr::OriginalName("ACCOUNT_LOCKED")] AccountLocked = 4,
    /// <summary>
    /// the account on this device is locked
    /// </summary>
    [pbr::OriginalName("DEVICE_ACCOUNT_LOCKED")] DeviceAccountLocked = 5,
    /// <summary>
    /// client version is disallowed
    /// </summary>
    [pbr::OriginalName("UPGRADE")] Upgrade = 6,
    /// <summary>
    /// enterprise account cannot log in
    /// </summary>
    [pbr::OriginalName("LICENSE_EXPIRED")] LicenseExpired = 7,
    /// <summary>
    /// account is in a different region, device should know that already
    /// </summary>
    [pbr::OriginalName("REGION_REDIRECT")] RegionRedirect = 8,
    [pbr::OriginalName("REDIRECT_CLOUD_SSO")] RedirectCloudSso = 9,
    [pbr::OriginalName("REDIRECT_ONSITE_SSO")] RedirectOnsiteSso = 10,
    /// <summary>
    /// 2fa needs satisfying
    /// </summary>
    [pbr::OriginalName("REQUIRES_2FA")] Requires2Fa = 12,
    /// <summary>
    /// the device is 2fa's and now we need the auth hash
    /// </summary>
    [pbr::OriginalName("REQUIRES_AUTH_HASH")] RequiresAuthHash = 13,
    /// <summary>
    /// no username is supplied and we need one to continue
    /// </summary>
    [pbr::OriginalName("REQUIRES_USERNAME")] RequiresUsername = 14,
    /// <summary>
    /// returned from saml/sso/finish_login
    /// </summary>
    [pbr::OriginalName("AFTER_CLOUD_SSO_LOGIN")] AfterCloudSsoLogin = 15,
    /// <summary>
    /// for a cloud sso user that doesn't yet exist
    /// </summary>
    [pbr::OriginalName("REQUIRES_ACCOUNT_CREATION")] RequiresAccountCreation = 16,
    /// <summary>
    /// device needs approval with a dedk
    /// </summary>
    [pbr::OriginalName("REQUIRES_DEVICE_ENCRYPTED_DATA_KEY")] RequiresDeviceEncryptedDataKey = 17,
    /// <summary>
    /// a login token is not valid forever, if you get this, start over
    /// </summary>
    [pbr::OriginalName("LOGIN_TOKEN_EXPIRED")] LoginTokenExpired = 18,
    [pbr::OriginalName("LOGGED_IN")] LoggedIn = 99,
  }

  public enum EncryptedDataKeyType {
    [pbr::OriginalName("NO_KEY")] NoKey = 0,
    [pbr::OriginalName("BY_DEVICE_PUBLIC_KEY")] ByDevicePublicKey = 1,
    [pbr::OriginalName("BY_PASSWORD")] ByPassword = 2,
    [pbr::OriginalName("BY_ALTERNATE")] ByAlternate = 3,
    [pbr::OriginalName("BY_BIO")] ByBio = 4,
  }

  public enum PasswordMethod {
    [pbr::OriginalName("ENTERED")] Entered = 0,
    [pbr::OriginalName("BIOMETRICS")] Biometrics = 1,
  }

  /// <summary>
  /// v3 and forward
  /// </summary>
  public enum TwoFactorPushType {
    [pbr::OriginalName("TWO_FA_PUSH_NONE")] TwoFaPushNone = 0,
    [pbr::OriginalName("TWO_FA_PUSH_SMS")] TwoFaPushSms = 1,
    [pbr::OriginalName("TWO_FA_PUSH_KEEPER")] TwoFaPushKeeper = 2,
    [pbr::OriginalName("TWO_FA_PUSH_DUO_PUSH")] TwoFaPushDuoPush = 3,
    [pbr::OriginalName("TWO_FA_PUSH_DUO_TEXT")] TwoFaPushDuoText = 4,
    [pbr::OriginalName("TWO_FA_PUSH_DUO_CALL")] TwoFaPushDuoCall = 5,
    [pbr::OriginalName("TWO_FA_PUSH_DNA")] TwoFaPushDna = 6,
  }

  public enum TwoFactorValueType {
    [pbr::OriginalName("TWO_FA_CODE_NONE")] TwoFaCodeNone = 0,
    /// <summary>
    /// Google authenticator etc.
    /// </summary>
    [pbr::OriginalName("TWO_FA_CODE_TOTP")] TwoFaCodeTotp = 1,
    [pbr::OriginalName("TWO_FA_CODE_SMS")] TwoFaCodeSms = 2,
    [pbr::OriginalName("TWO_FA_CODE_DUO")] TwoFaCodeDuo = 3,
    [pbr::OriginalName("TWO_FA_CODE_RSA")] TwoFaCodeRsa = 4,
    [pbr::OriginalName("TWO_FA_RESP_U2F")] TwoFaRespU2F = 5,
    [pbr::OriginalName("TWO_FA_RESP_WEBAUTHN")] TwoFaRespWebauthn = 6,
    [pbr::OriginalName("TWO_FA_CODE_DNA")] TwoFaCodeDna = 7,
  }

  public enum TwoFactorChannelType {
    [pbr::OriginalName("TWO_FA_CT_NONE")] TwoFaCtNone = 0,
    [pbr::OriginalName("TWO_FA_CT_TOTP")] TwoFaCtTotp = 1,
    [pbr::OriginalName("TWO_FA_CT_SMS")] TwoFaCtSms = 2,
    [pbr::OriginalName("TWO_FA_CT_DUO")] TwoFaCtDuo = 3,
    [pbr::OriginalName("TWO_FA_CT_RSA")] TwoFaCtRsa = 4,
    [pbr::OriginalName("TWO_FA_CT_BACKUP")] TwoFaCtBackup = 5,
    [pbr::OriginalName("TWO_FA_CT_U2F")] TwoFaCtU2F = 6,
    [pbr::OriginalName("TWO_FA_CT_WEBAUTHN")] TwoFaCtWebauthn = 7,
    [pbr::OriginalName("TWO_FA_CT_KEEPER")] TwoFaCtKeeper = 8,
    [pbr::OriginalName("TWO_FA_CT_DNA")] TwoFaCtDna = 9,
  }

  public enum TwoFactorExpiration {
    [pbr::OriginalName("TWO_FA_EXP_IMMEDIATELY")] TwoFaExpImmediately = 0,
    [pbr::OriginalName("TWO_FA_EXP_5_MINUTES")] TwoFaExp5Minutes = 1,
    [pbr::OriginalName("TWO_FA_EXP_12_HOURS")] TwoFaExp12Hours = 2,
    [pbr::OriginalName("TWO_FA_EXP_24_HOURS")] TwoFaExp24Hours = 3,
    [pbr::OriginalName("TWO_FA_EXP_30_DAYS")] TwoFaExp30Days = 4,
    [pbr::OriginalName("TWO_FA_EXP_NEVER")] TwoFaExpNever = 5,
  }

  public enum LicenseType {
    [pbr::OriginalName("VAULT")] Vault = 0,
    [pbr::OriginalName("CHAT")] Chat = 1,
    [pbr::OriginalName("STORAGE")] Storage = 2,
    [pbr::OriginalName("BREACHWATCH")] Breachwatch = 3,
  }

  public enum ObjectTypes {
    [pbr::OriginalName("RECORD")] Record = 0,
    [pbr::OriginalName("SHARED_FOLDER_USER")] SharedFolderUser = 1,
    [pbr::OriginalName("SHARED_FOLDER_TEAM")] SharedFolderTeam = 2,
    [pbr::OriginalName("USER_FOLDER")] UserFolder = 3,
    [pbr::OriginalName("TEAM_USER")] TeamUser = 4,
  }

  public enum AlternateAuthenticationType {
    [pbr::OriginalName("ALTERNATE_MASTER_PASSWORD")] AlternateMasterPassword = 0,
    [pbr::OriginalName("BIOMETRIC")] Biometric = 1,
    [pbr::OriginalName("ACCOUNT_RECOVER")] AccountRecover = 2,
  }

  public enum ThrottleType {
    [pbr::OriginalName("PASSWORD_RETRY_THROTTLE")] PasswordRetryThrottle = 0,
    [pbr::OriginalName("PASSWORD_RETRY_LEGACY_THROTTLE")] PasswordRetryLegacyThrottle = 1,
    [pbr::OriginalName("TWO_FA_THROTTLE")] TwoFaThrottle = 2,
    [pbr::OriginalName("TWO_FA_LEGACY_THROTTLE")] TwoFaLegacyThrottle = 3,
    [pbr::OriginalName("QA_RETRY_THROTTLE")] QaRetryThrottle = 4,
    [pbr::OriginalName("ACCOUNT_RECOVER_THROTTLE")] AccountRecoverThrottle = 5,
    [pbr::OriginalName("VALIDATE_DEVICE_VERIFICATION_CODE_THROTTLE")] ValidateDeviceVerificationCodeThrottle = 6,
    [pbr::OriginalName("VALIDATE_CREATE_USER_VERIFICATION_CODE_THROTTLE")] ValidateCreateUserVerificationCodeThrottle = 7,
  }

  #endregion

  #region Messages
  public sealed partial class ApiRequest : pb::IMessage<ApiRequest> {
    private static readonly pb::MessageParser<ApiRequest> _parser = new pb::MessageParser<ApiRequest>(() => new ApiRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequest(ApiRequest other) : this() {
      encryptedTransmissionKey_ = other.encryptedTransmissionKey_;
      publicKeyId_ = other.publicKeyId_;
      locale_ = other.locale_;
      encryptedPayload_ = other.encryptedPayload_;
      encryptionType_ = other.encryptionType_;
      recaptcha_ = other.recaptcha_;
      subEnvironment_ = other.subEnvironment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequest Clone() {
      return new ApiRequest(this);
    }

    /// <summary>Field number for the "encryptedTransmissionKey" field.</summary>
    public const int EncryptedTransmissionKeyFieldNumber = 1;
    private pb::ByteString encryptedTransmissionKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedTransmissionKey {
      get { return encryptedTransmissionKey_; }
      set {
        encryptedTransmissionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicKeyId" field.</summary>
    public const int PublicKeyIdFieldNumber = 2;
    private int publicKeyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicKeyId {
      get { return publicKeyId_; }
      set {
        publicKeyId_ = value;
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 3;
    private string locale_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedPayload" field.</summary>
    public const int EncryptedPayloadFieldNumber = 4;
    private pb::ByteString encryptedPayload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedPayload {
      get { return encryptedPayload_; }
      set {
        encryptedPayload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptionType" field.</summary>
    public const int EncryptionTypeFieldNumber = 5;
    private int encryptionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncryptionType {
      get { return encryptionType_; }
      set {
        encryptionType_ = value;
      }
    }

    /// <summary>Field number for the "recaptcha" field.</summary>
    public const int RecaptchaFieldNumber = 6;
    private string recaptcha_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Recaptcha {
      get { return recaptcha_; }
      set {
        recaptcha_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subEnvironment" field.</summary>
    public const int SubEnvironmentFieldNumber = 7;
    private string subEnvironment_ = "";
    /// <summary>
    ///possible values are 'beta', 'v2', etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubEnvironment {
      get { return subEnvironment_; }
      set {
        subEnvironment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedTransmissionKey != other.EncryptedTransmissionKey) return false;
      if (PublicKeyId != other.PublicKeyId) return false;
      if (Locale != other.Locale) return false;
      if (EncryptedPayload != other.EncryptedPayload) return false;
      if (EncryptionType != other.EncryptionType) return false;
      if (Recaptcha != other.Recaptcha) return false;
      if (SubEnvironment != other.SubEnvironment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedTransmissionKey.Length != 0) hash ^= EncryptedTransmissionKey.GetHashCode();
      if (PublicKeyId != 0) hash ^= PublicKeyId.GetHashCode();
      if (Locale.Length != 0) hash ^= Locale.GetHashCode();
      if (EncryptedPayload.Length != 0) hash ^= EncryptedPayload.GetHashCode();
      if (EncryptionType != 0) hash ^= EncryptionType.GetHashCode();
      if (Recaptcha.Length != 0) hash ^= Recaptcha.GetHashCode();
      if (SubEnvironment.Length != 0) hash ^= SubEnvironment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedTransmissionKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedTransmissionKey);
      }
      if (PublicKeyId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PublicKeyId);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Locale);
      }
      if (EncryptedPayload.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedPayload);
      }
      if (EncryptionType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EncryptionType);
      }
      if (Recaptcha.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Recaptcha);
      }
      if (SubEnvironment.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SubEnvironment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedTransmissionKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTransmissionKey);
      }
      if (PublicKeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicKeyId);
      }
      if (Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (EncryptedPayload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedPayload);
      }
      if (EncryptionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncryptionType);
      }
      if (Recaptcha.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Recaptcha);
      }
      if (SubEnvironment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubEnvironment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedTransmissionKey.Length != 0) {
        EncryptedTransmissionKey = other.EncryptedTransmissionKey;
      }
      if (other.PublicKeyId != 0) {
        PublicKeyId = other.PublicKeyId;
      }
      if (other.Locale.Length != 0) {
        Locale = other.Locale;
      }
      if (other.EncryptedPayload.Length != 0) {
        EncryptedPayload = other.EncryptedPayload;
      }
      if (other.EncryptionType != 0) {
        EncryptionType = other.EncryptionType;
      }
      if (other.Recaptcha.Length != 0) {
        Recaptcha = other.Recaptcha;
      }
      if (other.SubEnvironment.Length != 0) {
        SubEnvironment = other.SubEnvironment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedTransmissionKey = input.ReadBytes();
            break;
          }
          case 16: {
            PublicKeyId = input.ReadInt32();
            break;
          }
          case 26: {
            Locale = input.ReadString();
            break;
          }
          case 34: {
            EncryptedPayload = input.ReadBytes();
            break;
          }
          case 40: {
            EncryptionType = input.ReadInt32();
            break;
          }
          case 50: {
            Recaptcha = input.ReadString();
            break;
          }
          case 58: {
            SubEnvironment = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApiRequestPayload : pb::IMessage<ApiRequestPayload> {
    private static readonly pb::MessageParser<ApiRequestPayload> _parser = new pb::MessageParser<ApiRequestPayload>(() => new ApiRequestPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiRequestPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequestPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequestPayload(ApiRequestPayload other) : this() {
      payload_ = other.payload_;
      encryptedSessionToken_ = other.encryptedSessionToken_;
      timeToken_ = other.timeToken_;
      apiVersion_ = other.apiVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequestPayload Clone() {
      return new ApiRequestPayload(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedSessionToken" field.</summary>
    public const int EncryptedSessionTokenFieldNumber = 2;
    private pb::ByteString encryptedSessionToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedSessionToken {
      get { return encryptedSessionToken_; }
      set {
        encryptedSessionToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeToken" field.</summary>
    public const int TimeTokenFieldNumber = 3;
    private pb::ByteString timeToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TimeToken {
      get { return timeToken_; }
      set {
        timeToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apiVersion" field.</summary>
    public const int ApiVersionFieldNumber = 4;
    private int apiVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApiVersion {
      get { return apiVersion_; }
      set {
        apiVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiRequestPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiRequestPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if (EncryptedSessionToken != other.EncryptedSessionToken) return false;
      if (TimeToken != other.TimeToken) return false;
      if (ApiVersion != other.ApiVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (EncryptedSessionToken.Length != 0) hash ^= EncryptedSessionToken.GetHashCode();
      if (TimeToken.Length != 0) hash ^= TimeToken.GetHashCode();
      if (ApiVersion != 0) hash ^= ApiVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (EncryptedSessionToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedSessionToken);
      }
      if (TimeToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TimeToken);
      }
      if (ApiVersion != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ApiVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (EncryptedSessionToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedSessionToken);
      }
      if (TimeToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TimeToken);
      }
      if (ApiVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApiVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiRequestPayload other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.EncryptedSessionToken.Length != 0) {
        EncryptedSessionToken = other.EncryptedSessionToken;
      }
      if (other.TimeToken.Length != 0) {
        TimeToken = other.TimeToken;
      }
      if (other.ApiVersion != 0) {
        ApiVersion = other.ApiVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedSessionToken = input.ReadBytes();
            break;
          }
          case 26: {
            TimeToken = input.ReadBytes();
            break;
          }
          case 32: {
            ApiVersion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      key_ = other.key_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 2;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceRequest : pb::IMessage<DeviceRequest> {
    private static readonly pb::MessageParser<DeviceRequest> _parser = new pb::MessageParser<DeviceRequest>(() => new DeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRequest(DeviceRequest other) : this() {
      clientVersion_ = other.clientVersion_;
      deviceName_ = other.deviceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRequest Clone() {
      return new DeviceRequest(this);
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceName" field.</summary>
    public const int DeviceNameFieldNumber = 2;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (DeviceName != other.DeviceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientVersion);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientVersion = input.ReadString();
            break;
          }
          case 18: {
            DeviceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRequest : pb::IMessage<AuthRequest> {
    private static readonly pb::MessageParser<AuthRequest> _parser = new pb::MessageParser<AuthRequest>(() => new AuthRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRequest(AuthRequest other) : this() {
      clientVersion_ = other.clientVersion_;
      username_ = other.username_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRequest Clone() {
      return new AuthRequest(this);
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 3;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (Username != other.Username) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientVersion);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientVersion = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewUserMinimumParams : pb::IMessage<NewUserMinimumParams> {
    private static readonly pb::MessageParser<NewUserMinimumParams> _parser = new pb::MessageParser<NewUserMinimumParams>(() => new NewUserMinimumParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewUserMinimumParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewUserMinimumParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewUserMinimumParams(NewUserMinimumParams other) : this() {
      minimumIterations_ = other.minimumIterations_;
      passwordMatchRegex_ = other.passwordMatchRegex_.Clone();
      passwordMatchDescription_ = other.passwordMatchDescription_.Clone();
      isEnterpriseDomain_ = other.isEnterpriseDomain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewUserMinimumParams Clone() {
      return new NewUserMinimumParams(this);
    }

    /// <summary>Field number for the "minimumIterations" field.</summary>
    public const int MinimumIterationsFieldNumber = 1;
    private int minimumIterations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumIterations {
      get { return minimumIterations_; }
      set {
        minimumIterations_ = value;
      }
    }

    /// <summary>Field number for the "passwordMatchRegex" field.</summary>
    public const int PasswordMatchRegexFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_passwordMatchRegex_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> passwordMatchRegex_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PasswordMatchRegex {
      get { return passwordMatchRegex_; }
    }

    /// <summary>Field number for the "passwordMatchDescription" field.</summary>
    public const int PasswordMatchDescriptionFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_passwordMatchDescription_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> passwordMatchDescription_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PasswordMatchDescription {
      get { return passwordMatchDescription_; }
    }

    /// <summary>Field number for the "isEnterpriseDomain" field.</summary>
    public const int IsEnterpriseDomainFieldNumber = 4;
    private bool isEnterpriseDomain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnterpriseDomain {
      get { return isEnterpriseDomain_; }
      set {
        isEnterpriseDomain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewUserMinimumParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewUserMinimumParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinimumIterations != other.MinimumIterations) return false;
      if(!passwordMatchRegex_.Equals(other.passwordMatchRegex_)) return false;
      if(!passwordMatchDescription_.Equals(other.passwordMatchDescription_)) return false;
      if (IsEnterpriseDomain != other.IsEnterpriseDomain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinimumIterations != 0) hash ^= MinimumIterations.GetHashCode();
      hash ^= passwordMatchRegex_.GetHashCode();
      hash ^= passwordMatchDescription_.GetHashCode();
      if (IsEnterpriseDomain != false) hash ^= IsEnterpriseDomain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinimumIterations != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumIterations);
      }
      passwordMatchRegex_.WriteTo(output, _repeated_passwordMatchRegex_codec);
      passwordMatchDescription_.WriteTo(output, _repeated_passwordMatchDescription_codec);
      if (IsEnterpriseDomain != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsEnterpriseDomain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinimumIterations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumIterations);
      }
      size += passwordMatchRegex_.CalculateSize(_repeated_passwordMatchRegex_codec);
      size += passwordMatchDescription_.CalculateSize(_repeated_passwordMatchDescription_codec);
      if (IsEnterpriseDomain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewUserMinimumParams other) {
      if (other == null) {
        return;
      }
      if (other.MinimumIterations != 0) {
        MinimumIterations = other.MinimumIterations;
      }
      passwordMatchRegex_.Add(other.passwordMatchRegex_);
      passwordMatchDescription_.Add(other.passwordMatchDescription_);
      if (other.IsEnterpriseDomain != false) {
        IsEnterpriseDomain = other.IsEnterpriseDomain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinimumIterations = input.ReadInt32();
            break;
          }
          case 18: {
            passwordMatchRegex_.AddEntriesFrom(input, _repeated_passwordMatchRegex_codec);
            break;
          }
          case 26: {
            passwordMatchDescription_.AddEntriesFrom(input, _repeated_passwordMatchDescription_codec);
            break;
          }
          case 32: {
            IsEnterpriseDomain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PreLoginRequest : pb::IMessage<PreLoginRequest> {
    private static readonly pb::MessageParser<PreLoginRequest> _parser = new pb::MessageParser<PreLoginRequest>(() => new PreLoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreLoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginRequest(PreLoginRequest other) : this() {
      authRequest_ = other.authRequest_ != null ? other.authRequest_.Clone() : null;
      loginType_ = other.loginType_;
      twoFactorToken_ = other.twoFactorToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginRequest Clone() {
      return new PreLoginRequest(this);
    }

    /// <summary>Field number for the "authRequest" field.</summary>
    public const int AuthRequestFieldNumber = 1;
    private global::Authentication.AuthRequest authRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.AuthRequest AuthRequest {
      get { return authRequest_; }
      set {
        authRequest_ = value;
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 2;
    private global::Authentication.LoginType loginType_ = global::Authentication.LoginType.Normal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "twoFactorToken" field.</summary>
    public const int TwoFactorTokenFieldNumber = 3;
    private pb::ByteString twoFactorToken_ = pb::ByteString.Empty;
    /// <summary>
    /// optional - if supplied, it will be validated if it needs refreshing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TwoFactorToken {
      get { return twoFactorToken_; }
      set {
        twoFactorToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreLoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreLoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AuthRequest, other.AuthRequest)) return false;
      if (LoginType != other.LoginType) return false;
      if (TwoFactorToken != other.TwoFactorToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (authRequest_ != null) hash ^= AuthRequest.GetHashCode();
      if (LoginType != global::Authentication.LoginType.Normal) hash ^= LoginType.GetHashCode();
      if (TwoFactorToken.Length != 0) hash ^= TwoFactorToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (authRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AuthRequest);
      }
      if (LoginType != global::Authentication.LoginType.Normal) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LoginType);
      }
      if (TwoFactorToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TwoFactorToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (authRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthRequest);
      }
      if (LoginType != global::Authentication.LoginType.Normal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (TwoFactorToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TwoFactorToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreLoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.authRequest_ != null) {
        if (authRequest_ == null) {
          AuthRequest = new global::Authentication.AuthRequest();
        }
        AuthRequest.MergeFrom(other.AuthRequest);
      }
      if (other.LoginType != global::Authentication.LoginType.Normal) {
        LoginType = other.LoginType;
      }
      if (other.TwoFactorToken.Length != 0) {
        TwoFactorToken = other.TwoFactorToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (authRequest_ == null) {
              AuthRequest = new global::Authentication.AuthRequest();
            }
            input.ReadMessage(AuthRequest);
            break;
          }
          case 16: {
            LoginType = (global::Authentication.LoginType) input.ReadEnum();
            break;
          }
          case 26: {
            TwoFactorToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      authRequest_ = other.authRequest_ != null ? other.authRequest_.Clone() : null;
      loginType_ = other.loginType_;
      authenticationHashPrime_ = other.authenticationHashPrime_;
      encryptedLoginToken_ = other.encryptedLoginToken_;
      authResponse_ = other.authResponse_;
      mcEnterpriseId_ = other.mcEnterpriseId_;
      pushToken_ = other.pushToken_;
      platform_ = other.platform_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "authRequest" field.</summary>
    public const int AuthRequestFieldNumber = 1;
    private global::Authentication.AuthRequest authRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.AuthRequest AuthRequest {
      get { return authRequest_; }
      set {
        authRequest_ = value;
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 2;
    private global::Authentication.LoginType loginType_ = global::Authentication.LoginType.Normal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "authenticationHashPrime" field.</summary>
    public const int AuthenticationHashPrimeFieldNumber = 3;
    private pb::ByteString authenticationHashPrime_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AuthenticationHashPrime {
      get { return authenticationHashPrime_; }
      set {
        authenticationHashPrime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedLoginToken" field.</summary>
    public const int EncryptedLoginTokenFieldNumber = 4;
    private pb::ByteString encryptedLoginToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedLoginToken {
      get { return encryptedLoginToken_; }
      set {
        encryptedLoginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authResponse" field.</summary>
    public const int AuthResponseFieldNumber = 5;
    private pb::ByteString authResponse_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AuthResponse {
      get { return authResponse_; }
      set {
        authResponse_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mcEnterpriseId" field.</summary>
    public const int McEnterpriseIdFieldNumber = 6;
    private int mcEnterpriseId_;
    /// <summary>
    ///input.getInt("enterprise_id")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int McEnterpriseId {
      get { return mcEnterpriseId_; }
      set {
        mcEnterpriseId_ = value;
      }
    }

    /// <summary>Field number for the "push_token" field.</summary>
    public const int PushTokenFieldNumber = 7;
    private string pushToken_ = "";
    /// <summary>
    ///needed to receive DNA notifications per login Command wiki page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PushToken {
      get { return pushToken_; }
      set {
        pushToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 8;
    private string platform_ = "";
    /// <summary>
    ///needed to receive DNA notifications per login Command wiki page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AuthRequest, other.AuthRequest)) return false;
      if (LoginType != other.LoginType) return false;
      if (AuthenticationHashPrime != other.AuthenticationHashPrime) return false;
      if (EncryptedLoginToken != other.EncryptedLoginToken) return false;
      if (AuthResponse != other.AuthResponse) return false;
      if (McEnterpriseId != other.McEnterpriseId) return false;
      if (PushToken != other.PushToken) return false;
      if (Platform != other.Platform) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (authRequest_ != null) hash ^= AuthRequest.GetHashCode();
      if (LoginType != global::Authentication.LoginType.Normal) hash ^= LoginType.GetHashCode();
      if (AuthenticationHashPrime.Length != 0) hash ^= AuthenticationHashPrime.GetHashCode();
      if (EncryptedLoginToken.Length != 0) hash ^= EncryptedLoginToken.GetHashCode();
      if (AuthResponse.Length != 0) hash ^= AuthResponse.GetHashCode();
      if (McEnterpriseId != 0) hash ^= McEnterpriseId.GetHashCode();
      if (PushToken.Length != 0) hash ^= PushToken.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (authRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AuthRequest);
      }
      if (LoginType != global::Authentication.LoginType.Normal) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LoginType);
      }
      if (AuthenticationHashPrime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(AuthenticationHashPrime);
      }
      if (EncryptedLoginToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedLoginToken);
      }
      if (AuthResponse.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(AuthResponse);
      }
      if (McEnterpriseId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(McEnterpriseId);
      }
      if (PushToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PushToken);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Platform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (authRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthRequest);
      }
      if (LoginType != global::Authentication.LoginType.Normal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (AuthenticationHashPrime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AuthenticationHashPrime);
      }
      if (EncryptedLoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedLoginToken);
      }
      if (AuthResponse.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AuthResponse);
      }
      if (McEnterpriseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(McEnterpriseId);
      }
      if (PushToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PushToken);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.authRequest_ != null) {
        if (authRequest_ == null) {
          AuthRequest = new global::Authentication.AuthRequest();
        }
        AuthRequest.MergeFrom(other.AuthRequest);
      }
      if (other.LoginType != global::Authentication.LoginType.Normal) {
        LoginType = other.LoginType;
      }
      if (other.AuthenticationHashPrime.Length != 0) {
        AuthenticationHashPrime = other.AuthenticationHashPrime;
      }
      if (other.EncryptedLoginToken.Length != 0) {
        EncryptedLoginToken = other.EncryptedLoginToken;
      }
      if (other.AuthResponse.Length != 0) {
        AuthResponse = other.AuthResponse;
      }
      if (other.McEnterpriseId != 0) {
        McEnterpriseId = other.McEnterpriseId;
      }
      if (other.PushToken.Length != 0) {
        PushToken = other.PushToken;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (authRequest_ == null) {
              AuthRequest = new global::Authentication.AuthRequest();
            }
            input.ReadMessage(AuthRequest);
            break;
          }
          case 16: {
            LoginType = (global::Authentication.LoginType) input.ReadEnum();
            break;
          }
          case 26: {
            AuthenticationHashPrime = input.ReadBytes();
            break;
          }
          case 34: {
            EncryptedLoginToken = input.ReadBytes();
            break;
          }
          case 42: {
            AuthResponse = input.ReadBytes();
            break;
          }
          case 48: {
            McEnterpriseId = input.ReadInt32();
            break;
          }
          case 58: {
            PushToken = input.ReadString();
            break;
          }
          case 66: {
            Platform = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceResponse : pb::IMessage<DeviceResponse> {
    private static readonly pb::MessageParser<DeviceResponse> _parser = new pb::MessageParser<DeviceResponse>(() => new DeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceResponse(DeviceResponse other) : this() {
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceResponse Clone() {
      return new DeviceResponse(this);
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 1;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Authentication.DeviceStatus status_ = global::Authentication.DeviceStatus.DeviceNeedsApproval;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.DeviceStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (Status != global::Authentication.DeviceStatus.DeviceNeedsApproval) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (Status != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (Status != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceResponse other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.Status != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 16: {
            Status = (global::Authentication.DeviceStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Salt : pb::IMessage<Salt> {
    private static readonly pb::MessageParser<Salt> _parser = new pb::MessageParser<Salt>(() => new Salt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Salt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Salt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Salt(Salt other) : this() {
      iterations_ = other.iterations_;
      salt_ = other.salt_;
      algorithm_ = other.algorithm_;
      uid_ = other.uid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Salt Clone() {
      return new Salt(this);
    }

    /// <summary>Field number for the "iterations" field.</summary>
    public const int IterationsFieldNumber = 1;
    private int iterations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Iterations {
      get { return iterations_; }
      set {
        iterations_ = value;
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int Salt_FieldNumber = 2;
    private pb::ByteString salt_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Salt_ {
      get { return salt_; }
      set {
        salt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "algorithm" field.</summary>
    public const int AlgorithmFieldNumber = 3;
    private int algorithm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Algorithm {
      get { return algorithm_; }
      set {
        algorithm_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 4;
    private pb::ByteString uid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Salt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Salt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Iterations != other.Iterations) return false;
      if (Salt_ != other.Salt_) return false;
      if (Algorithm != other.Algorithm) return false;
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Iterations != 0) hash ^= Iterations.GetHashCode();
      if (Salt_.Length != 0) hash ^= Salt_.GetHashCode();
      if (Algorithm != 0) hash ^= Algorithm.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Iterations != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Iterations);
      }
      if (Salt_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Salt_);
      }
      if (Algorithm != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Algorithm);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Iterations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Iterations);
      }
      if (Salt_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Salt_);
      }
      if (Algorithm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Algorithm);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Salt other) {
      if (other == null) {
        return;
      }
      if (other.Iterations != 0) {
        Iterations = other.Iterations;
      }
      if (other.Salt_.Length != 0) {
        Salt_ = other.Salt_;
      }
      if (other.Algorithm != 0) {
        Algorithm = other.Algorithm;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Iterations = input.ReadInt32();
            break;
          }
          case 18: {
            Salt_ = input.ReadBytes();
            break;
          }
          case 24: {
            Algorithm = input.ReadInt32();
            break;
          }
          case 34: {
            Uid = input.ReadBytes();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TwoFactorChannel : pb::IMessage<TwoFactorChannel> {
    private static readonly pb::MessageParser<TwoFactorChannel> _parser = new pb::MessageParser<TwoFactorChannel>(() => new TwoFactorChannel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwoFactorChannel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorChannel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorChannel(TwoFactorChannel other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorChannel Clone() {
      return new TwoFactorChannel(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwoFactorChannel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwoFactorChannel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwoFactorChannel other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartLoginRequest : pb::IMessage<StartLoginRequest> {
    private static readonly pb::MessageParser<StartLoginRequest> _parser = new pb::MessageParser<StartLoginRequest>(() => new StartLoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartLoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartLoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartLoginRequest(StartLoginRequest other) : this() {
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      username_ = other.username_;
      clientVersion_ = other.clientVersion_;
      messageSessionUid_ = other.messageSessionUid_;
      encryptedLoginToken_ = other.encryptedLoginToken_;
      loginType_ = other.loginType_;
      mcEnterpriseId_ = other.mcEnterpriseId_;
      loginMethod_ = other.loginMethod_;
      forceNewLogin_ = other.forceNewLogin_;
      cloneCode_ = other.cloneCode_;
      v2TwoFactorToken_ = other.v2TwoFactorToken_;
      accountUid_ = other.accountUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartLoginRequest Clone() {
      return new StartLoginRequest(this);
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 1;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 3;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messageSessionUid" field.</summary>
    public const int MessageSessionUidFieldNumber = 4;
    private pb::ByteString messageSessionUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageSessionUid {
      get { return messageSessionUid_; }
      set {
        messageSessionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedLoginToken" field.</summary>
    public const int EncryptedLoginTokenFieldNumber = 5;
    private pb::ByteString encryptedLoginToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedLoginToken {
      get { return encryptedLoginToken_; }
      set {
        encryptedLoginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 6;
    private global::Authentication.LoginType loginType_ = global::Authentication.LoginType.Normal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "mcEnterpriseId" field.</summary>
    public const int McEnterpriseIdFieldNumber = 7;
    private int mcEnterpriseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int McEnterpriseId {
      get { return mcEnterpriseId_; }
      set {
        mcEnterpriseId_ = value;
      }
    }

    /// <summary>Field number for the "loginMethod" field.</summary>
    public const int LoginMethodFieldNumber = 8;
    private global::Authentication.LoginMethod loginMethod_ = global::Authentication.LoginMethod.InvalidLoginmethod;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.LoginMethod LoginMethod {
      get { return loginMethod_; }
      set {
        loginMethod_ = value;
      }
    }

    /// <summary>Field number for the "forceNewLogin" field.</summary>
    public const int ForceNewLoginFieldNumber = 9;
    private bool forceNewLogin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceNewLogin {
      get { return forceNewLogin_; }
      set {
        forceNewLogin_ = value;
      }
    }

    /// <summary>Field number for the "cloneCode" field.</summary>
    public const int CloneCodeFieldNumber = 10;
    private pb::ByteString cloneCode_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CloneCode {
      get { return cloneCode_; }
      set {
        cloneCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "v2TwoFactorToken" field.</summary>
    public const int V2TwoFactorTokenFieldNumber = 11;
    private string v2TwoFactorToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string V2TwoFactorToken {
      get { return v2TwoFactorToken_; }
      set {
        v2TwoFactorToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountUid" field.</summary>
    public const int AccountUidFieldNumber = 12;
    private pb::ByteString accountUid_ = pb::ByteString.Empty;
    /// <summary>
    ///for think clients, if supplied and accountUid != user's accountUid return error reset_cache_invalid_account_uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AccountUid {
      get { return accountUid_; }
      set {
        accountUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartLoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartLoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (Username != other.Username) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (MessageSessionUid != other.MessageSessionUid) return false;
      if (EncryptedLoginToken != other.EncryptedLoginToken) return false;
      if (LoginType != other.LoginType) return false;
      if (McEnterpriseId != other.McEnterpriseId) return false;
      if (LoginMethod != other.LoginMethod) return false;
      if (ForceNewLogin != other.ForceNewLogin) return false;
      if (CloneCode != other.CloneCode) return false;
      if (V2TwoFactorToken != other.V2TwoFactorToken) return false;
      if (AccountUid != other.AccountUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (MessageSessionUid.Length != 0) hash ^= MessageSessionUid.GetHashCode();
      if (EncryptedLoginToken.Length != 0) hash ^= EncryptedLoginToken.GetHashCode();
      if (LoginType != global::Authentication.LoginType.Normal) hash ^= LoginType.GetHashCode();
      if (McEnterpriseId != 0) hash ^= McEnterpriseId.GetHashCode();
      if (LoginMethod != global::Authentication.LoginMethod.InvalidLoginmethod) hash ^= LoginMethod.GetHashCode();
      if (ForceNewLogin != false) hash ^= ForceNewLogin.GetHashCode();
      if (CloneCode.Length != 0) hash ^= CloneCode.GetHashCode();
      if (V2TwoFactorToken.Length != 0) hash ^= V2TwoFactorToken.GetHashCode();
      if (AccountUid.Length != 0) hash ^= AccountUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientVersion);
      }
      if (MessageSessionUid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(MessageSessionUid);
      }
      if (EncryptedLoginToken.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EncryptedLoginToken);
      }
      if (LoginType != global::Authentication.LoginType.Normal) {
        output.WriteRawTag(48);
        output.WriteEnum((int) LoginType);
      }
      if (McEnterpriseId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(McEnterpriseId);
      }
      if (LoginMethod != global::Authentication.LoginMethod.InvalidLoginmethod) {
        output.WriteRawTag(64);
        output.WriteEnum((int) LoginMethod);
      }
      if (ForceNewLogin != false) {
        output.WriteRawTag(72);
        output.WriteBool(ForceNewLogin);
      }
      if (CloneCode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(CloneCode);
      }
      if (V2TwoFactorToken.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(V2TwoFactorToken);
      }
      if (AccountUid.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(AccountUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (MessageSessionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageSessionUid);
      }
      if (EncryptedLoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedLoginToken);
      }
      if (LoginType != global::Authentication.LoginType.Normal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (McEnterpriseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(McEnterpriseId);
      }
      if (LoginMethod != global::Authentication.LoginMethod.InvalidLoginmethod) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginMethod);
      }
      if (ForceNewLogin != false) {
        size += 1 + 1;
      }
      if (CloneCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CloneCode);
      }
      if (V2TwoFactorToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(V2TwoFactorToken);
      }
      if (AccountUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AccountUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartLoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.MessageSessionUid.Length != 0) {
        MessageSessionUid = other.MessageSessionUid;
      }
      if (other.EncryptedLoginToken.Length != 0) {
        EncryptedLoginToken = other.EncryptedLoginToken;
      }
      if (other.LoginType != global::Authentication.LoginType.Normal) {
        LoginType = other.LoginType;
      }
      if (other.McEnterpriseId != 0) {
        McEnterpriseId = other.McEnterpriseId;
      }
      if (other.LoginMethod != global::Authentication.LoginMethod.InvalidLoginmethod) {
        LoginMethod = other.LoginMethod;
      }
      if (other.ForceNewLogin != false) {
        ForceNewLogin = other.ForceNewLogin;
      }
      if (other.CloneCode.Length != 0) {
        CloneCode = other.CloneCode;
      }
      if (other.V2TwoFactorToken.Length != 0) {
        V2TwoFactorToken = other.V2TwoFactorToken;
      }
      if (other.AccountUid.Length != 0) {
        AccountUid = other.AccountUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            ClientVersion = input.ReadString();
            break;
          }
          case 34: {
            MessageSessionUid = input.ReadBytes();
            break;
          }
          case 42: {
            EncryptedLoginToken = input.ReadBytes();
            break;
          }
          case 48: {
            LoginType = (global::Authentication.LoginType) input.ReadEnum();
            break;
          }
          case 56: {
            McEnterpriseId = input.ReadInt32();
            break;
          }
          case 64: {
            LoginMethod = (global::Authentication.LoginMethod) input.ReadEnum();
            break;
          }
          case 72: {
            ForceNewLogin = input.ReadBool();
            break;
          }
          case 82: {
            CloneCode = input.ReadBytes();
            break;
          }
          case 90: {
            V2TwoFactorToken = input.ReadString();
            break;
          }
          case 98: {
            AccountUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      loginState_ = other.loginState_;
      accountUid_ = other.accountUid_;
      primaryUsername_ = other.primaryUsername_;
      encryptedDataKey_ = other.encryptedDataKey_;
      encryptedDataKeyType_ = other.encryptedDataKeyType_;
      encryptedLoginToken_ = other.encryptedLoginToken_;
      encryptedSessionToken_ = other.encryptedSessionToken_;
      sessionTokenType_ = other.sessionTokenType_;
      message_ = other.message_;
      url_ = other.url_;
      channels_ = other.channels_.Clone();
      salt_ = other.salt_.Clone();
      cloneCode_ = other.cloneCode_;
      stateSpecificValue_ = other.stateSpecificValue_;
      ssoClientVersion_ = other.ssoClientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "loginState" field.</summary>
    public const int LoginStateFieldNumber = 1;
    private global::Authentication.LoginState loginState_ = global::Authentication.LoginState.InvalidLoginstate;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.LoginState LoginState {
      get { return loginState_; }
      set {
        loginState_ = value;
      }
    }

    /// <summary>Field number for the "accountUid" field.</summary>
    public const int AccountUidFieldNumber = 2;
    private pb::ByteString accountUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AccountUid {
      get { return accountUid_; }
      set {
        accountUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primaryUsername" field.</summary>
    public const int PrimaryUsernameFieldNumber = 3;
    private string primaryUsername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrimaryUsername {
      get { return primaryUsername_; }
      set {
        primaryUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDataKey" field.</summary>
    public const int EncryptedDataKeyFieldNumber = 4;
    private pb::ByteString encryptedDataKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDataKey {
      get { return encryptedDataKey_; }
      set {
        encryptedDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDataKeyType" field.</summary>
    public const int EncryptedDataKeyTypeFieldNumber = 5;
    private global::Authentication.EncryptedDataKeyType encryptedDataKeyType_ = global::Authentication.EncryptedDataKeyType.NoKey;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.EncryptedDataKeyType EncryptedDataKeyType {
      get { return encryptedDataKeyType_; }
      set {
        encryptedDataKeyType_ = value;
      }
    }

    /// <summary>Field number for the "encryptedLoginToken" field.</summary>
    public const int EncryptedLoginTokenFieldNumber = 6;
    private pb::ByteString encryptedLoginToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedLoginToken {
      get { return encryptedLoginToken_; }
      set {
        encryptedLoginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedSessionToken" field.</summary>
    public const int EncryptedSessionTokenFieldNumber = 7;
    private pb::ByteString encryptedSessionToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedSessionToken {
      get { return encryptedSessionToken_; }
      set {
        encryptedSessionToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sessionTokenType" field.</summary>
    public const int SessionTokenTypeFieldNumber = 8;
    private global::Authentication.SessionTokenType sessionTokenType_ = global::Authentication.SessionTokenType.NoRestriction;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.SessionTokenType SessionTokenType {
      get { return sessionTokenType_; }
      set {
        sessionTokenType_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 9;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 10;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Authentication.TwoFactorChannelInfo> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(90, global::Authentication.TwoFactorChannelInfo.Parser);
    private readonly pbc::RepeatedField<global::Authentication.TwoFactorChannelInfo> channels_ = new pbc::RepeatedField<global::Authentication.TwoFactorChannelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.TwoFactorChannelInfo> Channels {
      get { return channels_; }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Authentication.Salt> _repeated_salt_codec
        = pb::FieldCodec.ForMessage(98, global::Authentication.Salt.Parser);
    private readonly pbc::RepeatedField<global::Authentication.Salt> salt_ = new pbc::RepeatedField<global::Authentication.Salt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.Salt> Salt {
      get { return salt_; }
    }

    /// <summary>Field number for the "cloneCode" field.</summary>
    public const int CloneCodeFieldNumber = 13;
    private pb::ByteString cloneCode_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CloneCode {
      get { return cloneCode_; }
      set {
        cloneCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stateSpecificValue" field.</summary>
    public const int StateSpecificValueFieldNumber = 14;
    private string stateSpecificValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateSpecificValue {
      get { return stateSpecificValue_; }
      set {
        stateSpecificValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ssoClientVersion" field.</summary>
    public const int SsoClientVersionFieldNumber = 15;
    private string ssoClientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SsoClientVersion {
      get { return ssoClientVersion_; }
      set {
        ssoClientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoginState != other.LoginState) return false;
      if (AccountUid != other.AccountUid) return false;
      if (PrimaryUsername != other.PrimaryUsername) return false;
      if (EncryptedDataKey != other.EncryptedDataKey) return false;
      if (EncryptedDataKeyType != other.EncryptedDataKeyType) return false;
      if (EncryptedLoginToken != other.EncryptedLoginToken) return false;
      if (EncryptedSessionToken != other.EncryptedSessionToken) return false;
      if (SessionTokenType != other.SessionTokenType) return false;
      if (Message != other.Message) return false;
      if (Url != other.Url) return false;
      if(!channels_.Equals(other.channels_)) return false;
      if(!salt_.Equals(other.salt_)) return false;
      if (CloneCode != other.CloneCode) return false;
      if (StateSpecificValue != other.StateSpecificValue) return false;
      if (SsoClientVersion != other.SsoClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoginState != global::Authentication.LoginState.InvalidLoginstate) hash ^= LoginState.GetHashCode();
      if (AccountUid.Length != 0) hash ^= AccountUid.GetHashCode();
      if (PrimaryUsername.Length != 0) hash ^= PrimaryUsername.GetHashCode();
      if (EncryptedDataKey.Length != 0) hash ^= EncryptedDataKey.GetHashCode();
      if (EncryptedDataKeyType != global::Authentication.EncryptedDataKeyType.NoKey) hash ^= EncryptedDataKeyType.GetHashCode();
      if (EncryptedLoginToken.Length != 0) hash ^= EncryptedLoginToken.GetHashCode();
      if (EncryptedSessionToken.Length != 0) hash ^= EncryptedSessionToken.GetHashCode();
      if (SessionTokenType != global::Authentication.SessionTokenType.NoRestriction) hash ^= SessionTokenType.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      hash ^= channels_.GetHashCode();
      hash ^= salt_.GetHashCode();
      if (CloneCode.Length != 0) hash ^= CloneCode.GetHashCode();
      if (StateSpecificValue.Length != 0) hash ^= StateSpecificValue.GetHashCode();
      if (SsoClientVersion.Length != 0) hash ^= SsoClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginState != global::Authentication.LoginState.InvalidLoginstate) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LoginState);
      }
      if (AccountUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(AccountUid);
      }
      if (PrimaryUsername.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PrimaryUsername);
      }
      if (EncryptedDataKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedDataKey);
      }
      if (EncryptedDataKeyType != global::Authentication.EncryptedDataKeyType.NoKey) {
        output.WriteRawTag(40);
        output.WriteEnum((int) EncryptedDataKeyType);
      }
      if (EncryptedLoginToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(EncryptedLoginToken);
      }
      if (EncryptedSessionToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(EncryptedSessionToken);
      }
      if (SessionTokenType != global::Authentication.SessionTokenType.NoRestriction) {
        output.WriteRawTag(64);
        output.WriteEnum((int) SessionTokenType);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Message);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Url);
      }
      channels_.WriteTo(output, _repeated_channels_codec);
      salt_.WriteTo(output, _repeated_salt_codec);
      if (CloneCode.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(CloneCode);
      }
      if (StateSpecificValue.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(StateSpecificValue);
      }
      if (SsoClientVersion.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(SsoClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginState != global::Authentication.LoginState.InvalidLoginstate) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginState);
      }
      if (AccountUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AccountUid);
      }
      if (PrimaryUsername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryUsername);
      }
      if (EncryptedDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDataKey);
      }
      if (EncryptedDataKeyType != global::Authentication.EncryptedDataKeyType.NoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncryptedDataKeyType);
      }
      if (EncryptedLoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedLoginToken);
      }
      if (EncryptedSessionToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedSessionToken);
      }
      if (SessionTokenType != global::Authentication.SessionTokenType.NoRestriction) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionTokenType);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      size += channels_.CalculateSize(_repeated_channels_codec);
      size += salt_.CalculateSize(_repeated_salt_codec);
      if (CloneCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CloneCode);
      }
      if (StateSpecificValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateSpecificValue);
      }
      if (SsoClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SsoClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.LoginState != global::Authentication.LoginState.InvalidLoginstate) {
        LoginState = other.LoginState;
      }
      if (other.AccountUid.Length != 0) {
        AccountUid = other.AccountUid;
      }
      if (other.PrimaryUsername.Length != 0) {
        PrimaryUsername = other.PrimaryUsername;
      }
      if (other.EncryptedDataKey.Length != 0) {
        EncryptedDataKey = other.EncryptedDataKey;
      }
      if (other.EncryptedDataKeyType != global::Authentication.EncryptedDataKeyType.NoKey) {
        EncryptedDataKeyType = other.EncryptedDataKeyType;
      }
      if (other.EncryptedLoginToken.Length != 0) {
        EncryptedLoginToken = other.EncryptedLoginToken;
      }
      if (other.EncryptedSessionToken.Length != 0) {
        EncryptedSessionToken = other.EncryptedSessionToken;
      }
      if (other.SessionTokenType != global::Authentication.SessionTokenType.NoRestriction) {
        SessionTokenType = other.SessionTokenType;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      channels_.Add(other.channels_);
      salt_.Add(other.salt_);
      if (other.CloneCode.Length != 0) {
        CloneCode = other.CloneCode;
      }
      if (other.StateSpecificValue.Length != 0) {
        StateSpecificValue = other.StateSpecificValue;
      }
      if (other.SsoClientVersion.Length != 0) {
        SsoClientVersion = other.SsoClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LoginState = (global::Authentication.LoginState) input.ReadEnum();
            break;
          }
          case 18: {
            AccountUid = input.ReadBytes();
            break;
          }
          case 26: {
            PrimaryUsername = input.ReadString();
            break;
          }
          case 34: {
            EncryptedDataKey = input.ReadBytes();
            break;
          }
          case 40: {
            EncryptedDataKeyType = (global::Authentication.EncryptedDataKeyType) input.ReadEnum();
            break;
          }
          case 50: {
            EncryptedLoginToken = input.ReadBytes();
            break;
          }
          case 58: {
            EncryptedSessionToken = input.ReadBytes();
            break;
          }
          case 64: {
            SessionTokenType = (global::Authentication.SessionTokenType) input.ReadEnum();
            break;
          }
          case 74: {
            Message = input.ReadString();
            break;
          }
          case 82: {
            Url = input.ReadString();
            break;
          }
          case 90: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
          case 98: {
            salt_.AddEntriesFrom(input, _repeated_salt_codec);
            break;
          }
          case 106: {
            CloneCode = input.ReadBytes();
            break;
          }
          case 114: {
            StateSpecificValue = input.ReadString();
            break;
          }
          case 122: {
            SsoClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SsoUserInfo : pb::IMessage<SsoUserInfo> {
    private static readonly pb::MessageParser<SsoUserInfo> _parser = new pb::MessageParser<SsoUserInfo>(() => new SsoUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SsoUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoUserInfo(SsoUserInfo other) : this() {
      companyName_ = other.companyName_;
      samlRequest_ = other.samlRequest_;
      samlRequestType_ = other.samlRequestType_;
      ssoDomainName_ = other.ssoDomainName_;
      loginUrl_ = other.loginUrl_;
      logoutUrl_ = other.logoutUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoUserInfo Clone() {
      return new SsoUserInfo(this);
    }

    /// <summary>Field number for the "companyName" field.</summary>
    public const int CompanyNameFieldNumber = 1;
    private string companyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompanyName {
      get { return companyName_; }
      set {
        companyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "samlRequest" field.</summary>
    public const int SamlRequestFieldNumber = 2;
    private string samlRequest_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SamlRequest {
      get { return samlRequest_; }
      set {
        samlRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "samlRequestType" field.</summary>
    public const int SamlRequestTypeFieldNumber = 3;
    private string samlRequestType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SamlRequestType {
      get { return samlRequestType_; }
      set {
        samlRequestType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ssoDomainName" field.</summary>
    public const int SsoDomainNameFieldNumber = 4;
    private string ssoDomainName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SsoDomainName {
      get { return ssoDomainName_; }
      set {
        ssoDomainName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginUrl" field.</summary>
    public const int LoginUrlFieldNumber = 5;
    private string loginUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginUrl {
      get { return loginUrl_; }
      set {
        loginUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logoutUrl" field.</summary>
    public const int LogoutUrlFieldNumber = 6;
    private string logoutUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogoutUrl {
      get { return logoutUrl_; }
      set {
        logoutUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SsoUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SsoUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompanyName != other.CompanyName) return false;
      if (SamlRequest != other.SamlRequest) return false;
      if (SamlRequestType != other.SamlRequestType) return false;
      if (SsoDomainName != other.SsoDomainName) return false;
      if (LoginUrl != other.LoginUrl) return false;
      if (LogoutUrl != other.LogoutUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompanyName.Length != 0) hash ^= CompanyName.GetHashCode();
      if (SamlRequest.Length != 0) hash ^= SamlRequest.GetHashCode();
      if (SamlRequestType.Length != 0) hash ^= SamlRequestType.GetHashCode();
      if (SsoDomainName.Length != 0) hash ^= SsoDomainName.GetHashCode();
      if (LoginUrl.Length != 0) hash ^= LoginUrl.GetHashCode();
      if (LogoutUrl.Length != 0) hash ^= LogoutUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompanyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CompanyName);
      }
      if (SamlRequest.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SamlRequest);
      }
      if (SamlRequestType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SamlRequestType);
      }
      if (SsoDomainName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SsoDomainName);
      }
      if (LoginUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LoginUrl);
      }
      if (LogoutUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LogoutUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompanyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompanyName);
      }
      if (SamlRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SamlRequest);
      }
      if (SamlRequestType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SamlRequestType);
      }
      if (SsoDomainName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SsoDomainName);
      }
      if (LoginUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginUrl);
      }
      if (LogoutUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogoutUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SsoUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.CompanyName.Length != 0) {
        CompanyName = other.CompanyName;
      }
      if (other.SamlRequest.Length != 0) {
        SamlRequest = other.SamlRequest;
      }
      if (other.SamlRequestType.Length != 0) {
        SamlRequestType = other.SamlRequestType;
      }
      if (other.SsoDomainName.Length != 0) {
        SsoDomainName = other.SsoDomainName;
      }
      if (other.LoginUrl.Length != 0) {
        LoginUrl = other.LoginUrl;
      }
      if (other.LogoutUrl.Length != 0) {
        LogoutUrl = other.LogoutUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CompanyName = input.ReadString();
            break;
          }
          case 18: {
            SamlRequest = input.ReadString();
            break;
          }
          case 26: {
            SamlRequestType = input.ReadString();
            break;
          }
          case 34: {
            SsoDomainName = input.ReadString();
            break;
          }
          case 42: {
            LoginUrl = input.ReadString();
            break;
          }
          case 50: {
            LogoutUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PreLoginResponse : pb::IMessage<PreLoginResponse> {
    private static readonly pb::MessageParser<PreLoginResponse> _parser = new pb::MessageParser<PreLoginResponse>(() => new PreLoginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreLoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginResponse(PreLoginResponse other) : this() {
      deviceStatus_ = other.deviceStatus_;
      salt_ = other.salt_.Clone();
      oBSOLETEFIELD_ = other.oBSOLETEFIELD_.Clone();
      ssoUserInfo_ = other.ssoUserInfo_ != null ? other.ssoUserInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreLoginResponse Clone() {
      return new PreLoginResponse(this);
    }

    /// <summary>Field number for the "deviceStatus" field.</summary>
    public const int DeviceStatusFieldNumber = 1;
    private global::Authentication.DeviceStatus deviceStatus_ = global::Authentication.DeviceStatus.DeviceNeedsApproval;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.DeviceStatus DeviceStatus {
      get { return deviceStatus_; }
      set {
        deviceStatus_ = value;
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Authentication.Salt> _repeated_salt_codec
        = pb::FieldCodec.ForMessage(18, global::Authentication.Salt.Parser);
    private readonly pbc::RepeatedField<global::Authentication.Salt> salt_ = new pbc::RepeatedField<global::Authentication.Salt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.Salt> Salt {
      get { return salt_; }
    }

    /// <summary>Field number for the "OBSOLETE_FIELD" field.</summary>
    public const int OBSOLETEFIELDFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Authentication.TwoFactorChannel> _repeated_oBSOLETEFIELD_codec
        = pb::FieldCodec.ForMessage(26, global::Authentication.TwoFactorChannel.Parser);
    private readonly pbc::RepeatedField<global::Authentication.TwoFactorChannel> oBSOLETEFIELD_ = new pbc::RepeatedField<global::Authentication.TwoFactorChannel>();
    /// <summary>
    ///DO NOT RE-USE. placeholder for backwards compatability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.TwoFactorChannel> OBSOLETEFIELD {
      get { return oBSOLETEFIELD_; }
    }

    /// <summary>Field number for the "ssoUserInfo" field.</summary>
    public const int SsoUserInfoFieldNumber = 4;
    private global::Authentication.SsoUserInfo ssoUserInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.SsoUserInfo SsoUserInfo {
      get { return ssoUserInfo_; }
      set {
        ssoUserInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreLoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreLoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceStatus != other.DeviceStatus) return false;
      if(!salt_.Equals(other.salt_)) return false;
      if(!oBSOLETEFIELD_.Equals(other.oBSOLETEFIELD_)) return false;
      if (!object.Equals(SsoUserInfo, other.SsoUserInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) hash ^= DeviceStatus.GetHashCode();
      hash ^= salt_.GetHashCode();
      hash ^= oBSOLETEFIELD_.GetHashCode();
      if (ssoUserInfo_ != null) hash ^= SsoUserInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DeviceStatus);
      }
      salt_.WriteTo(output, _repeated_salt_codec);
      oBSOLETEFIELD_.WriteTo(output, _repeated_oBSOLETEFIELD_codec);
      if (ssoUserInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SsoUserInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceStatus);
      }
      size += salt_.CalculateSize(_repeated_salt_codec);
      size += oBSOLETEFIELD_.CalculateSize(_repeated_oBSOLETEFIELD_codec);
      if (ssoUserInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SsoUserInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreLoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        DeviceStatus = other.DeviceStatus;
      }
      salt_.Add(other.salt_);
      oBSOLETEFIELD_.Add(other.oBSOLETEFIELD_);
      if (other.ssoUserInfo_ != null) {
        if (ssoUserInfo_ == null) {
          SsoUserInfo = new global::Authentication.SsoUserInfo();
        }
        SsoUserInfo.MergeFrom(other.SsoUserInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeviceStatus = (global::Authentication.DeviceStatus) input.ReadEnum();
            break;
          }
          case 18: {
            salt_.AddEntriesFrom(input, _repeated_salt_codec);
            break;
          }
          case 26: {
            oBSOLETEFIELD_.AddEntriesFrom(input, _repeated_oBSOLETEFIELD_codec);
            break;
          }
          case 34: {
            if (ssoUserInfo_ == null) {
              SsoUserInfo = new global::Authentication.SsoUserInfo();
            }
            input.ReadMessage(SsoUserInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginToMcRequest : pb::IMessage<LoginToMcRequest> {
    private static readonly pb::MessageParser<LoginToMcRequest> _parser = new pb::MessageParser<LoginToMcRequest>(() => new LoginToMcRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginToMcRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcRequest(LoginToMcRequest other) : this() {
      mcEnterpriseId_ = other.mcEnterpriseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcRequest Clone() {
      return new LoginToMcRequest(this);
    }

    /// <summary>Field number for the "mcEnterpriseId" field.</summary>
    public const int McEnterpriseIdFieldNumber = 1;
    private int mcEnterpriseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int McEnterpriseId {
      get { return mcEnterpriseId_; }
      set {
        mcEnterpriseId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginToMcRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginToMcRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (McEnterpriseId != other.McEnterpriseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (McEnterpriseId != 0) hash ^= McEnterpriseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (McEnterpriseId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(McEnterpriseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (McEnterpriseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(McEnterpriseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginToMcRequest other) {
      if (other == null) {
        return;
      }
      if (other.McEnterpriseId != 0) {
        McEnterpriseId = other.McEnterpriseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            McEnterpriseId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginToMcResponse : pb::IMessage<LoginToMcResponse> {
    private static readonly pb::MessageParser<LoginToMcResponse> _parser = new pb::MessageParser<LoginToMcResponse>(() => new LoginToMcResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginToMcResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcResponse(LoginToMcResponse other) : this() {
      encryptedSessionToken_ = other.encryptedSessionToken_;
      encryptedTreeKey_ = other.encryptedTreeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginToMcResponse Clone() {
      return new LoginToMcResponse(this);
    }

    /// <summary>Field number for the "encryptedSessionToken" field.</summary>
    public const int EncryptedSessionTokenFieldNumber = 1;
    private pb::ByteString encryptedSessionToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedSessionToken {
      get { return encryptedSessionToken_; }
      set {
        encryptedSessionToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedTreeKey" field.</summary>
    public const int EncryptedTreeKeyFieldNumber = 2;
    private string encryptedTreeKey_ = "";
    /// <summary>
    /// MC’s tree key encrypted with MSP’s tree key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptedTreeKey {
      get { return encryptedTreeKey_; }
      set {
        encryptedTreeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginToMcResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginToMcResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedSessionToken != other.EncryptedSessionToken) return false;
      if (EncryptedTreeKey != other.EncryptedTreeKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedSessionToken.Length != 0) hash ^= EncryptedSessionToken.GetHashCode();
      if (EncryptedTreeKey.Length != 0) hash ^= EncryptedTreeKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedSessionToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedSessionToken);
      }
      if (EncryptedTreeKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EncryptedTreeKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedSessionToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedSessionToken);
      }
      if (EncryptedTreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptedTreeKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginToMcResponse other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedSessionToken.Length != 0) {
        EncryptedSessionToken = other.EncryptedSessionToken;
      }
      if (other.EncryptedTreeKey.Length != 0) {
        EncryptedTreeKey = other.EncryptedTreeKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedSessionToken = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedTreeKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginAsUserRequest : pb::IMessage<LoginAsUserRequest> {
    private static readonly pb::MessageParser<LoginAsUserRequest> _parser = new pb::MessageParser<LoginAsUserRequest>(() => new LoginAsUserRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAsUserRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAsUserRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAsUserRequest(LoginAsUserRequest other) : this() {
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAsUserRequest Clone() {
      return new LoginAsUserRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAsUserRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAsUserRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAsUserRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginAsUserResponse : pb::IMessage<LoginAsUserResponse> {
    private static readonly pb::MessageParser<LoginAsUserResponse> _parser = new pb::MessageParser<LoginAsUserResponse>(() => new LoginAsUserResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAsUserResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAsUserResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAsUserResponse(LoginAsUserResponse other) : this() {
      encryptedSessionToken_ = other.encryptedSessionToken_;
      encryptedSharedAccountKey_ = other.encryptedSharedAccountKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAsUserResponse Clone() {
      return new LoginAsUserResponse(this);
    }

    /// <summary>Field number for the "encryptedSessionToken" field.</summary>
    public const int EncryptedSessionTokenFieldNumber = 1;
    private pb::ByteString encryptedSessionToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedSessionToken {
      get { return encryptedSessionToken_; }
      set {
        encryptedSessionToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedSharedAccountKey" field.</summary>
    public const int EncryptedSharedAccountKeyFieldNumber = 2;
    private pb::ByteString encryptedSharedAccountKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedSharedAccountKey {
      get { return encryptedSharedAccountKey_; }
      set {
        encryptedSharedAccountKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAsUserResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAsUserResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedSessionToken != other.EncryptedSessionToken) return false;
      if (EncryptedSharedAccountKey != other.EncryptedSharedAccountKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedSessionToken.Length != 0) hash ^= EncryptedSessionToken.GetHashCode();
      if (EncryptedSharedAccountKey.Length != 0) hash ^= EncryptedSharedAccountKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedSessionToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedSessionToken);
      }
      if (EncryptedSharedAccountKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedSharedAccountKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedSessionToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedSessionToken);
      }
      if (EncryptedSharedAccountKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedSharedAccountKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAsUserResponse other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedSessionToken.Length != 0) {
        EncryptedSessionToken = other.EncryptedSessionToken;
      }
      if (other.EncryptedSharedAccountKey.Length != 0) {
        EncryptedSharedAccountKey = other.EncryptedSharedAccountKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedSessionToken = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedSharedAccountKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValidateAuthHashRequest : pb::IMessage<ValidateAuthHashRequest> {
    private static readonly pb::MessageParser<ValidateAuthHashRequest> _parser = new pb::MessageParser<ValidateAuthHashRequest>(() => new ValidateAuthHashRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateAuthHashRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateAuthHashRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateAuthHashRequest(ValidateAuthHashRequest other) : this() {
      passwordMethod_ = other.passwordMethod_;
      authResponse_ = other.authResponse_;
      encryptedLoginToken_ = other.encryptedLoginToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateAuthHashRequest Clone() {
      return new ValidateAuthHashRequest(this);
    }

    /// <summary>Field number for the "passwordMethod" field.</summary>
    public const int PasswordMethodFieldNumber = 1;
    private global::Authentication.PasswordMethod passwordMethod_ = global::Authentication.PasswordMethod.Entered;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.PasswordMethod PasswordMethod {
      get { return passwordMethod_; }
      set {
        passwordMethod_ = value;
      }
    }

    /// <summary>Field number for the "authResponse" field.</summary>
    public const int AuthResponseFieldNumber = 2;
    private pb::ByteString authResponse_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AuthResponse {
      get { return authResponse_; }
      set {
        authResponse_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedLoginToken" field.</summary>
    public const int EncryptedLoginTokenFieldNumber = 3;
    private pb::ByteString encryptedLoginToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedLoginToken {
      get { return encryptedLoginToken_; }
      set {
        encryptedLoginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateAuthHashRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateAuthHashRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PasswordMethod != other.PasswordMethod) return false;
      if (AuthResponse != other.AuthResponse) return false;
      if (EncryptedLoginToken != other.EncryptedLoginToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PasswordMethod != global::Authentication.PasswordMethod.Entered) hash ^= PasswordMethod.GetHashCode();
      if (AuthResponse.Length != 0) hash ^= AuthResponse.GetHashCode();
      if (EncryptedLoginToken.Length != 0) hash ^= EncryptedLoginToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PasswordMethod != global::Authentication.PasswordMethod.Entered) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PasswordMethod);
      }
      if (AuthResponse.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(AuthResponse);
      }
      if (EncryptedLoginToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedLoginToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PasswordMethod != global::Authentication.PasswordMethod.Entered) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PasswordMethod);
      }
      if (AuthResponse.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AuthResponse);
      }
      if (EncryptedLoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedLoginToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateAuthHashRequest other) {
      if (other == null) {
        return;
      }
      if (other.PasswordMethod != global::Authentication.PasswordMethod.Entered) {
        PasswordMethod = other.PasswordMethod;
      }
      if (other.AuthResponse.Length != 0) {
        AuthResponse = other.AuthResponse;
      }
      if (other.EncryptedLoginToken.Length != 0) {
        EncryptedLoginToken = other.EncryptedLoginToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PasswordMethod = (global::Authentication.PasswordMethod) input.ReadEnum();
            break;
          }
          case 18: {
            AuthResponse = input.ReadBytes();
            break;
          }
          case 26: {
            EncryptedLoginToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TwoFactorChannelInfo : pb::IMessage<TwoFactorChannelInfo> {
    private static readonly pb::MessageParser<TwoFactorChannelInfo> _parser = new pb::MessageParser<TwoFactorChannelInfo>(() => new TwoFactorChannelInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwoFactorChannelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorChannelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorChannelInfo(TwoFactorChannelInfo other) : this() {
      channelType_ = other.channelType_;
      channelUid_ = other.channelUid_;
      channelName_ = other.channelName_;
      challenge_ = other.challenge_;
      capabilities_ = other.capabilities_.Clone();
      phoneNumber_ = other.phoneNumber_;
      maxExpiration_ = other.maxExpiration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorChannelInfo Clone() {
      return new TwoFactorChannelInfo(this);
    }

    /// <summary>Field number for the "channelType" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private global::Authentication.TwoFactorChannelType channelType_ = global::Authentication.TwoFactorChannelType.TwoFaCtNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.TwoFactorChannelType ChannelType {
      get { return channelType_; }
      set {
        channelType_ = value;
      }
    }

    /// <summary>Field number for the "channel_uid" field.</summary>
    public const int ChannelUidFieldNumber = 2;
    private pb::ByteString channelUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChannelUid {
      get { return channelUid_; }
      set {
        channelUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channelName" field.</summary>
    public const int ChannelNameFieldNumber = 3;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 4;
    private string challenge_ = "";
    /// <summary>
    /// for security keys
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capabilities" field.</summary>
    public const int CapabilitiesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_capabilities_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> capabilities_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// for DUO
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Capabilities {
      get { return capabilities_; }
    }

    /// <summary>Field number for the "phoneNumber" field.</summary>
    public const int PhoneNumberFieldNumber = 6;
    private string phoneNumber_ = "";
    /// <summary>
    /// for SMS and DUO
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneNumber {
      get { return phoneNumber_; }
      set {
        phoneNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxExpiration" field.</summary>
    public const int MaxExpirationFieldNumber = 7;
    private global::Authentication.TwoFactorExpiration maxExpiration_ = global::Authentication.TwoFactorExpiration.TwoFaExpImmediately;
    /// <summary>
    /// maximum allowed expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.TwoFactorExpiration MaxExpiration {
      get { return maxExpiration_; }
      set {
        maxExpiration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwoFactorChannelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwoFactorChannelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelType != other.ChannelType) return false;
      if (ChannelUid != other.ChannelUid) return false;
      if (ChannelName != other.ChannelName) return false;
      if (Challenge != other.Challenge) return false;
      if(!capabilities_.Equals(other.capabilities_)) return false;
      if (PhoneNumber != other.PhoneNumber) return false;
      if (MaxExpiration != other.MaxExpiration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelType != global::Authentication.TwoFactorChannelType.TwoFaCtNone) hash ^= ChannelType.GetHashCode();
      if (ChannelUid.Length != 0) hash ^= ChannelUid.GetHashCode();
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      hash ^= capabilities_.GetHashCode();
      if (PhoneNumber.Length != 0) hash ^= PhoneNumber.GetHashCode();
      if (MaxExpiration != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) hash ^= MaxExpiration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelType != global::Authentication.TwoFactorChannelType.TwoFaCtNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (ChannelUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChannelUid);
      }
      if (ChannelName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelName);
      }
      if (Challenge.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Challenge);
      }
      capabilities_.WriteTo(output, _repeated_capabilities_codec);
      if (PhoneNumber.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PhoneNumber);
      }
      if (MaxExpiration != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) {
        output.WriteRawTag(56);
        output.WriteEnum((int) MaxExpiration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelType != global::Authentication.TwoFactorChannelType.TwoFaCtNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (ChannelUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChannelUid);
      }
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Challenge);
      }
      size += capabilities_.CalculateSize(_repeated_capabilities_codec);
      if (PhoneNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneNumber);
      }
      if (MaxExpiration != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MaxExpiration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwoFactorChannelInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChannelType != global::Authentication.TwoFactorChannelType.TwoFaCtNone) {
        ChannelType = other.ChannelType;
      }
      if (other.ChannelUid.Length != 0) {
        ChannelUid = other.ChannelUid;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
      capabilities_.Add(other.capabilities_);
      if (other.PhoneNumber.Length != 0) {
        PhoneNumber = other.PhoneNumber;
      }
      if (other.MaxExpiration != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) {
        MaxExpiration = other.MaxExpiration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelType = (global::Authentication.TwoFactorChannelType) input.ReadEnum();
            break;
          }
          case 18: {
            ChannelUid = input.ReadBytes();
            break;
          }
          case 26: {
            ChannelName = input.ReadString();
            break;
          }
          case 34: {
            Challenge = input.ReadString();
            break;
          }
          case 42: {
            capabilities_.AddEntriesFrom(input, _repeated_capabilities_codec);
            break;
          }
          case 50: {
            PhoneNumber = input.ReadString();
            break;
          }
          case 56: {
            MaxExpiration = (global::Authentication.TwoFactorExpiration) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TwoFactorValidateRequest : pb::IMessage<TwoFactorValidateRequest> {
    private static readonly pb::MessageParser<TwoFactorValidateRequest> _parser = new pb::MessageParser<TwoFactorValidateRequest>(() => new TwoFactorValidateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwoFactorValidateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorValidateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorValidateRequest(TwoFactorValidateRequest other) : this() {
      encryptedLoginToken_ = other.encryptedLoginToken_;
      valueType_ = other.valueType_;
      value_ = other.value_;
      channelUid_ = other.channelUid_;
      expireIn_ = other.expireIn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorValidateRequest Clone() {
      return new TwoFactorValidateRequest(this);
    }

    /// <summary>Field number for the "encryptedLoginToken" field.</summary>
    public const int EncryptedLoginTokenFieldNumber = 1;
    private pb::ByteString encryptedLoginToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedLoginToken {
      get { return encryptedLoginToken_; }
      set {
        encryptedLoginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valueType" field.</summary>
    public const int ValueTypeFieldNumber = 2;
    private global::Authentication.TwoFactorValueType valueType_ = global::Authentication.TwoFactorValueType.TwoFaCodeNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.TwoFactorValueType ValueType {
      get { return valueType_; }
      set {
        valueType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_uid" field.</summary>
    public const int ChannelUidFieldNumber = 4;
    private pb::ByteString channelUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChannelUid {
      get { return channelUid_; }
      set {
        channelUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expireIn" field.</summary>
    public const int ExpireInFieldNumber = 5;
    private global::Authentication.TwoFactorExpiration expireIn_ = global::Authentication.TwoFactorExpiration.TwoFaExpImmediately;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.TwoFactorExpiration ExpireIn {
      get { return expireIn_; }
      set {
        expireIn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwoFactorValidateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwoFactorValidateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedLoginToken != other.EncryptedLoginToken) return false;
      if (ValueType != other.ValueType) return false;
      if (Value != other.Value) return false;
      if (ChannelUid != other.ChannelUid) return false;
      if (ExpireIn != other.ExpireIn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedLoginToken.Length != 0) hash ^= EncryptedLoginToken.GetHashCode();
      if (ValueType != global::Authentication.TwoFactorValueType.TwoFaCodeNone) hash ^= ValueType.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (ChannelUid.Length != 0) hash ^= ChannelUid.GetHashCode();
      if (ExpireIn != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) hash ^= ExpireIn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedLoginToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedLoginToken);
      }
      if (ValueType != global::Authentication.TwoFactorValueType.TwoFaCodeNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ValueType);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (ChannelUid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ChannelUid);
      }
      if (ExpireIn != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ExpireIn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedLoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedLoginToken);
      }
      if (ValueType != global::Authentication.TwoFactorValueType.TwoFaCodeNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValueType);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (ChannelUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChannelUid);
      }
      if (ExpireIn != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExpireIn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwoFactorValidateRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedLoginToken.Length != 0) {
        EncryptedLoginToken = other.EncryptedLoginToken;
      }
      if (other.ValueType != global::Authentication.TwoFactorValueType.TwoFaCodeNone) {
        ValueType = other.ValueType;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.ChannelUid.Length != 0) {
        ChannelUid = other.ChannelUid;
      }
      if (other.ExpireIn != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) {
        ExpireIn = other.ExpireIn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedLoginToken = input.ReadBytes();
            break;
          }
          case 16: {
            ValueType = (global::Authentication.TwoFactorValueType) input.ReadEnum();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 34: {
            ChannelUid = input.ReadBytes();
            break;
          }
          case 40: {
            ExpireIn = (global::Authentication.TwoFactorExpiration) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TwoFactorValidateResponse : pb::IMessage<TwoFactorValidateResponse> {
    private static readonly pb::MessageParser<TwoFactorValidateResponse> _parser = new pb::MessageParser<TwoFactorValidateResponse>(() => new TwoFactorValidateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwoFactorValidateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorValidateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorValidateResponse(TwoFactorValidateResponse other) : this() {
      encryptedLoginToken_ = other.encryptedLoginToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorValidateResponse Clone() {
      return new TwoFactorValidateResponse(this);
    }

    /// <summary>Field number for the "encryptedLoginToken" field.</summary>
    public const int EncryptedLoginTokenFieldNumber = 1;
    private pb::ByteString encryptedLoginToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedLoginToken {
      get { return encryptedLoginToken_; }
      set {
        encryptedLoginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwoFactorValidateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwoFactorValidateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedLoginToken != other.EncryptedLoginToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedLoginToken.Length != 0) hash ^= EncryptedLoginToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedLoginToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedLoginToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedLoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedLoginToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwoFactorValidateResponse other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedLoginToken.Length != 0) {
        EncryptedLoginToken = other.EncryptedLoginToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedLoginToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TwoFactorSendPushRequest : pb::IMessage<TwoFactorSendPushRequest> {
    private static readonly pb::MessageParser<TwoFactorSendPushRequest> _parser = new pb::MessageParser<TwoFactorSendPushRequest>(() => new TwoFactorSendPushRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwoFactorSendPushRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorSendPushRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorSendPushRequest(TwoFactorSendPushRequest other) : this() {
      encryptedLoginToken_ = other.encryptedLoginToken_;
      pushType_ = other.pushType_;
      channelUid_ = other.channelUid_;
      expireIn_ = other.expireIn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoFactorSendPushRequest Clone() {
      return new TwoFactorSendPushRequest(this);
    }

    /// <summary>Field number for the "encryptedLoginToken" field.</summary>
    public const int EncryptedLoginTokenFieldNumber = 1;
    private pb::ByteString encryptedLoginToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedLoginToken {
      get { return encryptedLoginToken_; }
      set {
        encryptedLoginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pushType" field.</summary>
    public const int PushTypeFieldNumber = 2;
    private global::Authentication.TwoFactorPushType pushType_ = global::Authentication.TwoFactorPushType.TwoFaPushNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.TwoFactorPushType PushType {
      get { return pushType_; }
      set {
        pushType_ = value;
      }
    }

    /// <summary>Field number for the "channel_uid" field.</summary>
    public const int ChannelUidFieldNumber = 3;
    private pb::ByteString channelUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChannelUid {
      get { return channelUid_; }
      set {
        channelUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expireIn" field.</summary>
    public const int ExpireInFieldNumber = 4;
    private global::Authentication.TwoFactorExpiration expireIn_ = global::Authentication.TwoFactorExpiration.TwoFaExpImmediately;
    /// <summary>
    /// for TWO_FA_PUSH_KEEPER and TWO_FA_PUSH_DUO_PUSH
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.TwoFactorExpiration ExpireIn {
      get { return expireIn_; }
      set {
        expireIn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwoFactorSendPushRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwoFactorSendPushRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedLoginToken != other.EncryptedLoginToken) return false;
      if (PushType != other.PushType) return false;
      if (ChannelUid != other.ChannelUid) return false;
      if (ExpireIn != other.ExpireIn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedLoginToken.Length != 0) hash ^= EncryptedLoginToken.GetHashCode();
      if (PushType != global::Authentication.TwoFactorPushType.TwoFaPushNone) hash ^= PushType.GetHashCode();
      if (ChannelUid.Length != 0) hash ^= ChannelUid.GetHashCode();
      if (ExpireIn != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) hash ^= ExpireIn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedLoginToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedLoginToken);
      }
      if (PushType != global::Authentication.TwoFactorPushType.TwoFaPushNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PushType);
      }
      if (ChannelUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ChannelUid);
      }
      if (ExpireIn != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ExpireIn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedLoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedLoginToken);
      }
      if (PushType != global::Authentication.TwoFactorPushType.TwoFaPushNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PushType);
      }
      if (ChannelUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChannelUid);
      }
      if (ExpireIn != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExpireIn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwoFactorSendPushRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedLoginToken.Length != 0) {
        EncryptedLoginToken = other.EncryptedLoginToken;
      }
      if (other.PushType != global::Authentication.TwoFactorPushType.TwoFaPushNone) {
        PushType = other.PushType;
      }
      if (other.ChannelUid.Length != 0) {
        ChannelUid = other.ChannelUid;
      }
      if (other.ExpireIn != global::Authentication.TwoFactorExpiration.TwoFaExpImmediately) {
        ExpireIn = other.ExpireIn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedLoginToken = input.ReadBytes();
            break;
          }
          case 16: {
            PushType = (global::Authentication.TwoFactorPushType) input.ReadEnum();
            break;
          }
          case 26: {
            ChannelUid = input.ReadBytes();
            break;
          }
          case 32: {
            ExpireIn = (global::Authentication.TwoFactorExpiration) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class License : pb::IMessage<License> {
    private static readonly pb::MessageParser<License> _parser = new pb::MessageParser<License>(() => new License());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<License> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License(License other) : this() {
      created_ = other.created_;
      expiration_ = other.expiration_;
      licenseStatus_ = other.licenseStatus_;
      paid_ = other.paid_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License Clone() {
      return new License(this);
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 1;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 2;
    private long expiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "licenseStatus" field.</summary>
    public const int LicenseStatusFieldNumber = 3;
    private global::Authentication.LicenseStatus licenseStatus_ = global::Authentication.LicenseStatus.Other;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.LicenseStatus LicenseStatus {
      get { return licenseStatus_; }
      set {
        licenseStatus_ = value;
      }
    }

    /// <summary>Field number for the "paid" field.</summary>
    public const int PaidFieldNumber = 4;
    private bool paid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Paid {
      get { return paid_; }
      set {
        paid_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as License);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(License other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Created != other.Created) return false;
      if (Expiration != other.Expiration) return false;
      if (LicenseStatus != other.LicenseStatus) return false;
      if (Paid != other.Paid) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (Expiration != 0L) hash ^= Expiration.GetHashCode();
      if (LicenseStatus != global::Authentication.LicenseStatus.Other) hash ^= LicenseStatus.GetHashCode();
      if (Paid != false) hash ^= Paid.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Created != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Created);
      }
      if (Expiration != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Expiration);
      }
      if (LicenseStatus != global::Authentication.LicenseStatus.Other) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LicenseStatus);
      }
      if (Paid != false) {
        output.WriteRawTag(32);
        output.WriteBool(Paid);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (Expiration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
      }
      if (LicenseStatus != global::Authentication.LicenseStatus.Other) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LicenseStatus);
      }
      if (Paid != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(License other) {
      if (other == null) {
        return;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.Expiration != 0L) {
        Expiration = other.Expiration;
      }
      if (other.LicenseStatus != global::Authentication.LicenseStatus.Other) {
        LicenseStatus = other.LicenseStatus;
      }
      if (other.Paid != false) {
        Paid = other.Paid;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Created = input.ReadInt64();
            break;
          }
          case 16: {
            Expiration = input.ReadInt64();
            break;
          }
          case 24: {
            LicenseStatus = (global::Authentication.LicenseStatus) input.ReadEnum();
            break;
          }
          case 32: {
            Paid = input.ReadBool();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OwnerlessRecord : pb::IMessage<OwnerlessRecord> {
    private static readonly pb::MessageParser<OwnerlessRecord> _parser = new pb::MessageParser<OwnerlessRecord>(() => new OwnerlessRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OwnerlessRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecord(OwnerlessRecord other) : this() {
      recordUid_ = other.recordUid_;
      recordKey_ = other.recordKey_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecord Clone() {
      return new OwnerlessRecord(this);
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    /// <summary>
    /// used in get request, set request, set response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recordKey" field.</summary>
    public const int RecordKeyFieldNumber = 2;
    private pb::ByteString recordKey_ = pb::ByteString.Empty;
    /// <summary>
    /// used in set request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordKey {
      get { return recordKey_; }
      set {
        recordKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    /// used in set response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OwnerlessRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OwnerlessRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordUid != other.RecordUid) return false;
      if (RecordKey != other.RecordKey) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (RecordKey.Length != 0) hash ^= RecordKey.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordUid);
      }
      if (RecordKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordKey);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (RecordKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordKey);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OwnerlessRecord other) {
      if (other == null) {
        return;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.RecordKey.Length != 0) {
        RecordKey = other.RecordKey;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 18: {
            RecordKey = input.ReadBytes();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OwnerlessRecords : pb::IMessage<OwnerlessRecords> {
    private static readonly pb::MessageParser<OwnerlessRecords> _parser = new pb::MessageParser<OwnerlessRecords>(() => new OwnerlessRecords());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OwnerlessRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecords(OwnerlessRecords other) : this() {
      ownerlessRecord_ = other.ownerlessRecord_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnerlessRecords Clone() {
      return new OwnerlessRecords(this);
    }

    /// <summary>Field number for the "ownerlessRecord" field.</summary>
    public const int OwnerlessRecordFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Authentication.OwnerlessRecord> _repeated_ownerlessRecord_codec
        = pb::FieldCodec.ForMessage(10, global::Authentication.OwnerlessRecord.Parser);
    private readonly pbc::RepeatedField<global::Authentication.OwnerlessRecord> ownerlessRecord_ = new pbc::RepeatedField<global::Authentication.OwnerlessRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.OwnerlessRecord> OwnerlessRecord {
      get { return ownerlessRecord_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OwnerlessRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OwnerlessRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ownerlessRecord_.Equals(other.ownerlessRecord_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ownerlessRecord_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ownerlessRecord_.WriteTo(output, _repeated_ownerlessRecord_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ownerlessRecord_.CalculateSize(_repeated_ownerlessRecord_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OwnerlessRecords other) {
      if (other == null) {
        return;
      }
      ownerlessRecord_.Add(other.ownerlessRecord_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ownerlessRecord_.AddEntriesFrom(input, _repeated_ownerlessRecord_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserAuthRequest : pb::IMessage<UserAuthRequest> {
    private static readonly pb::MessageParser<UserAuthRequest> _parser = new pb::MessageParser<UserAuthRequest>(() => new UserAuthRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAuthRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthRequest(UserAuthRequest other) : this() {
      uid_ = other.uid_;
      salt_ = other.salt_;
      iterations_ = other.iterations_;
      encryptedClientKey_ = other.encryptedClientKey_;
      authHash_ = other.authHash_;
      encryptedDataKey_ = other.encryptedDataKey_;
      loginType_ = other.loginType_;
      name_ = other.name_;
      algorithm_ = other.algorithm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthRequest Clone() {
      return new UserAuthRequest(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private pb::ByteString uid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 2;
    private pb::ByteString salt_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Salt {
      get { return salt_; }
      set {
        salt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iterations" field.</summary>
    public const int IterationsFieldNumber = 3;
    private int iterations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Iterations {
      get { return iterations_; }
      set {
        iterations_ = value;
      }
    }

    /// <summary>Field number for the "encryptedClientKey" field.</summary>
    public const int EncryptedClientKeyFieldNumber = 4;
    private pb::ByteString encryptedClientKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedClientKey {
      get { return encryptedClientKey_; }
      set {
        encryptedClientKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authHash" field.</summary>
    public const int AuthHashFieldNumber = 5;
    private pb::ByteString authHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AuthHash {
      get { return authHash_; }
      set {
        authHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDataKey" field.</summary>
    public const int EncryptedDataKeyFieldNumber = 6;
    private pb::ByteString encryptedDataKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDataKey {
      get { return encryptedDataKey_; }
      set {
        encryptedDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 7;
    private global::Authentication.LoginType loginType_ = global::Authentication.LoginType.Normal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "algorithm" field.</summary>
    public const int AlgorithmFieldNumber = 9;
    private int algorithm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Algorithm {
      get { return algorithm_; }
      set {
        algorithm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAuthRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAuthRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Salt != other.Salt) return false;
      if (Iterations != other.Iterations) return false;
      if (EncryptedClientKey != other.EncryptedClientKey) return false;
      if (AuthHash != other.AuthHash) return false;
      if (EncryptedDataKey != other.EncryptedDataKey) return false;
      if (LoginType != other.LoginType) return false;
      if (Name != other.Name) return false;
      if (Algorithm != other.Algorithm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Salt.Length != 0) hash ^= Salt.GetHashCode();
      if (Iterations != 0) hash ^= Iterations.GetHashCode();
      if (EncryptedClientKey.Length != 0) hash ^= EncryptedClientKey.GetHashCode();
      if (AuthHash.Length != 0) hash ^= AuthHash.GetHashCode();
      if (EncryptedDataKey.Length != 0) hash ^= EncryptedDataKey.GetHashCode();
      if (LoginType != global::Authentication.LoginType.Normal) hash ^= LoginType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Algorithm != 0) hash ^= Algorithm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Uid);
      }
      if (Salt.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Salt);
      }
      if (Iterations != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Iterations);
      }
      if (EncryptedClientKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedClientKey);
      }
      if (AuthHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(AuthHash);
      }
      if (EncryptedDataKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(EncryptedDataKey);
      }
      if (LoginType != global::Authentication.LoginType.Normal) {
        output.WriteRawTag(56);
        output.WriteEnum((int) LoginType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (Algorithm != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Algorithm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Uid);
      }
      if (Salt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Salt);
      }
      if (Iterations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Iterations);
      }
      if (EncryptedClientKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedClientKey);
      }
      if (AuthHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AuthHash);
      }
      if (EncryptedDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDataKey);
      }
      if (LoginType != global::Authentication.LoginType.Normal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Algorithm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Algorithm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAuthRequest other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Salt.Length != 0) {
        Salt = other.Salt;
      }
      if (other.Iterations != 0) {
        Iterations = other.Iterations;
      }
      if (other.EncryptedClientKey.Length != 0) {
        EncryptedClientKey = other.EncryptedClientKey;
      }
      if (other.AuthHash.Length != 0) {
        AuthHash = other.AuthHash;
      }
      if (other.EncryptedDataKey.Length != 0) {
        EncryptedDataKey = other.EncryptedDataKey;
      }
      if (other.LoginType != global::Authentication.LoginType.Normal) {
        LoginType = other.LoginType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Algorithm != 0) {
        Algorithm = other.Algorithm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadBytes();
            break;
          }
          case 18: {
            Salt = input.ReadBytes();
            break;
          }
          case 24: {
            Iterations = input.ReadInt32();
            break;
          }
          case 34: {
            EncryptedClientKey = input.ReadBytes();
            break;
          }
          case 42: {
            AuthHash = input.ReadBytes();
            break;
          }
          case 50: {
            EncryptedDataKey = input.ReadBytes();
            break;
          }
          case 56: {
            LoginType = (global::Authentication.LoginType) input.ReadEnum();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            Algorithm = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UidRequest : pb::IMessage<UidRequest> {
    private static readonly pb::MessageParser<UidRequest> _parser = new pb::MessageParser<UidRequest>(() => new UidRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UidRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UidRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UidRequest(UidRequest other) : this() {
      uid_ = other.uid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UidRequest Clone() {
      return new UidRequest(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_uid_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> uid_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Uid {
      get { return uid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UidRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UidRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!uid_.Equals(other.uid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= uid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uid_.WriteTo(output, _repeated_uid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uid_.CalculateSize(_repeated_uid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UidRequest other) {
      if (other == null) {
        return;
      }
      uid_.Add(other.uid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            uid_.AddEntriesFrom(input, _repeated_uid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceUpdateRequest : pb::IMessage<DeviceUpdateRequest> {
    private static readonly pb::MessageParser<DeviceUpdateRequest> _parser = new pb::MessageParser<DeviceUpdateRequest>(() => new DeviceUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceUpdateRequest(DeviceUpdateRequest other) : this() {
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      clientVersion_ = other.clientVersion_;
      deviceName_ = other.deviceName_;
      devicePublicKey_ = other.devicePublicKey_;
      deviceStatus_ = other.deviceStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceUpdateRequest Clone() {
      return new DeviceUpdateRequest(this);
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 1;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceName" field.</summary>
    public const int DeviceNameFieldNumber = 3;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "devicePublicKey" field.</summary>
    public const int DevicePublicKeyFieldNumber = 4;
    private pb::ByteString devicePublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DevicePublicKey {
      get { return devicePublicKey_; }
      set {
        devicePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceStatus" field.</summary>
    public const int DeviceStatusFieldNumber = 5;
    private global::Authentication.DeviceStatus deviceStatus_ = global::Authentication.DeviceStatus.DeviceNeedsApproval;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.DeviceStatus DeviceStatus {
      get { return deviceStatus_; }
      set {
        deviceStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (DeviceName != other.DeviceName) return false;
      if (DevicePublicKey != other.DevicePublicKey) return false;
      if (DeviceStatus != other.DeviceStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (DevicePublicKey.Length != 0) hash ^= DevicePublicKey.GetHashCode();
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) hash ^= DeviceStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientVersion);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceName);
      }
      if (DevicePublicKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(DevicePublicKey);
      }
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DeviceStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (DevicePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DevicePublicKey);
      }
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.DevicePublicKey.Length != 0) {
        DevicePublicKey = other.DevicePublicKey;
      }
      if (other.DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        DeviceStatus = other.DeviceStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 18: {
            ClientVersion = input.ReadString();
            break;
          }
          case 26: {
            DeviceName = input.ReadString();
            break;
          }
          case 34: {
            DevicePublicKey = input.ReadBytes();
            break;
          }
          case 40: {
            DeviceStatus = (global::Authentication.DeviceStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterDeviceInRegionRequest : pb::IMessage<RegisterDeviceInRegionRequest> {
    private static readonly pb::MessageParser<RegisterDeviceInRegionRequest> _parser = new pb::MessageParser<RegisterDeviceInRegionRequest>(() => new RegisterDeviceInRegionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterDeviceInRegionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDeviceInRegionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDeviceInRegionRequest(RegisterDeviceInRegionRequest other) : this() {
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      clientVersion_ = other.clientVersion_;
      deviceName_ = other.deviceName_;
      devicePublicKey_ = other.devicePublicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDeviceInRegionRequest Clone() {
      return new RegisterDeviceInRegionRequest(this);
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 1;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceName" field.</summary>
    public const int DeviceNameFieldNumber = 3;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "devicePublicKey" field.</summary>
    public const int DevicePublicKeyFieldNumber = 4;
    private pb::ByteString devicePublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DevicePublicKey {
      get { return devicePublicKey_; }
      set {
        devicePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterDeviceInRegionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterDeviceInRegionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (DeviceName != other.DeviceName) return false;
      if (DevicePublicKey != other.DevicePublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (DevicePublicKey.Length != 0) hash ^= DevicePublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientVersion);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceName);
      }
      if (DevicePublicKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(DevicePublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (DevicePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DevicePublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterDeviceInRegionRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.DevicePublicKey.Length != 0) {
        DevicePublicKey = other.DevicePublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 18: {
            ClientVersion = input.ReadString();
            break;
          }
          case 26: {
            DeviceName = input.ReadString();
            break;
          }
          case 34: {
            DevicePublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegistrationRequest : pb::IMessage<RegistrationRequest> {
    private static readonly pb::MessageParser<RegistrationRequest> _parser = new pb::MessageParser<RegistrationRequest>(() => new RegistrationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistrationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationRequest(RegistrationRequest other) : this() {
      authRequest_ = other.authRequest_ != null ? other.authRequest_.Clone() : null;
      userAuthRequest_ = other.userAuthRequest_ != null ? other.userAuthRequest_.Clone() : null;
      encryptedClientKey_ = other.encryptedClientKey_;
      encryptedPrivateKey_ = other.encryptedPrivateKey_;
      publicKey_ = other.publicKey_;
      verificationCode_ = other.verificationCode_;
      deprecatedAuthHashHash_ = other.deprecatedAuthHashHash_;
      deprecatedEncryptedClientKey_ = other.deprecatedEncryptedClientKey_;
      deprecatedEncryptedPrivateKey_ = other.deprecatedEncryptedPrivateKey_;
      deprecatedEncryptionParams_ = other.deprecatedEncryptionParams_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationRequest Clone() {
      return new RegistrationRequest(this);
    }

    /// <summary>Field number for the "authRequest" field.</summary>
    public const int AuthRequestFieldNumber = 1;
    private global::Authentication.AuthRequest authRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.AuthRequest AuthRequest {
      get { return authRequest_; }
      set {
        authRequest_ = value;
      }
    }

    /// <summary>Field number for the "userAuthRequest" field.</summary>
    public const int UserAuthRequestFieldNumber = 2;
    private global::Authentication.UserAuthRequest userAuthRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.UserAuthRequest UserAuthRequest {
      get { return userAuthRequest_; }
      set {
        userAuthRequest_ = value;
      }
    }

    /// <summary>Field number for the "encryptedClientKey" field.</summary>
    public const int EncryptedClientKeyFieldNumber = 3;
    private pb::ByteString encryptedClientKey_ = pb::ByteString.Empty;
    /// <summary>
    /// encrypted with the data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedClientKey {
      get { return encryptedClientKey_; }
      set {
        encryptedClientKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedPrivateKey" field.</summary>
    public const int EncryptedPrivateKeyFieldNumber = 4;
    private pb::ByteString encryptedPrivateKey_ = pb::ByteString.Empty;
    /// <summary>
    /// encrypted with the data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedPrivateKey {
      get { return encryptedPrivateKey_; }
      set {
        encryptedPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 5;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verificationCode" field.</summary>
    public const int VerificationCodeFieldNumber = 6;
    private string verificationCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerificationCode {
      get { return verificationCode_; }
      set {
        verificationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecatedAuthHashHash" field.</summary>
    public const int DeprecatedAuthHashHashFieldNumber = 7;
    private pb::ByteString deprecatedAuthHashHash_ = pb::ByteString.Empty;
    /// <summary>
    /// these will be ignored once the v2 clients are obsolete
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeprecatedAuthHashHash {
      get { return deprecatedAuthHashHash_; }
      set {
        deprecatedAuthHashHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecatedEncryptedClientKey" field.</summary>
    public const int DeprecatedEncryptedClientKeyFieldNumber = 8;
    private pb::ByteString deprecatedEncryptedClientKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeprecatedEncryptedClientKey {
      get { return deprecatedEncryptedClientKey_; }
      set {
        deprecatedEncryptedClientKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecatedEncryptedPrivateKey" field.</summary>
    public const int DeprecatedEncryptedPrivateKeyFieldNumber = 9;
    private pb::ByteString deprecatedEncryptedPrivateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeprecatedEncryptedPrivateKey {
      get { return deprecatedEncryptedPrivateKey_; }
      set {
        deprecatedEncryptedPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecatedEncryptionParams" field.</summary>
    public const int DeprecatedEncryptionParamsFieldNumber = 10;
    private pb::ByteString deprecatedEncryptionParams_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeprecatedEncryptionParams {
      get { return deprecatedEncryptionParams_; }
      set {
        deprecatedEncryptionParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistrationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistrationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AuthRequest, other.AuthRequest)) return false;
      if (!object.Equals(UserAuthRequest, other.UserAuthRequest)) return false;
      if (EncryptedClientKey != other.EncryptedClientKey) return false;
      if (EncryptedPrivateKey != other.EncryptedPrivateKey) return false;
      if (PublicKey != other.PublicKey) return false;
      if (VerificationCode != other.VerificationCode) return false;
      if (DeprecatedAuthHashHash != other.DeprecatedAuthHashHash) return false;
      if (DeprecatedEncryptedClientKey != other.DeprecatedEncryptedClientKey) return false;
      if (DeprecatedEncryptedPrivateKey != other.DeprecatedEncryptedPrivateKey) return false;
      if (DeprecatedEncryptionParams != other.DeprecatedEncryptionParams) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (authRequest_ != null) hash ^= AuthRequest.GetHashCode();
      if (userAuthRequest_ != null) hash ^= UserAuthRequest.GetHashCode();
      if (EncryptedClientKey.Length != 0) hash ^= EncryptedClientKey.GetHashCode();
      if (EncryptedPrivateKey.Length != 0) hash ^= EncryptedPrivateKey.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (VerificationCode.Length != 0) hash ^= VerificationCode.GetHashCode();
      if (DeprecatedAuthHashHash.Length != 0) hash ^= DeprecatedAuthHashHash.GetHashCode();
      if (DeprecatedEncryptedClientKey.Length != 0) hash ^= DeprecatedEncryptedClientKey.GetHashCode();
      if (DeprecatedEncryptedPrivateKey.Length != 0) hash ^= DeprecatedEncryptedPrivateKey.GetHashCode();
      if (DeprecatedEncryptionParams.Length != 0) hash ^= DeprecatedEncryptionParams.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (authRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AuthRequest);
      }
      if (userAuthRequest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserAuthRequest);
      }
      if (EncryptedClientKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedClientKey);
      }
      if (EncryptedPrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedPrivateKey);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PublicKey);
      }
      if (VerificationCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VerificationCode);
      }
      if (DeprecatedAuthHashHash.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(DeprecatedAuthHashHash);
      }
      if (DeprecatedEncryptedClientKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(DeprecatedEncryptedClientKey);
      }
      if (DeprecatedEncryptedPrivateKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(DeprecatedEncryptedPrivateKey);
      }
      if (DeprecatedEncryptionParams.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(DeprecatedEncryptionParams);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (authRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthRequest);
      }
      if (userAuthRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAuthRequest);
      }
      if (EncryptedClientKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedClientKey);
      }
      if (EncryptedPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedPrivateKey);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (VerificationCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerificationCode);
      }
      if (DeprecatedAuthHashHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeprecatedAuthHashHash);
      }
      if (DeprecatedEncryptedClientKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeprecatedEncryptedClientKey);
      }
      if (DeprecatedEncryptedPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeprecatedEncryptedPrivateKey);
      }
      if (DeprecatedEncryptionParams.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeprecatedEncryptionParams);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistrationRequest other) {
      if (other == null) {
        return;
      }
      if (other.authRequest_ != null) {
        if (authRequest_ == null) {
          AuthRequest = new global::Authentication.AuthRequest();
        }
        AuthRequest.MergeFrom(other.AuthRequest);
      }
      if (other.userAuthRequest_ != null) {
        if (userAuthRequest_ == null) {
          UserAuthRequest = new global::Authentication.UserAuthRequest();
        }
        UserAuthRequest.MergeFrom(other.UserAuthRequest);
      }
      if (other.EncryptedClientKey.Length != 0) {
        EncryptedClientKey = other.EncryptedClientKey;
      }
      if (other.EncryptedPrivateKey.Length != 0) {
        EncryptedPrivateKey = other.EncryptedPrivateKey;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.VerificationCode.Length != 0) {
        VerificationCode = other.VerificationCode;
      }
      if (other.DeprecatedAuthHashHash.Length != 0) {
        DeprecatedAuthHashHash = other.DeprecatedAuthHashHash;
      }
      if (other.DeprecatedEncryptedClientKey.Length != 0) {
        DeprecatedEncryptedClientKey = other.DeprecatedEncryptedClientKey;
      }
      if (other.DeprecatedEncryptedPrivateKey.Length != 0) {
        DeprecatedEncryptedPrivateKey = other.DeprecatedEncryptedPrivateKey;
      }
      if (other.DeprecatedEncryptionParams.Length != 0) {
        DeprecatedEncryptionParams = other.DeprecatedEncryptionParams;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (authRequest_ == null) {
              AuthRequest = new global::Authentication.AuthRequest();
            }
            input.ReadMessage(AuthRequest);
            break;
          }
          case 18: {
            if (userAuthRequest_ == null) {
              UserAuthRequest = new global::Authentication.UserAuthRequest();
            }
            input.ReadMessage(UserAuthRequest);
            break;
          }
          case 26: {
            EncryptedClientKey = input.ReadBytes();
            break;
          }
          case 34: {
            EncryptedPrivateKey = input.ReadBytes();
            break;
          }
          case 42: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 50: {
            VerificationCode = input.ReadString();
            break;
          }
          case 58: {
            DeprecatedAuthHashHash = input.ReadBytes();
            break;
          }
          case 66: {
            DeprecatedEncryptedClientKey = input.ReadBytes();
            break;
          }
          case 74: {
            DeprecatedEncryptedPrivateKey = input.ReadBytes();
            break;
          }
          case 82: {
            DeprecatedEncryptionParams = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConvertUserToV3Request : pb::IMessage<ConvertUserToV3Request> {
    private static readonly pb::MessageParser<ConvertUserToV3Request> _parser = new pb::MessageParser<ConvertUserToV3Request>(() => new ConvertUserToV3Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvertUserToV3Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertUserToV3Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertUserToV3Request(ConvertUserToV3Request other) : this() {
      authRequest_ = other.authRequest_ != null ? other.authRequest_.Clone() : null;
      userAuthRequest_ = other.userAuthRequest_ != null ? other.userAuthRequest_.Clone() : null;
      encryptedClientKey_ = other.encryptedClientKey_;
      encryptedPrivateKey_ = other.encryptedPrivateKey_;
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertUserToV3Request Clone() {
      return new ConvertUserToV3Request(this);
    }

    /// <summary>Field number for the "authRequest" field.</summary>
    public const int AuthRequestFieldNumber = 1;
    private global::Authentication.AuthRequest authRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.AuthRequest AuthRequest {
      get { return authRequest_; }
      set {
        authRequest_ = value;
      }
    }

    /// <summary>Field number for the "userAuthRequest" field.</summary>
    public const int UserAuthRequestFieldNumber = 2;
    private global::Authentication.UserAuthRequest userAuthRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.UserAuthRequest UserAuthRequest {
      get { return userAuthRequest_; }
      set {
        userAuthRequest_ = value;
      }
    }

    /// <summary>Field number for the "encryptedClientKey" field.</summary>
    public const int EncryptedClientKeyFieldNumber = 3;
    private pb::ByteString encryptedClientKey_ = pb::ByteString.Empty;
    /// <summary>
    /// gcm encrypted with the data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedClientKey {
      get { return encryptedClientKey_; }
      set {
        encryptedClientKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedPrivateKey" field.</summary>
    public const int EncryptedPrivateKeyFieldNumber = 4;
    private pb::ByteString encryptedPrivateKey_ = pb::ByteString.Empty;
    /// <summary>
    /// gcm encrypted with the data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedPrivateKey {
      get { return encryptedPrivateKey_; }
      set {
        encryptedPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 5;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// TODO add alternate passwords
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvertUserToV3Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvertUserToV3Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AuthRequest, other.AuthRequest)) return false;
      if (!object.Equals(UserAuthRequest, other.UserAuthRequest)) return false;
      if (EncryptedClientKey != other.EncryptedClientKey) return false;
      if (EncryptedPrivateKey != other.EncryptedPrivateKey) return false;
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (authRequest_ != null) hash ^= AuthRequest.GetHashCode();
      if (userAuthRequest_ != null) hash ^= UserAuthRequest.GetHashCode();
      if (EncryptedClientKey.Length != 0) hash ^= EncryptedClientKey.GetHashCode();
      if (EncryptedPrivateKey.Length != 0) hash ^= EncryptedPrivateKey.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (authRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AuthRequest);
      }
      if (userAuthRequest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserAuthRequest);
      }
      if (EncryptedClientKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedClientKey);
      }
      if (EncryptedPrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedPrivateKey);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (authRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthRequest);
      }
      if (userAuthRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAuthRequest);
      }
      if (EncryptedClientKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedClientKey);
      }
      if (EncryptedPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedPrivateKey);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvertUserToV3Request other) {
      if (other == null) {
        return;
      }
      if (other.authRequest_ != null) {
        if (authRequest_ == null) {
          AuthRequest = new global::Authentication.AuthRequest();
        }
        AuthRequest.MergeFrom(other.AuthRequest);
      }
      if (other.userAuthRequest_ != null) {
        if (userAuthRequest_ == null) {
          UserAuthRequest = new global::Authentication.UserAuthRequest();
        }
        UserAuthRequest.MergeFrom(other.UserAuthRequest);
      }
      if (other.EncryptedClientKey.Length != 0) {
        EncryptedClientKey = other.EncryptedClientKey;
      }
      if (other.EncryptedPrivateKey.Length != 0) {
        EncryptedPrivateKey = other.EncryptedPrivateKey;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (authRequest_ == null) {
              AuthRequest = new global::Authentication.AuthRequest();
            }
            input.ReadMessage(AuthRequest);
            break;
          }
          case 18: {
            if (userAuthRequest_ == null) {
              UserAuthRequest = new global::Authentication.UserAuthRequest();
            }
            input.ReadMessage(UserAuthRequest);
            break;
          }
          case 26: {
            EncryptedClientKey = input.ReadBytes();
            break;
          }
          case 34: {
            EncryptedPrivateKey = input.ReadBytes();
            break;
          }
          case 42: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RevisionResponse : pb::IMessage<RevisionResponse> {
    private static readonly pb::MessageParser<RevisionResponse> _parser = new pb::MessageParser<RevisionResponse>(() => new RevisionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevisionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevisionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevisionResponse(RevisionResponse other) : this() {
      revision_ = other.revision_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevisionResponse Clone() {
      return new RevisionResponse(this);
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 1;
    private long revision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevisionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevisionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Revision != other.Revision) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Revision != 0L) hash ^= Revision.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Revision != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Revision);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Revision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Revision);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevisionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Revision != 0L) {
        Revision = other.Revision;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Revision = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeEmailRequest : pb::IMessage<ChangeEmailRequest> {
    private static readonly pb::MessageParser<ChangeEmailRequest> _parser = new pb::MessageParser<ChangeEmailRequest>(() => new ChangeEmailRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeEmailRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailRequest(ChangeEmailRequest other) : this() {
      newEmail_ = other.newEmail_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailRequest Clone() {
      return new ChangeEmailRequest(this);
    }

    /// <summary>Field number for the "newEmail" field.</summary>
    public const int NewEmailFieldNumber = 1;
    private string newEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewEmail {
      get { return newEmail_; }
      set {
        newEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeEmailRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeEmailRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewEmail != other.NewEmail) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewEmail.Length != 0) hash ^= NewEmail.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewEmail.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NewEmail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewEmail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewEmail);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeEmailRequest other) {
      if (other == null) {
        return;
      }
      if (other.NewEmail.Length != 0) {
        NewEmail = other.NewEmail;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NewEmail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeEmailResponse : pb::IMessage<ChangeEmailResponse> {
    private static readonly pb::MessageParser<ChangeEmailResponse> _parser = new pb::MessageParser<ChangeEmailResponse>(() => new ChangeEmailResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeEmailResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailResponse(ChangeEmailResponse other) : this() {
      encryptedChangeEmailToken_ = other.encryptedChangeEmailToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEmailResponse Clone() {
      return new ChangeEmailResponse(this);
    }

    /// <summary>Field number for the "encryptedChangeEmailToken" field.</summary>
    public const int EncryptedChangeEmailTokenFieldNumber = 1;
    private pb::ByteString encryptedChangeEmailToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedChangeEmailToken {
      get { return encryptedChangeEmailToken_; }
      set {
        encryptedChangeEmailToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeEmailResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeEmailResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedChangeEmailToken != other.EncryptedChangeEmailToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedChangeEmailToken.Length != 0) hash ^= EncryptedChangeEmailToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedChangeEmailToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedChangeEmailToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedChangeEmailToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedChangeEmailToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeEmailResponse other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedChangeEmailToken.Length != 0) {
        EncryptedChangeEmailToken = other.EncryptedChangeEmailToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedChangeEmailToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmailVerificationLinkResponse : pb::IMessage<EmailVerificationLinkResponse> {
    private static readonly pb::MessageParser<EmailVerificationLinkResponse> _parser = new pb::MessageParser<EmailVerificationLinkResponse>(() => new EmailVerificationLinkResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmailVerificationLinkResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmailVerificationLinkResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmailVerificationLinkResponse(EmailVerificationLinkResponse other) : this() {
      emailVerified_ = other.emailVerified_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmailVerificationLinkResponse Clone() {
      return new EmailVerificationLinkResponse(this);
    }

    /// <summary>Field number for the "emailVerified" field.</summary>
    public const int EmailVerifiedFieldNumber = 1;
    private bool emailVerified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EmailVerified {
      get { return emailVerified_; }
      set {
        emailVerified_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmailVerificationLinkResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmailVerificationLinkResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmailVerified != other.EmailVerified) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmailVerified != false) hash ^= EmailVerified.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmailVerified != false) {
        output.WriteRawTag(8);
        output.WriteBool(EmailVerified);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmailVerified != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmailVerificationLinkResponse other) {
      if (other == null) {
        return;
      }
      if (other.EmailVerified != false) {
        EmailVerified = other.EmailVerified;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EmailVerified = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// used in SecurityDataReqeust
  /// </summary>
  public sealed partial class SecurityData : pb::IMessage<SecurityData> {
    private static readonly pb::MessageParser<SecurityData> _parser = new pb::MessageParser<SecurityData>(() => new SecurityData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityData(SecurityData other) : this() {
      uid_ = other.uid_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityData Clone() {
      return new SecurityData(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private pb::ByteString uid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Uid);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Uid);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityData other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadBytes();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// to update a records security data
  /// </summary>
  public sealed partial class SecurityDataRequest : pb::IMessage<SecurityDataRequest> {
    private static readonly pb::MessageParser<SecurityDataRequest> _parser = new pb::MessageParser<SecurityDataRequest>(() => new SecurityDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDataRequest(SecurityDataRequest other) : this() {
      recordSecurityData_ = other.recordSecurityData_.Clone();
      masterPasswordSecurityData_ = other.masterPasswordSecurityData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDataRequest Clone() {
      return new SecurityDataRequest(this);
    }

    /// <summary>Field number for the "recordSecurityData" field.</summary>
    public const int RecordSecurityDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Authentication.SecurityData> _repeated_recordSecurityData_codec
        = pb::FieldCodec.ForMessage(10, global::Authentication.SecurityData.Parser);
    private readonly pbc::RepeatedField<global::Authentication.SecurityData> recordSecurityData_ = new pbc::RepeatedField<global::Authentication.SecurityData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.SecurityData> RecordSecurityData {
      get { return recordSecurityData_; }
    }

    /// <summary>Field number for the "masterPasswordSecurityData" field.</summary>
    public const int MasterPasswordSecurityDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Authentication.SecurityData> _repeated_masterPasswordSecurityData_codec
        = pb::FieldCodec.ForMessage(18, global::Authentication.SecurityData.Parser);
    private readonly pbc::RepeatedField<global::Authentication.SecurityData> masterPasswordSecurityData_ = new pbc::RepeatedField<global::Authentication.SecurityData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.SecurityData> MasterPasswordSecurityData {
      get { return masterPasswordSecurityData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recordSecurityData_.Equals(other.recordSecurityData_)) return false;
      if(!masterPasswordSecurityData_.Equals(other.masterPasswordSecurityData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recordSecurityData_.GetHashCode();
      hash ^= masterPasswordSecurityData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recordSecurityData_.WriteTo(output, _repeated_recordSecurityData_codec);
      masterPasswordSecurityData_.WriteTo(output, _repeated_masterPasswordSecurityData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recordSecurityData_.CalculateSize(_repeated_recordSecurityData_codec);
      size += masterPasswordSecurityData_.CalculateSize(_repeated_masterPasswordSecurityData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityDataRequest other) {
      if (other == null) {
        return;
      }
      recordSecurityData_.Add(other.recordSecurityData_);
      masterPasswordSecurityData_.Add(other.masterPasswordSecurityData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            recordSecurityData_.AddEntriesFrom(input, _repeated_recordSecurityData_codec);
            break;
          }
          case 18: {
            masterPasswordSecurityData_.AddEntriesFrom(input, _repeated_masterPasswordSecurityData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// if mp or not, by user, include reused passwords
  /// </summary>
  public sealed partial class SecurityReportIncrementalData : pb::IMessage<SecurityReportIncrementalData> {
    private static readonly pb::MessageParser<SecurityReportIncrementalData> _parser = new pb::MessageParser<SecurityReportIncrementalData>(() => new SecurityReportIncrementalData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityReportIncrementalData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportIncrementalData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportIncrementalData(SecurityReportIncrementalData other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      currentSecurityData_ = other.currentSecurityData_;
      currentSecurityDataRevision_ = other.currentSecurityDataRevision_;
      oldSecurityData_ = other.oldSecurityData_;
      oldSecurityDataRevision_ = other.oldSecurityDataRevision_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportIncrementalData Clone() {
      return new SecurityReportIncrementalData(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "currentSecurityData" field.</summary>
    public const int CurrentSecurityDataFieldNumber = 2;
    private pb::ByteString currentSecurityData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CurrentSecurityData {
      get { return currentSecurityData_; }
      set {
        currentSecurityData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentSecurityDataRevision" field.</summary>
    public const int CurrentSecurityDataRevisionFieldNumber = 3;
    private long currentSecurityDataRevision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentSecurityDataRevision {
      get { return currentSecurityDataRevision_; }
      set {
        currentSecurityDataRevision_ = value;
      }
    }

    /// <summary>Field number for the "oldSecurityData" field.</summary>
    public const int OldSecurityDataFieldNumber = 4;
    private pb::ByteString oldSecurityData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OldSecurityData {
      get { return oldSecurityData_; }
      set {
        oldSecurityData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oldSecurityDataRevision" field.</summary>
    public const int OldSecurityDataRevisionFieldNumber = 5;
    private long oldSecurityDataRevision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OldSecurityDataRevision {
      get { return oldSecurityDataRevision_; }
      set {
        oldSecurityDataRevision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityReportIncrementalData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityReportIncrementalData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (CurrentSecurityData != other.CurrentSecurityData) return false;
      if (CurrentSecurityDataRevision != other.CurrentSecurityDataRevision) return false;
      if (OldSecurityData != other.OldSecurityData) return false;
      if (OldSecurityDataRevision != other.OldSecurityDataRevision) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (CurrentSecurityData.Length != 0) hash ^= CurrentSecurityData.GetHashCode();
      if (CurrentSecurityDataRevision != 0L) hash ^= CurrentSecurityDataRevision.GetHashCode();
      if (OldSecurityData.Length != 0) hash ^= OldSecurityData.GetHashCode();
      if (OldSecurityDataRevision != 0L) hash ^= OldSecurityDataRevision.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (CurrentSecurityData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CurrentSecurityData);
      }
      if (CurrentSecurityDataRevision != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurrentSecurityDataRevision);
      }
      if (OldSecurityData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(OldSecurityData);
      }
      if (OldSecurityDataRevision != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(OldSecurityDataRevision);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (CurrentSecurityData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CurrentSecurityData);
      }
      if (CurrentSecurityDataRevision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentSecurityDataRevision);
      }
      if (OldSecurityData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OldSecurityData);
      }
      if (OldSecurityDataRevision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OldSecurityDataRevision);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityReportIncrementalData other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.CurrentSecurityData.Length != 0) {
        CurrentSecurityData = other.CurrentSecurityData;
      }
      if (other.CurrentSecurityDataRevision != 0L) {
        CurrentSecurityDataRevision = other.CurrentSecurityDataRevision;
      }
      if (other.OldSecurityData.Length != 0) {
        OldSecurityData = other.OldSecurityData;
      }
      if (other.OldSecurityDataRevision != 0L) {
        OldSecurityDataRevision = other.OldSecurityDataRevision;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            CurrentSecurityData = input.ReadBytes();
            break;
          }
          case 24: {
            CurrentSecurityDataRevision = input.ReadInt64();
            break;
          }
          case 34: {
            OldSecurityData = input.ReadBytes();
            break;
          }
          case 40: {
            OldSecurityDataRevision = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// used for both get and save
  /// </summary>
  public sealed partial class SecurityReport : pb::IMessage<SecurityReport> {
    private static readonly pb::MessageParser<SecurityReport> _parser = new pb::MessageParser<SecurityReport>(() => new SecurityReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReport(SecurityReport other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      encryptedReportData_ = other.encryptedReportData_;
      revision_ = other.revision_;
      twoFactor_ = other.twoFactor_;
      lastLogin_ = other.lastLogin_;
      numberOfReusedPassword_ = other.numberOfReusedPassword_;
      securityReportIncrementalData_ = other.securityReportIncrementalData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReport Clone() {
      return new SecurityReport(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedReportData" field.</summary>
    public const int EncryptedReportDataFieldNumber = 2;
    private pb::ByteString encryptedReportData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedReportData {
      get { return encryptedReportData_; }
      set {
        encryptedReportData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 3;
    private long revision_;
    /// <summary>
    /// for save this was returned in get, for get this is the saved revision
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    /// <summary>Field number for the "twoFactor" field.</summary>
    public const int TwoFactorFieldNumber = 4;
    private string twoFactor_ = "";
    /// <summary>
    /// for get not save
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TwoFactor {
      get { return twoFactor_; }
      set {
        twoFactor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastLogin" field.</summary>
    public const int LastLoginFieldNumber = 5;
    private long lastLogin_;
    /// <summary>
    /// for get not save
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLogin {
      get { return lastLogin_; }
      set {
        lastLogin_ = value;
      }
    }

    /// <summary>Field number for the "numberOfReusedPassword" field.</summary>
    public const int NumberOfReusedPasswordFieldNumber = 6;
    private int numberOfReusedPassword_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfReusedPassword {
      get { return numberOfReusedPassword_; }
      set {
        numberOfReusedPassword_ = value;
      }
    }

    /// <summary>Field number for the "securityReportIncrementalData" field.</summary>
    public const int SecurityReportIncrementalDataFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Authentication.SecurityReportIncrementalData> _repeated_securityReportIncrementalData_codec
        = pb::FieldCodec.ForMessage(58, global::Authentication.SecurityReportIncrementalData.Parser);
    private readonly pbc::RepeatedField<global::Authentication.SecurityReportIncrementalData> securityReportIncrementalData_ = new pbc::RepeatedField<global::Authentication.SecurityReportIncrementalData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.SecurityReportIncrementalData> SecurityReportIncrementalData {
      get { return securityReportIncrementalData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (EncryptedReportData != other.EncryptedReportData) return false;
      if (Revision != other.Revision) return false;
      if (TwoFactor != other.TwoFactor) return false;
      if (LastLogin != other.LastLogin) return false;
      if (NumberOfReusedPassword != other.NumberOfReusedPassword) return false;
      if(!securityReportIncrementalData_.Equals(other.securityReportIncrementalData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (EncryptedReportData.Length != 0) hash ^= EncryptedReportData.GetHashCode();
      if (Revision != 0L) hash ^= Revision.GetHashCode();
      if (TwoFactor.Length != 0) hash ^= TwoFactor.GetHashCode();
      if (LastLogin != 0L) hash ^= LastLogin.GetHashCode();
      if (NumberOfReusedPassword != 0) hash ^= NumberOfReusedPassword.GetHashCode();
      hash ^= securityReportIncrementalData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (EncryptedReportData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedReportData);
      }
      if (Revision != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Revision);
      }
      if (TwoFactor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TwoFactor);
      }
      if (LastLogin != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastLogin);
      }
      if (NumberOfReusedPassword != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumberOfReusedPassword);
      }
      securityReportIncrementalData_.WriteTo(output, _repeated_securityReportIncrementalData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (EncryptedReportData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedReportData);
      }
      if (Revision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Revision);
      }
      if (TwoFactor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TwoFactor);
      }
      if (LastLogin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLogin);
      }
      if (NumberOfReusedPassword != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfReusedPassword);
      }
      size += securityReportIncrementalData_.CalculateSize(_repeated_securityReportIncrementalData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityReport other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.EncryptedReportData.Length != 0) {
        EncryptedReportData = other.EncryptedReportData;
      }
      if (other.Revision != 0L) {
        Revision = other.Revision;
      }
      if (other.TwoFactor.Length != 0) {
        TwoFactor = other.TwoFactor;
      }
      if (other.LastLogin != 0L) {
        LastLogin = other.LastLogin;
      }
      if (other.NumberOfReusedPassword != 0) {
        NumberOfReusedPassword = other.NumberOfReusedPassword;
      }
      securityReportIncrementalData_.Add(other.securityReportIncrementalData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            EncryptedReportData = input.ReadBytes();
            break;
          }
          case 24: {
            Revision = input.ReadInt64();
            break;
          }
          case 34: {
            TwoFactor = input.ReadString();
            break;
          }
          case 40: {
            LastLogin = input.ReadInt64();
            break;
          }
          case 48: {
            NumberOfReusedPassword = input.ReadInt32();
            break;
          }
          case 58: {
            securityReportIncrementalData_.AddEntriesFrom(input, _repeated_securityReportIncrementalData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SecurityReportSaveRequest : pb::IMessage<SecurityReportSaveRequest> {
    private static readonly pb::MessageParser<SecurityReportSaveRequest> _parser = new pb::MessageParser<SecurityReportSaveRequest>(() => new SecurityReportSaveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityReportSaveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportSaveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportSaveRequest(SecurityReportSaveRequest other) : this() {
      securityReport_ = other.securityReport_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportSaveRequest Clone() {
      return new SecurityReportSaveRequest(this);
    }

    /// <summary>Field number for the "securityReport" field.</summary>
    public const int SecurityReportFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Authentication.SecurityReport> _repeated_securityReport_codec
        = pb::FieldCodec.ForMessage(10, global::Authentication.SecurityReport.Parser);
    private readonly pbc::RepeatedField<global::Authentication.SecurityReport> securityReport_ = new pbc::RepeatedField<global::Authentication.SecurityReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.SecurityReport> SecurityReport {
      get { return securityReport_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityReportSaveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityReportSaveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!securityReport_.Equals(other.securityReport_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= securityReport_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      securityReport_.WriteTo(output, _repeated_securityReport_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += securityReport_.CalculateSize(_repeated_securityReport_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityReportSaveRequest other) {
      if (other == null) {
        return;
      }
      securityReport_.Add(other.securityReport_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            securityReport_.AddEntriesFrom(input, _repeated_securityReport_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SecurityReportRequest : pb::IMessage<SecurityReportRequest> {
    private static readonly pb::MessageParser<SecurityReportRequest> _parser = new pb::MessageParser<SecurityReportRequest>(() => new SecurityReportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportRequest(SecurityReportRequest other) : this() {
      fromPage_ = other.fromPage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportRequest Clone() {
      return new SecurityReportRequest(this);
    }

    /// <summary>Field number for the "fromPage" field.</summary>
    public const int FromPageFieldNumber = 1;
    private long fromPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromPage {
      get { return fromPage_; }
      set {
        fromPage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromPage != other.FromPage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromPage != 0L) hash ^= FromPage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromPage != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FromPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromPage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromPage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.FromPage != 0L) {
        FromPage = other.FromPage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FromPage = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SecurityReportResponse : pb::IMessage<SecurityReportResponse> {
    private static readonly pb::MessageParser<SecurityReportResponse> _parser = new pb::MessageParser<SecurityReportResponse>(() => new SecurityReportResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportResponse(SecurityReportResponse other) : this() {
      enterprisePrivateKey_ = other.enterprisePrivateKey_;
      securityReport_ = other.securityReport_.Clone();
      asOfRevision_ = other.asOfRevision_;
      fromPage_ = other.fromPage_;
      toPage_ = other.toPage_;
      complete_ = other.complete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityReportResponse Clone() {
      return new SecurityReportResponse(this);
    }

    /// <summary>Field number for the "enterprisePrivateKey" field.</summary>
    public const int EnterprisePrivateKeyFieldNumber = 1;
    private pb::ByteString enterprisePrivateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EnterprisePrivateKey {
      get { return enterprisePrivateKey_; }
      set {
        enterprisePrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "securityReport" field.</summary>
    public const int SecurityReportFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Authentication.SecurityReport> _repeated_securityReport_codec
        = pb::FieldCodec.ForMessage(18, global::Authentication.SecurityReport.Parser);
    private readonly pbc::RepeatedField<global::Authentication.SecurityReport> securityReport_ = new pbc::RepeatedField<global::Authentication.SecurityReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.SecurityReport> SecurityReport {
      get { return securityReport_; }
    }

    /// <summary>Field number for the "asOfRevision" field.</summary>
    public const int AsOfRevisionFieldNumber = 3;
    private long asOfRevision_;
    /// <summary>
    /// the revision the data was retrieved for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AsOfRevision {
      get { return asOfRevision_; }
      set {
        asOfRevision_ = value;
      }
    }

    /// <summary>Field number for the "fromPage" field.</summary>
    public const int FromPageFieldNumber = 4;
    private long fromPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromPage {
      get { return fromPage_; }
      set {
        fromPage_ = value;
      }
    }

    /// <summary>Field number for the "toPage" field.</summary>
    public const int ToPageFieldNumber = 5;
    private long toPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ToPage {
      get { return toPage_; }
      set {
        toPage_ = value;
      }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 6;
    private bool complete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterprisePrivateKey != other.EnterprisePrivateKey) return false;
      if(!securityReport_.Equals(other.securityReport_)) return false;
      if (AsOfRevision != other.AsOfRevision) return false;
      if (FromPage != other.FromPage) return false;
      if (ToPage != other.ToPage) return false;
      if (Complete != other.Complete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterprisePrivateKey.Length != 0) hash ^= EnterprisePrivateKey.GetHashCode();
      hash ^= securityReport_.GetHashCode();
      if (AsOfRevision != 0L) hash ^= AsOfRevision.GetHashCode();
      if (FromPage != 0L) hash ^= FromPage.GetHashCode();
      if (ToPage != 0L) hash ^= ToPage.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterprisePrivateKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EnterprisePrivateKey);
      }
      securityReport_.WriteTo(output, _repeated_securityReport_codec);
      if (AsOfRevision != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AsOfRevision);
      }
      if (FromPage != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FromPage);
      }
      if (ToPage != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ToPage);
      }
      if (Complete != false) {
        output.WriteRawTag(48);
        output.WriteBool(Complete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterprisePrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EnterprisePrivateKey);
      }
      size += securityReport_.CalculateSize(_repeated_securityReport_codec);
      if (AsOfRevision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AsOfRevision);
      }
      if (FromPage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromPage);
      }
      if (ToPage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToPage);
      }
      if (Complete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityReportResponse other) {
      if (other == null) {
        return;
      }
      if (other.EnterprisePrivateKey.Length != 0) {
        EnterprisePrivateKey = other.EnterprisePrivateKey;
      }
      securityReport_.Add(other.securityReport_);
      if (other.AsOfRevision != 0L) {
        AsOfRevision = other.AsOfRevision;
      }
      if (other.FromPage != 0L) {
        FromPage = other.FromPage;
      }
      if (other.ToPage != 0L) {
        ToPage = other.ToPage;
      }
      if (other.Complete != false) {
        Complete = other.Complete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EnterprisePrivateKey = input.ReadBytes();
            break;
          }
          case 18: {
            securityReport_.AddEntriesFrom(input, _repeated_securityReport_codec);
            break;
          }
          case 24: {
            AsOfRevision = input.ReadInt64();
            break;
          }
          case 32: {
            FromPage = input.ReadInt64();
            break;
          }
          case 40: {
            ToPage = input.ReadInt64();
            break;
          }
          case 48: {
            Complete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReusedPasswordsRequest : pb::IMessage<ReusedPasswordsRequest> {
    private static readonly pb::MessageParser<ReusedPasswordsRequest> _parser = new pb::MessageParser<ReusedPasswordsRequest>(() => new ReusedPasswordsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReusedPasswordsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReusedPasswordsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReusedPasswordsRequest(ReusedPasswordsRequest other) : this() {
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReusedPasswordsRequest Clone() {
      return new ReusedPasswordsRequest(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReusedPasswordsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReusedPasswordsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReusedPasswordsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SummaryConsoleReport : pb::IMessage<SummaryConsoleReport> {
    private static readonly pb::MessageParser<SummaryConsoleReport> _parser = new pb::MessageParser<SummaryConsoleReport>(() => new SummaryConsoleReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SummaryConsoleReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryConsoleReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryConsoleReport(SummaryConsoleReport other) : this() {
      reportType_ = other.reportType_;
      reportData_ = other.reportData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryConsoleReport Clone() {
      return new SummaryConsoleReport(this);
    }

    /// <summary>Field number for the "reportType" field.</summary>
    public const int ReportTypeFieldNumber = 1;
    private int reportType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReportType {
      get { return reportType_; }
      set {
        reportType_ = value;
      }
    }

    /// <summary>Field number for the "reportData" field.</summary>
    public const int ReportDataFieldNumber = 2;
    private pb::ByteString reportData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReportData {
      get { return reportData_; }
      set {
        reportData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SummaryConsoleReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SummaryConsoleReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReportType != other.ReportType) return false;
      if (ReportData != other.ReportData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReportType != 0) hash ^= ReportType.GetHashCode();
      if (ReportData.Length != 0) hash ^= ReportData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReportType);
      }
      if (ReportData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ReportData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReportType);
      }
      if (ReportData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReportData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SummaryConsoleReport other) {
      if (other == null) {
        return;
      }
      if (other.ReportType != 0) {
        ReportType = other.ReportType;
      }
      if (other.ReportData.Length != 0) {
        ReportData = other.ReportData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReportType = input.ReadInt32();
            break;
          }
          case 18: {
            ReportData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeToKeyTypeOne : pb::IMessage<ChangeToKeyTypeOne> {
    private static readonly pb::MessageParser<ChangeToKeyTypeOne> _parser = new pb::MessageParser<ChangeToKeyTypeOne>(() => new ChangeToKeyTypeOne());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeToKeyTypeOne> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOne() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOne(ChangeToKeyTypeOne other) : this() {
      objectType_ = other.objectType_;
      primaryUid_ = other.primaryUid_;
      secondaryUid_ = other.secondaryUid_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOne Clone() {
      return new ChangeToKeyTypeOne(this);
    }

    /// <summary>Field number for the "objectType" field.</summary>
    public const int ObjectTypeFieldNumber = 1;
    private global::Authentication.ObjectTypes objectType_ = global::Authentication.ObjectTypes.Record;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.ObjectTypes ObjectType {
      get { return objectType_; }
      set {
        objectType_ = value;
      }
    }

    /// <summary>Field number for the "primaryUid" field.</summary>
    public const int PrimaryUidFieldNumber = 2;
    private pb::ByteString primaryUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrimaryUid {
      get { return primaryUid_; }
      set {
        primaryUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secondaryUid" field.</summary>
    public const int SecondaryUidFieldNumber = 3;
    private pb::ByteString secondaryUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SecondaryUid {
      get { return secondaryUid_; }
      set {
        secondaryUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 4;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeToKeyTypeOne);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeToKeyTypeOne other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectType != other.ObjectType) return false;
      if (PrimaryUid != other.PrimaryUid) return false;
      if (SecondaryUid != other.SecondaryUid) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectType != global::Authentication.ObjectTypes.Record) hash ^= ObjectType.GetHashCode();
      if (PrimaryUid.Length != 0) hash ^= PrimaryUid.GetHashCode();
      if (SecondaryUid.Length != 0) hash ^= SecondaryUid.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectType != global::Authentication.ObjectTypes.Record) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ObjectType);
      }
      if (PrimaryUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PrimaryUid);
      }
      if (SecondaryUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SecondaryUid);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectType != global::Authentication.ObjectTypes.Record) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObjectType);
      }
      if (PrimaryUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrimaryUid);
      }
      if (SecondaryUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecondaryUid);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeToKeyTypeOne other) {
      if (other == null) {
        return;
      }
      if (other.ObjectType != global::Authentication.ObjectTypes.Record) {
        ObjectType = other.ObjectType;
      }
      if (other.PrimaryUid.Length != 0) {
        PrimaryUid = other.PrimaryUid;
      }
      if (other.SecondaryUid.Length != 0) {
        SecondaryUid = other.SecondaryUid;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectType = (global::Authentication.ObjectTypes) input.ReadEnum();
            break;
          }
          case 18: {
            PrimaryUid = input.ReadBytes();
            break;
          }
          case 26: {
            SecondaryUid = input.ReadBytes();
            break;
          }
          case 34: {
            Key = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeToKeyTypeOneRequest : pb::IMessage<ChangeToKeyTypeOneRequest> {
    private static readonly pb::MessageParser<ChangeToKeyTypeOneRequest> _parser = new pb::MessageParser<ChangeToKeyTypeOneRequest>(() => new ChangeToKeyTypeOneRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeToKeyTypeOneRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOneRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOneRequest(ChangeToKeyTypeOneRequest other) : this() {
      changeToKeyTypeOne_ = other.changeToKeyTypeOne_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOneRequest Clone() {
      return new ChangeToKeyTypeOneRequest(this);
    }

    /// <summary>Field number for the "changeToKeyTypeOne" field.</summary>
    public const int ChangeToKeyTypeOneFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Authentication.ChangeToKeyTypeOne> _repeated_changeToKeyTypeOne_codec
        = pb::FieldCodec.ForMessage(10, global::Authentication.ChangeToKeyTypeOne.Parser);
    private readonly pbc::RepeatedField<global::Authentication.ChangeToKeyTypeOne> changeToKeyTypeOne_ = new pbc::RepeatedField<global::Authentication.ChangeToKeyTypeOne>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.ChangeToKeyTypeOne> ChangeToKeyTypeOne {
      get { return changeToKeyTypeOne_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeToKeyTypeOneRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeToKeyTypeOneRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!changeToKeyTypeOne_.Equals(other.changeToKeyTypeOne_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= changeToKeyTypeOne_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changeToKeyTypeOne_.WriteTo(output, _repeated_changeToKeyTypeOne_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changeToKeyTypeOne_.CalculateSize(_repeated_changeToKeyTypeOne_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeToKeyTypeOneRequest other) {
      if (other == null) {
        return;
      }
      changeToKeyTypeOne_.Add(other.changeToKeyTypeOne_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            changeToKeyTypeOne_.AddEntriesFrom(input, _repeated_changeToKeyTypeOne_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeToKeyTypeOneStatus : pb::IMessage<ChangeToKeyTypeOneStatus> {
    private static readonly pb::MessageParser<ChangeToKeyTypeOneStatus> _parser = new pb::MessageParser<ChangeToKeyTypeOneStatus>(() => new ChangeToKeyTypeOneStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeToKeyTypeOneStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOneStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOneStatus(ChangeToKeyTypeOneStatus other) : this() {
      uid_ = other.uid_;
      type_ = other.type_;
      status_ = other.status_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOneStatus Clone() {
      return new ChangeToKeyTypeOneStatus(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private pb::ByteString uid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeToKeyTypeOneStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeToKeyTypeOneStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Uid);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Status);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Uid);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeToKeyTypeOneStatus other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadBytes();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeToKeyTypeOneResponse : pb::IMessage<ChangeToKeyTypeOneResponse> {
    private static readonly pb::MessageParser<ChangeToKeyTypeOneResponse> _parser = new pb::MessageParser<ChangeToKeyTypeOneResponse>(() => new ChangeToKeyTypeOneResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeToKeyTypeOneResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOneResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOneResponse(ChangeToKeyTypeOneResponse other) : this() {
      changeToKeyTypeOneStatus_ = other.changeToKeyTypeOneStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeToKeyTypeOneResponse Clone() {
      return new ChangeToKeyTypeOneResponse(this);
    }

    /// <summary>Field number for the "changeToKeyTypeOneStatus" field.</summary>
    public const int ChangeToKeyTypeOneStatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Authentication.ChangeToKeyTypeOneStatus> _repeated_changeToKeyTypeOneStatus_codec
        = pb::FieldCodec.ForMessage(10, global::Authentication.ChangeToKeyTypeOneStatus.Parser);
    private readonly pbc::RepeatedField<global::Authentication.ChangeToKeyTypeOneStatus> changeToKeyTypeOneStatus_ = new pbc::RepeatedField<global::Authentication.ChangeToKeyTypeOneStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.ChangeToKeyTypeOneStatus> ChangeToKeyTypeOneStatus {
      get { return changeToKeyTypeOneStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeToKeyTypeOneResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeToKeyTypeOneResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!changeToKeyTypeOneStatus_.Equals(other.changeToKeyTypeOneStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= changeToKeyTypeOneStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changeToKeyTypeOneStatus_.WriteTo(output, _repeated_changeToKeyTypeOneStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changeToKeyTypeOneStatus_.CalculateSize(_repeated_changeToKeyTypeOneStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeToKeyTypeOneResponse other) {
      if (other == null) {
        return;
      }
      changeToKeyTypeOneStatus_.Add(other.changeToKeyTypeOneStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            changeToKeyTypeOneStatus_.AddEntriesFrom(input, _repeated_changeToKeyTypeOneStatus_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// for setting keys where the id is a long value
  /// </summary>
  public sealed partial class SetKey : pb::IMessage<SetKey> {
    private static readonly pb::MessageParser<SetKey> _parser = new pb::MessageParser<SetKey>(() => new SetKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetKey(SetKey other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetKey Clone() {
      return new SetKey(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    /// role_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// role key GCM encrypted with the tree key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetKey other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Key = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetKeyRequest : pb::IMessage<SetKeyRequest> {
    private static readonly pb::MessageParser<SetKeyRequest> _parser = new pb::MessageParser<SetKeyRequest>(() => new SetKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetKeyRequest(SetKeyRequest other) : this() {
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetKeyRequest Clone() {
      return new SetKeyRequest(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Authentication.SetKey> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Authentication.SetKey.Parser);
    private readonly pbc::RepeatedField<global::Authentication.SetKey> keys_ = new pbc::RepeatedField<global::Authentication.SetKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.SetKey> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetKeyRequest other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///same input as the register command
  /// </summary>
  public sealed partial class CreateUserRequest : pb::IMessage<CreateUserRequest> {
    private static readonly pb::MessageParser<CreateUserRequest> _parser = new pb::MessageParser<CreateUserRequest>(() => new CreateUserRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateUserRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateUserRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateUserRequest(CreateUserRequest other) : this() {
      username_ = other.username_;
      authVerifier_ = other.authVerifier_;
      encryptionParams_ = other.encryptionParams_;
      rsaPublicKey_ = other.rsaPublicKey_;
      rsaEncryptedPrivateKey_ = other.rsaEncryptedPrivateKey_;
      eccPublicKey_ = other.eccPublicKey_;
      eccEncryptedPrivateKey_ = other.eccEncryptedPrivateKey_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      encryptedClientKey_ = other.encryptedClientKey_;
      clientVersion_ = other.clientVersion_;
      encryptedDeviceDataKey_ = other.encryptedDeviceDataKey_;
      encryptedLoginToken_ = other.encryptedLoginToken_;
      messageSessionUid_ = other.messageSessionUid_;
      installReferrer_ = other.installReferrer_;
      mccMNC_ = other.mccMNC_;
      mfg_ = other.mfg_;
      model_ = other.model_;
      brand_ = other.brand_;
      product_ = other.product_;
      device_ = other.device_;
      carrier_ = other.carrier_;
      verificationCode_ = other.verificationCode_;
      enterpriseRegistration_ = other.enterpriseRegistration_ != null ? other.enterpriseRegistration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateUserRequest Clone() {
      return new CreateUserRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    /// <summary>
    /// must be valid email
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authVerifier" field.</summary>
    public const int AuthVerifierFieldNumber = 2;
    private pb::ByteString authVerifier_ = pb::ByteString.Empty;
    /// <summary>
    ///new Field("auth_verifier", new AuthVerifierFieldValidator(), true); size=(70, 70)?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AuthVerifier {
      get { return authVerifier_; }
      set {
        authVerifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptionParams" field.</summary>
    public const int EncryptionParamsFieldNumber = 3;
    private pb::ByteString encryptionParams_ = pb::ByteString.Empty;
    /// <summary>
    ///new Field("encryption_params", new EncryptionParamsFieldValidator(), true); size=(134, 134)?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptionParams {
      get { return encryptionParams_; }
      set {
        encryptionParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rsaPublicKey" field.</summary>
    public const int RsaPublicKeyFieldNumber = 4;
    private pb::ByteString rsaPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///new Field("public_key", new PublicKeyFieldValidator(), true); size=(10, 2000)?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RsaPublicKey {
      get { return rsaPublicKey_; }
      set {
        rsaPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rsaEncryptedPrivateKey" field.</summary>
    public const int RsaEncryptedPrivateKeyFieldNumber = 5;
    private pb::ByteString rsaEncryptedPrivateKey_ = pb::ByteString.Empty;
    /// <summary>
    ///new Field("encrypted_private_key", new DataKeyEncPrivateKeyFieldValidator(), true); size=(10, 2000)?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RsaEncryptedPrivateKey {
      get { return rsaEncryptedPrivateKey_; }
      set {
        rsaEncryptedPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eccPublicKey" field.</summary>
    public const int EccPublicKeyFieldNumber = 6;
    private pb::ByteString eccPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// 65 bytes, on curve
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EccPublicKey {
      get { return eccPublicKey_; }
      set {
        eccPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eccEncryptedPrivateKey" field.</summary>
    public const int EccEncryptedPrivateKeyFieldNumber = 7;
    private pb::ByteString eccEncryptedPrivateKey_ = pb::ByteString.Empty;
    /// <summary>
    /// 60 bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EccEncryptedPrivateKey {
      get { return eccEncryptedPrivateKey_; }
      set {
        eccEncryptedPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 8;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    /// <summary>
    /// 65 bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedClientKey" field.</summary>
    public const int EncryptedClientKeyFieldNumber = 9;
    private pb::ByteString encryptedClientKey_ = pb::ByteString.Empty;
    /// <summary>
    /// switch to gcm? old clients can't be used 60 bytes, otherwise 64 bytes; new Field("client_key", new DataKeyEncDataKeyFieldValidator(), false);
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedClientKey {
      get { return encryptedClientKey_; }
      set {
        encryptedClientKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 10;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceDataKey" field.</summary>
    public const int EncryptedDeviceDataKeyFieldNumber = 11;
    private pb::ByteString encryptedDeviceDataKey_ = pb::ByteString.Empty;
    /// <summary>
    /// have to check
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceDataKey {
      get { return encryptedDeviceDataKey_; }
      set {
        encryptedDeviceDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedLoginToken" field.</summary>
    public const int EncryptedLoginTokenFieldNumber = 12;
    private pb::ByteString encryptedLoginToken_ = pb::ByteString.Empty;
    /// <summary>
    /// this is from cloud sso
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedLoginToken {
      get { return encryptedLoginToken_; }
      set {
        encryptedLoginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messageSessionUid" field.</summary>
    public const int MessageSessionUidFieldNumber = 13;
    private pb::ByteString messageSessionUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageSessionUid {
      get { return messageSessionUid_; }
      set {
        messageSessionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "installReferrer" field.</summary>
    public const int InstallReferrerFieldNumber = 14;
    private string installReferrer_ = "";
    /// <summary>
    ///new Field("install_referrer", new StringFieldValidator(0, 1024), false); size=(0, 1024)?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstallReferrer {
      get { return installReferrer_; }
      set {
        installReferrer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mccMNC" field.</summary>
    public const int MccMNCFieldNumber = 15;
    private int mccMNC_;
    /// <summary>
    ///input.optString("mcc_mnc") in verifyDevice(); carrier_sim_codes.mcc_mnc int(6)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MccMNC {
      get { return mccMNC_; }
      set {
        mccMNC_ = value;
      }
    }

    /// <summary>Field number for the "mfg" field.</summary>
    public const int MfgFieldNumber = 16;
    private string mfg_ = "";
    /// <summary>
    ///input.optString("mfg") in verifyDevice(); appstore_device_history.mfg char(64)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mfg {
      get { return mfg_; }
      set {
        mfg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 17;
    private string model_ = "";
    /// <summary>
    ///input.optString("model") in verifyDevice(); appstore_device_history.model char(64)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 18;
    private string brand_ = "";
    /// <summary>
    ///input.optString("brand") in verifyDevice(); appstore_device_history.brand char(64)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Brand {
      get { return brand_; }
      set {
        brand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product" field.</summary>
    public const int ProductFieldNumber = 19;
    private string product_ = "";
    /// <summary>
    ///input.optString("product") in verifyDevice(); appstore_device_history.product char(64)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Product {
      get { return product_; }
      set {
        product_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 20;
    private string device_ = "";
    /// <summary>
    ///input.optString("device"); used in PromotionMatcher; appstore_device_history.device char(64)?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carrier" field.</summary>
    public const int CarrierFieldNumber = 21;
    private string carrier_ = "";
    /// <summary>
    ///input.optString("carrier"); used in PromotionMatcher; appstore_device_history.carrier char(64)?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Carrier {
      get { return carrier_; }
      set {
        carrier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verificationCode" field.</summary>
    public const int VerificationCodeFieldNumber = 22;
    private string verificationCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerificationCode {
      get { return verificationCode_; }
      set {
        verificationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterpriseRegistration" field.</summary>
    public const int EnterpriseRegistrationFieldNumber = 23;
    private global::Enterprise.EnterpriseRegistration enterpriseRegistration_;
    /// <summary>
    /// optinal for creating an account when creating an enterprise
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Enterprise.EnterpriseRegistration EnterpriseRegistration {
      get { return enterpriseRegistration_; }
      set {
        enterpriseRegistration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateUserRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateUserRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (AuthVerifier != other.AuthVerifier) return false;
      if (EncryptionParams != other.EncryptionParams) return false;
      if (RsaPublicKey != other.RsaPublicKey) return false;
      if (RsaEncryptedPrivateKey != other.RsaEncryptedPrivateKey) return false;
      if (EccPublicKey != other.EccPublicKey) return false;
      if (EccEncryptedPrivateKey != other.EccEncryptedPrivateKey) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (EncryptedClientKey != other.EncryptedClientKey) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (EncryptedDeviceDataKey != other.EncryptedDeviceDataKey) return false;
      if (EncryptedLoginToken != other.EncryptedLoginToken) return false;
      if (MessageSessionUid != other.MessageSessionUid) return false;
      if (InstallReferrer != other.InstallReferrer) return false;
      if (MccMNC != other.MccMNC) return false;
      if (Mfg != other.Mfg) return false;
      if (Model != other.Model) return false;
      if (Brand != other.Brand) return false;
      if (Product != other.Product) return false;
      if (Device != other.Device) return false;
      if (Carrier != other.Carrier) return false;
      if (VerificationCode != other.VerificationCode) return false;
      if (!object.Equals(EnterpriseRegistration, other.EnterpriseRegistration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (AuthVerifier.Length != 0) hash ^= AuthVerifier.GetHashCode();
      if (EncryptionParams.Length != 0) hash ^= EncryptionParams.GetHashCode();
      if (RsaPublicKey.Length != 0) hash ^= RsaPublicKey.GetHashCode();
      if (RsaEncryptedPrivateKey.Length != 0) hash ^= RsaEncryptedPrivateKey.GetHashCode();
      if (EccPublicKey.Length != 0) hash ^= EccPublicKey.GetHashCode();
      if (EccEncryptedPrivateKey.Length != 0) hash ^= EccEncryptedPrivateKey.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (EncryptedClientKey.Length != 0) hash ^= EncryptedClientKey.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (EncryptedDeviceDataKey.Length != 0) hash ^= EncryptedDeviceDataKey.GetHashCode();
      if (EncryptedLoginToken.Length != 0) hash ^= EncryptedLoginToken.GetHashCode();
      if (MessageSessionUid.Length != 0) hash ^= MessageSessionUid.GetHashCode();
      if (InstallReferrer.Length != 0) hash ^= InstallReferrer.GetHashCode();
      if (MccMNC != 0) hash ^= MccMNC.GetHashCode();
      if (Mfg.Length != 0) hash ^= Mfg.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Brand.Length != 0) hash ^= Brand.GetHashCode();
      if (Product.Length != 0) hash ^= Product.GetHashCode();
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      if (Carrier.Length != 0) hash ^= Carrier.GetHashCode();
      if (VerificationCode.Length != 0) hash ^= VerificationCode.GetHashCode();
      if (enterpriseRegistration_ != null) hash ^= EnterpriseRegistration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (AuthVerifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(AuthVerifier);
      }
      if (EncryptionParams.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptionParams);
      }
      if (RsaPublicKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RsaPublicKey);
      }
      if (RsaEncryptedPrivateKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(RsaEncryptedPrivateKey);
      }
      if (EccPublicKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(EccPublicKey);
      }
      if (EccEncryptedPrivateKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(EccEncryptedPrivateKey);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (EncryptedClientKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(EncryptedClientKey);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ClientVersion);
      }
      if (EncryptedDeviceDataKey.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(EncryptedDeviceDataKey);
      }
      if (EncryptedLoginToken.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(EncryptedLoginToken);
      }
      if (MessageSessionUid.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(MessageSessionUid);
      }
      if (InstallReferrer.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(InstallReferrer);
      }
      if (MccMNC != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MccMNC);
      }
      if (Mfg.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Mfg);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Model);
      }
      if (Brand.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Brand);
      }
      if (Product.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Product);
      }
      if (Device.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Device);
      }
      if (Carrier.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Carrier);
      }
      if (VerificationCode.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(VerificationCode);
      }
      if (enterpriseRegistration_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(EnterpriseRegistration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (AuthVerifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AuthVerifier);
      }
      if (EncryptionParams.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptionParams);
      }
      if (RsaPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RsaPublicKey);
      }
      if (RsaEncryptedPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RsaEncryptedPrivateKey);
      }
      if (EccPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EccPublicKey);
      }
      if (EccEncryptedPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EccEncryptedPrivateKey);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (EncryptedClientKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedClientKey);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (EncryptedDeviceDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceDataKey);
      }
      if (EncryptedLoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedLoginToken);
      }
      if (MessageSessionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageSessionUid);
      }
      if (InstallReferrer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstallReferrer);
      }
      if (MccMNC != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MccMNC);
      }
      if (Mfg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mfg);
      }
      if (Model.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Brand.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Brand);
      }
      if (Product.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Product);
      }
      if (Device.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (Carrier.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Carrier);
      }
      if (VerificationCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VerificationCode);
      }
      if (enterpriseRegistration_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnterpriseRegistration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateUserRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.AuthVerifier.Length != 0) {
        AuthVerifier = other.AuthVerifier;
      }
      if (other.EncryptionParams.Length != 0) {
        EncryptionParams = other.EncryptionParams;
      }
      if (other.RsaPublicKey.Length != 0) {
        RsaPublicKey = other.RsaPublicKey;
      }
      if (other.RsaEncryptedPrivateKey.Length != 0) {
        RsaEncryptedPrivateKey = other.RsaEncryptedPrivateKey;
      }
      if (other.EccPublicKey.Length != 0) {
        EccPublicKey = other.EccPublicKey;
      }
      if (other.EccEncryptedPrivateKey.Length != 0) {
        EccEncryptedPrivateKey = other.EccEncryptedPrivateKey;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.EncryptedClientKey.Length != 0) {
        EncryptedClientKey = other.EncryptedClientKey;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.EncryptedDeviceDataKey.Length != 0) {
        EncryptedDeviceDataKey = other.EncryptedDeviceDataKey;
      }
      if (other.EncryptedLoginToken.Length != 0) {
        EncryptedLoginToken = other.EncryptedLoginToken;
      }
      if (other.MessageSessionUid.Length != 0) {
        MessageSessionUid = other.MessageSessionUid;
      }
      if (other.InstallReferrer.Length != 0) {
        InstallReferrer = other.InstallReferrer;
      }
      if (other.MccMNC != 0) {
        MccMNC = other.MccMNC;
      }
      if (other.Mfg.Length != 0) {
        Mfg = other.Mfg;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Brand.Length != 0) {
        Brand = other.Brand;
      }
      if (other.Product.Length != 0) {
        Product = other.Product;
      }
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
      if (other.Carrier.Length != 0) {
        Carrier = other.Carrier;
      }
      if (other.VerificationCode.Length != 0) {
        VerificationCode = other.VerificationCode;
      }
      if (other.enterpriseRegistration_ != null) {
        if (enterpriseRegistration_ == null) {
          EnterpriseRegistration = new global::Enterprise.EnterpriseRegistration();
        }
        EnterpriseRegistration.MergeFrom(other.EnterpriseRegistration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            AuthVerifier = input.ReadBytes();
            break;
          }
          case 26: {
            EncryptionParams = input.ReadBytes();
            break;
          }
          case 34: {
            RsaPublicKey = input.ReadBytes();
            break;
          }
          case 42: {
            RsaEncryptedPrivateKey = input.ReadBytes();
            break;
          }
          case 50: {
            EccPublicKey = input.ReadBytes();
            break;
          }
          case 58: {
            EccEncryptedPrivateKey = input.ReadBytes();
            break;
          }
          case 66: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 74: {
            EncryptedClientKey = input.ReadBytes();
            break;
          }
          case 82: {
            ClientVersion = input.ReadString();
            break;
          }
          case 90: {
            EncryptedDeviceDataKey = input.ReadBytes();
            break;
          }
          case 98: {
            EncryptedLoginToken = input.ReadBytes();
            break;
          }
          case 106: {
            MessageSessionUid = input.ReadBytes();
            break;
          }
          case 114: {
            InstallReferrer = input.ReadString();
            break;
          }
          case 120: {
            MccMNC = input.ReadInt32();
            break;
          }
          case 130: {
            Mfg = input.ReadString();
            break;
          }
          case 138: {
            Model = input.ReadString();
            break;
          }
          case 146: {
            Brand = input.ReadString();
            break;
          }
          case 154: {
            Product = input.ReadString();
            break;
          }
          case 162: {
            Device = input.ReadString();
            break;
          }
          case 170: {
            Carrier = input.ReadString();
            break;
          }
          case 178: {
            VerificationCode = input.ReadString();
            break;
          }
          case 186: {
            if (enterpriseRegistration_ == null) {
              EnterpriseRegistration = new global::Enterprise.EnterpriseRegistration();
            }
            input.ReadMessage(EnterpriseRegistration);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeEnforcementAddOrUpdateRequest : pb::IMessage<NodeEnforcementAddOrUpdateRequest> {
    private static readonly pb::MessageParser<NodeEnforcementAddOrUpdateRequest> _parser = new pb::MessageParser<NodeEnforcementAddOrUpdateRequest>(() => new NodeEnforcementAddOrUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeEnforcementAddOrUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEnforcementAddOrUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEnforcementAddOrUpdateRequest(NodeEnforcementAddOrUpdateRequest other) : this() {
      nodeId_ = other.nodeId_;
      enforcement_ = other.enforcement_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEnforcementAddOrUpdateRequest Clone() {
      return new NodeEnforcementAddOrUpdateRequest(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "enforcement" field.</summary>
    public const int EnforcementFieldNumber = 2;
    private string enforcement_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Enforcement {
      get { return enforcement_; }
      set {
        enforcement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeEnforcementAddOrUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeEnforcementAddOrUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (Enforcement != other.Enforcement) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (Enforcement.Length != 0) hash ^= Enforcement.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NodeId);
      }
      if (Enforcement.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Enforcement);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (Enforcement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Enforcement);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeEnforcementAddOrUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.Enforcement.Length != 0) {
        Enforcement = other.Enforcement;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadInt64();
            break;
          }
          case 18: {
            Enforcement = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeEnforcementRemoveRequest : pb::IMessage<NodeEnforcementRemoveRequest> {
    private static readonly pb::MessageParser<NodeEnforcementRemoveRequest> _parser = new pb::MessageParser<NodeEnforcementRemoveRequest>(() => new NodeEnforcementRemoveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeEnforcementRemoveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEnforcementRemoveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEnforcementRemoveRequest(NodeEnforcementRemoveRequest other) : this() {
      nodeId_ = other.nodeId_;
      enforcement_ = other.enforcement_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEnforcementRemoveRequest Clone() {
      return new NodeEnforcementRemoveRequest(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "enforcement" field.</summary>
    public const int EnforcementFieldNumber = 2;
    private string enforcement_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Enforcement {
      get { return enforcement_; }
      set {
        enforcement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeEnforcementRemoveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeEnforcementRemoveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (Enforcement != other.Enforcement) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (Enforcement.Length != 0) hash ^= Enforcement.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NodeId);
      }
      if (Enforcement.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Enforcement);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (Enforcement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Enforcement);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeEnforcementRemoveRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.Enforcement.Length != 0) {
        Enforcement = other.Enforcement;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadInt64();
            break;
          }
          case 18: {
            Enforcement = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserAccounts : pb::IMessage<UserAccounts> {
    private static readonly pb::MessageParser<UserAccounts> _parser = new pb::MessageParser<UserAccounts>(() => new UserAccounts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAccounts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAccounts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAccounts(UserAccounts other) : this() {
      accountUid_ = other.accountUid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAccounts Clone() {
      return new UserAccounts(this);
    }

    /// <summary>Field number for the "accountUid" field.</summary>
    public const int AccountUidFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_accountUid_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> accountUid_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> AccountUid {
      get { return accountUid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAccounts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAccounts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accountUid_.Equals(other.accountUid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accountUid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      accountUid_.WriteTo(output, _repeated_accountUid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accountUid_.CalculateSize(_repeated_accountUid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAccounts other) {
      if (other == null) {
        return;
      }
      accountUid_.Add(other.accountUid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            accountUid_.AddEntriesFrom(input, _repeated_accountUid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApiRequestByKey : pb::IMessage<ApiRequestByKey> {
    private static readonly pb::MessageParser<ApiRequestByKey> _parser = new pb::MessageParser<ApiRequestByKey>(() => new ApiRequestByKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiRequestByKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequestByKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequestByKey(ApiRequestByKey other) : this() {
      keyId_ = other.keyId_;
      payload_ = other.payload_;
      username_ = other.username_;
      locale_ = other.locale_;
      supportedLanguage_ = other.supportedLanguage_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiRequestByKey Clone() {
      return new ApiRequestByKey(this);
    }

    /// <summary>Field number for the "keyId" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private int keyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeyId {
      get { return keyId_; }
      set {
        keyId_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 4;
    private string locale_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "supportedLanguage" field.</summary>
    public const int SupportedLanguageFieldNumber = 5;
    private global::Authentication.SupportedLanguage supportedLanguage_ = global::Authentication.SupportedLanguage.English;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.SupportedLanguage SupportedLanguage {
      get { return supportedLanguage_; }
      set {
        supportedLanguage_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiRequestByKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiRequestByKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      if (Payload != other.Payload) return false;
      if (Username != other.Username) return false;
      if (Locale != other.Locale) return false;
      if (SupportedLanguage != other.SupportedLanguage) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId != 0) hash ^= KeyId.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Locale.Length != 0) hash ^= Locale.GetHashCode();
      if (SupportedLanguage != global::Authentication.SupportedLanguage.English) hash ^= SupportedLanguage.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(KeyId);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Locale);
      }
      if (SupportedLanguage != global::Authentication.SupportedLanguage.English) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SupportedLanguage);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyId);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (SupportedLanguage != global::Authentication.SupportedLanguage.English) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SupportedLanguage);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiRequestByKey other) {
      if (other == null) {
        return;
      }
      if (other.KeyId != 0) {
        KeyId = other.KeyId;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Locale.Length != 0) {
        Locale = other.Locale;
      }
      if (other.SupportedLanguage != global::Authentication.SupportedLanguage.English) {
        SupportedLanguage = other.SupportedLanguage;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KeyId = input.ReadInt32();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
          case 34: {
            Locale = input.ReadString();
            break;
          }
          case 40: {
            SupportedLanguage = (global::Authentication.SupportedLanguage) input.ReadEnum();
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemcacheRequest : pb::IMessage<MemcacheRequest> {
    private static readonly pb::MessageParser<MemcacheRequest> _parser = new pb::MessageParser<MemcacheRequest>(() => new MemcacheRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemcacheRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemcacheRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemcacheRequest(MemcacheRequest other) : this() {
      key_ = other.key_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemcacheRequest Clone() {
      return new MemcacheRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemcacheRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemcacheRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemcacheRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemcacheResponse : pb::IMessage<MemcacheResponse> {
    private static readonly pb::MessageParser<MemcacheResponse> _parser = new pb::MessageParser<MemcacheResponse>(() => new MemcacheResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemcacheResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemcacheResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemcacheResponse(MemcacheResponse other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemcacheResponse Clone() {
      return new MemcacheResponse(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemcacheResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemcacheResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemcacheResponse other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MasterPasswordReentryRequest : pb::IMessage<MasterPasswordReentryRequest> {
    private static readonly pb::MessageParser<MasterPasswordReentryRequest> _parser = new pb::MessageParser<MasterPasswordReentryRequest>(() => new MasterPasswordReentryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MasterPasswordReentryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterPasswordReentryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterPasswordReentryRequest(MasterPasswordReentryRequest other) : this() {
      pbkdf2Password_ = other.pbkdf2Password_;
      action_ = other.action_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterPasswordReentryRequest Clone() {
      return new MasterPasswordReentryRequest(this);
    }

    /// <summary>Field number for the "pbkdf2Password" field.</summary>
    public const int Pbkdf2PasswordFieldNumber = 1;
    private string pbkdf2Password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pbkdf2Password {
      get { return pbkdf2Password_; }
      set {
        pbkdf2Password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private global::Authentication.MasterPasswordReentryActionType action_ = global::Authentication.MasterPasswordReentryActionType.Unmask;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.MasterPasswordReentryActionType Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MasterPasswordReentryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MasterPasswordReentryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pbkdf2Password != other.Pbkdf2Password) return false;
      if (Action != other.Action) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pbkdf2Password.Length != 0) hash ^= Pbkdf2Password.GetHashCode();
      if (Action != global::Authentication.MasterPasswordReentryActionType.Unmask) hash ^= Action.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pbkdf2Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pbkdf2Password);
      }
      if (Action != global::Authentication.MasterPasswordReentryActionType.Unmask) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pbkdf2Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pbkdf2Password);
      }
      if (Action != global::Authentication.MasterPasswordReentryActionType.Unmask) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MasterPasswordReentryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Pbkdf2Password.Length != 0) {
        Pbkdf2Password = other.Pbkdf2Password;
      }
      if (other.Action != global::Authentication.MasterPasswordReentryActionType.Unmask) {
        Action = other.Action;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Pbkdf2Password = input.ReadString();
            break;
          }
          case 16: {
            Action = (global::Authentication.MasterPasswordReentryActionType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceRegistrationRequest : pb::IMessage<DeviceRegistrationRequest> {
    private static readonly pb::MessageParser<DeviceRegistrationRequest> _parser = new pb::MessageParser<DeviceRegistrationRequest>(() => new DeviceRegistrationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceRegistrationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRegistrationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRegistrationRequest(DeviceRegistrationRequest other) : this() {
      clientVersion_ = other.clientVersion_;
      deviceName_ = other.deviceName_;
      devicePublicKey_ = other.devicePublicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceRegistrationRequest Clone() {
      return new DeviceRegistrationRequest(this);
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceName" field.</summary>
    public const int DeviceNameFieldNumber = 2;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "devicePublicKey" field.</summary>
    public const int DevicePublicKeyFieldNumber = 3;
    private pb::ByteString devicePublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DevicePublicKey {
      get { return devicePublicKey_; }
      set {
        devicePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceRegistrationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceRegistrationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (DeviceName != other.DeviceName) return false;
      if (DevicePublicKey != other.DevicePublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (DevicePublicKey.Length != 0) hash ^= DevicePublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientVersion);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceName);
      }
      if (DevicePublicKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(DevicePublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (DevicePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DevicePublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceRegistrationRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.DevicePublicKey.Length != 0) {
        DevicePublicKey = other.DevicePublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientVersion = input.ReadString();
            break;
          }
          case 18: {
            DeviceName = input.ReadString();
            break;
          }
          case 26: {
            DevicePublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceVerificationRequest : pb::IMessage<DeviceVerificationRequest> {
    private static readonly pb::MessageParser<DeviceVerificationRequest> _parser = new pb::MessageParser<DeviceVerificationRequest>(() => new DeviceVerificationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceVerificationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceVerificationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceVerificationRequest(DeviceVerificationRequest other) : this() {
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      username_ = other.username_;
      verificationChannel_ = other.verificationChannel_;
      messageSessionUid_ = other.messageSessionUid_;
      clientVersion_ = other.clientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceVerificationRequest Clone() {
      return new DeviceVerificationRequest(this);
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 1;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verificationChannel" field.</summary>
    public const int VerificationChannelFieldNumber = 3;
    private string verificationChannel_ = "";
    /// <summary>
    /// email for now, could be "sms" if we allow username as cell number in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerificationChannel {
      get { return verificationChannel_; }
      set {
        verificationChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messageSessionUid" field.</summary>
    public const int MessageSessionUidFieldNumber = 4;
    private pb::ByteString messageSessionUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageSessionUid {
      get { return messageSessionUid_; }
      set {
        messageSessionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 5;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceVerificationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceVerificationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (Username != other.Username) return false;
      if (VerificationChannel != other.VerificationChannel) return false;
      if (MessageSessionUid != other.MessageSessionUid) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (VerificationChannel.Length != 0) hash ^= VerificationChannel.GetHashCode();
      if (MessageSessionUid.Length != 0) hash ^= MessageSessionUid.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (VerificationChannel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VerificationChannel);
      }
      if (MessageSessionUid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(MessageSessionUid);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (VerificationChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerificationChannel);
      }
      if (MessageSessionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageSessionUid);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceVerificationRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.VerificationChannel.Length != 0) {
        VerificationChannel = other.VerificationChannel;
      }
      if (other.MessageSessionUid.Length != 0) {
        MessageSessionUid = other.MessageSessionUid;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            VerificationChannel = input.ReadString();
            break;
          }
          case 34: {
            MessageSessionUid = input.ReadBytes();
            break;
          }
          case 42: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceVerificationResponse : pb::IMessage<DeviceVerificationResponse> {
    private static readonly pb::MessageParser<DeviceVerificationResponse> _parser = new pb::MessageParser<DeviceVerificationResponse>(() => new DeviceVerificationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceVerificationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceVerificationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceVerificationResponse(DeviceVerificationResponse other) : this() {
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      username_ = other.username_;
      messageSessionUid_ = other.messageSessionUid_;
      clientVersion_ = other.clientVersion_;
      deviceStatus_ = other.deviceStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceVerificationResponse Clone() {
      return new DeviceVerificationResponse(this);
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 1;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messageSessionUid" field.</summary>
    public const int MessageSessionUidFieldNumber = 3;
    private pb::ByteString messageSessionUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageSessionUid {
      get { return messageSessionUid_; }
      set {
        messageSessionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 4;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceStatus" field.</summary>
    public const int DeviceStatusFieldNumber = 5;
    private global::Authentication.DeviceStatus deviceStatus_ = global::Authentication.DeviceStatus.DeviceNeedsApproval;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.DeviceStatus DeviceStatus {
      get { return deviceStatus_; }
      set {
        deviceStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceVerificationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceVerificationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (Username != other.Username) return false;
      if (MessageSessionUid != other.MessageSessionUid) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (DeviceStatus != other.DeviceStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (MessageSessionUid.Length != 0) hash ^= MessageSessionUid.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) hash ^= DeviceStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (MessageSessionUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MessageSessionUid);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientVersion);
      }
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DeviceStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (MessageSessionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageSessionUid);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceVerificationResponse other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.MessageSessionUid.Length != 0) {
        MessageSessionUid = other.MessageSessionUid;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        DeviceStatus = other.DeviceStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            MessageSessionUid = input.ReadBytes();
            break;
          }
          case 34: {
            ClientVersion = input.ReadString();
            break;
          }
          case 40: {
            DeviceStatus = (global::Authentication.DeviceStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceApprovalRequest : pb::IMessage<DeviceApprovalRequest> {
    private static readonly pb::MessageParser<DeviceApprovalRequest> _parser = new pb::MessageParser<DeviceApprovalRequest>(() => new DeviceApprovalRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceApprovalRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceApprovalRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceApprovalRequest(DeviceApprovalRequest other) : this() {
      email_ = other.email_;
      twoFactorChannel_ = other.twoFactorChannel_;
      clientVersion_ = other.clientVersion_;
      locale_ = other.locale_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      totpCode_ = other.totpCode_;
      deviceIp_ = other.deviceIp_;
      deviceTokenExpireDays_ = other.deviceTokenExpireDays_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceApprovalRequest Clone() {
      return new DeviceApprovalRequest(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "twoFactorChannel" field.</summary>
    public const int TwoFactorChannelFieldNumber = 2;
    private string twoFactorChannel_ = "";
    /// <summary>
    /// TwoFactorChannel, only "sms", "duo", "on_device" or "on_approved_device"; default to email verification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TwoFactorChannel {
      get { return twoFactorChannel_; }
      set {
        twoFactorChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 3;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 4;
    private string locale_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 5;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totpCode" field.</summary>
    public const int TotpCodeFieldNumber = 6;
    private string totpCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TotpCode {
      get { return totpCode_; }
      set {
        totpCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceIp" field.</summary>
    public const int DeviceIpFieldNumber = 7;
    private string deviceIp_ = "";
    /// <summary>
    ///This is the ip address of the original device that needs to be approved, which will be included in the TwoFactorToken.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceIp {
      get { return deviceIp_; }
      set {
        deviceIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceTokenExpireDays" field.</summary>
    public const int DeviceTokenExpireDaysFieldNumber = 8;
    private string deviceTokenExpireDays_ = "";
    /// <summary>
    ///equivalent to the device_token_expire_days that is used in the Login command
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceTokenExpireDays {
      get { return deviceTokenExpireDays_; }
      set {
        deviceTokenExpireDays_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceApprovalRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceApprovalRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (TwoFactorChannel != other.TwoFactorChannel) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (Locale != other.Locale) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (TotpCode != other.TotpCode) return false;
      if (DeviceIp != other.DeviceIp) return false;
      if (DeviceTokenExpireDays != other.DeviceTokenExpireDays) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (TwoFactorChannel.Length != 0) hash ^= TwoFactorChannel.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (Locale.Length != 0) hash ^= Locale.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (TotpCode.Length != 0) hash ^= TotpCode.GetHashCode();
      if (DeviceIp.Length != 0) hash ^= DeviceIp.GetHashCode();
      if (DeviceTokenExpireDays.Length != 0) hash ^= DeviceTokenExpireDays.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (TwoFactorChannel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TwoFactorChannel);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientVersion);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Locale);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (TotpCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TotpCode);
      }
      if (DeviceIp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DeviceIp);
      }
      if (DeviceTokenExpireDays.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DeviceTokenExpireDays);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (TwoFactorChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TwoFactorChannel);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (TotpCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TotpCode);
      }
      if (DeviceIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceIp);
      }
      if (DeviceTokenExpireDays.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceTokenExpireDays);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceApprovalRequest other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.TwoFactorChannel.Length != 0) {
        TwoFactorChannel = other.TwoFactorChannel;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.Locale.Length != 0) {
        Locale = other.Locale;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.TotpCode.Length != 0) {
        TotpCode = other.TotpCode;
      }
      if (other.DeviceIp.Length != 0) {
        DeviceIp = other.DeviceIp;
      }
      if (other.DeviceTokenExpireDays.Length != 0) {
        DeviceTokenExpireDays = other.DeviceTokenExpireDays;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            TwoFactorChannel = input.ReadString();
            break;
          }
          case 26: {
            ClientVersion = input.ReadString();
            break;
          }
          case 34: {
            Locale = input.ReadString();
            break;
          }
          case 42: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 50: {
            TotpCode = input.ReadString();
            break;
          }
          case 58: {
            DeviceIp = input.ReadString();
            break;
          }
          case 66: {
            DeviceTokenExpireDays = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceApprovalResponse : pb::IMessage<DeviceApprovalResponse> {
    private static readonly pb::MessageParser<DeviceApprovalResponse> _parser = new pb::MessageParser<DeviceApprovalResponse>(() => new DeviceApprovalResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceApprovalResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceApprovalResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceApprovalResponse(DeviceApprovalResponse other) : this() {
      encryptedTwoFactorToken_ = other.encryptedTwoFactorToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceApprovalResponse Clone() {
      return new DeviceApprovalResponse(this);
    }

    /// <summary>Field number for the "encryptedTwoFactorToken" field.</summary>
    public const int EncryptedTwoFactorTokenFieldNumber = 1;
    private pb::ByteString encryptedTwoFactorToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedTwoFactorToken {
      get { return encryptedTwoFactorToken_; }
      set {
        encryptedTwoFactorToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceApprovalResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceApprovalResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedTwoFactorToken != other.EncryptedTwoFactorToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedTwoFactorToken.Length != 0) hash ^= EncryptedTwoFactorToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedTwoFactorToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedTwoFactorToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedTwoFactorToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedTwoFactorToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceApprovalResponse other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedTwoFactorToken.Length != 0) {
        EncryptedTwoFactorToken = other.EncryptedTwoFactorToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedTwoFactorToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveDeviceRequest : pb::IMessage<ApproveDeviceRequest> {
    private static readonly pb::MessageParser<ApproveDeviceRequest> _parser = new pb::MessageParser<ApproveDeviceRequest>(() => new ApproveDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveDeviceRequest(ApproveDeviceRequest other) : this() {
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      encryptedDeviceDataKey_ = other.encryptedDeviceDataKey_;
      denyApproval_ = other.denyApproval_;
      linkDevice_ = other.linkDevice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveDeviceRequest Clone() {
      return new ApproveDeviceRequest(this);
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 1;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceDataKey" field.</summary>
    public const int EncryptedDeviceDataKeyFieldNumber = 2;
    private pb::ByteString encryptedDeviceDataKey_ = pb::ByteString.Empty;
    /// <summary>
    /// required for cloud sso and link
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceDataKey {
      get { return encryptedDeviceDataKey_; }
      set {
        encryptedDeviceDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "denyApproval" field.</summary>
    public const int DenyApprovalFieldNumber = 3;
    private bool denyApproval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DenyApproval {
      get { return denyApproval_; }
      set {
        denyApproval_ = value;
      }
    }

    /// <summary>Field number for the "linkDevice" field.</summary>
    public const int LinkDeviceFieldNumber = 4;
    private bool linkDevice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LinkDevice {
      get { return linkDevice_; }
      set {
        linkDevice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (EncryptedDeviceDataKey != other.EncryptedDeviceDataKey) return false;
      if (DenyApproval != other.DenyApproval) return false;
      if (LinkDevice != other.LinkDevice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (EncryptedDeviceDataKey.Length != 0) hash ^= EncryptedDeviceDataKey.GetHashCode();
      if (DenyApproval != false) hash ^= DenyApproval.GetHashCode();
      if (LinkDevice != false) hash ^= LinkDevice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (EncryptedDeviceDataKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedDeviceDataKey);
      }
      if (DenyApproval != false) {
        output.WriteRawTag(24);
        output.WriteBool(DenyApproval);
      }
      if (LinkDevice != false) {
        output.WriteRawTag(32);
        output.WriteBool(LinkDevice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (EncryptedDeviceDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceDataKey);
      }
      if (DenyApproval != false) {
        size += 1 + 1;
      }
      if (LinkDevice != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.EncryptedDeviceDataKey.Length != 0) {
        EncryptedDeviceDataKey = other.EncryptedDeviceDataKey;
      }
      if (other.DenyApproval != false) {
        DenyApproval = other.DenyApproval;
      }
      if (other.LinkDevice != false) {
        LinkDevice = other.LinkDevice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedDeviceDataKey = input.ReadBytes();
            break;
          }
          case 24: {
            DenyApproval = input.ReadBool();
            break;
          }
          case 32: {
            LinkDevice = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseUserAliasRequest : pb::IMessage<EnterpriseUserAliasRequest> {
    private static readonly pb::MessageParser<EnterpriseUserAliasRequest> _parser = new pb::MessageParser<EnterpriseUserAliasRequest>(() => new EnterpriseUserAliasRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseUserAliasRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserAliasRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserAliasRequest(EnterpriseUserAliasRequest other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      alias_ = other.alias_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserAliasRequest Clone() {
      return new EnterpriseUserAliasRequest(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 2;
    private string alias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseUserAliasRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseUserAliasRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (Alias != other.Alias) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseUserAliasRequest other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            Alias = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Device : pb::IMessage<Device> {
    private static readonly pb::MessageParser<Device> _parser = new pb::MessageParser<Device>(() => new Device());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Device> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Device() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Device(Device other) : this() {
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Device Clone() {
      return new Device(this);
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 1;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Device);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Device other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Device other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterDeviceDataKeyRequest : pb::IMessage<RegisterDeviceDataKeyRequest> {
    private static readonly pb::MessageParser<RegisterDeviceDataKeyRequest> _parser = new pb::MessageParser<RegisterDeviceDataKeyRequest>(() => new RegisterDeviceDataKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterDeviceDataKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDeviceDataKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDeviceDataKeyRequest(RegisterDeviceDataKeyRequest other) : this() {
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      encryptedDeviceDataKey_ = other.encryptedDeviceDataKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDeviceDataKeyRequest Clone() {
      return new RegisterDeviceDataKeyRequest(this);
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 1;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceDataKey" field.</summary>
    public const int EncryptedDeviceDataKeyFieldNumber = 2;
    private pb::ByteString encryptedDeviceDataKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceDataKey {
      get { return encryptedDeviceDataKey_; }
      set {
        encryptedDeviceDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterDeviceDataKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterDeviceDataKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      if (EncryptedDeviceDataKey != other.EncryptedDeviceDataKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (EncryptedDeviceDataKey.Length != 0) hash ^= EncryptedDeviceDataKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (EncryptedDeviceDataKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedDeviceDataKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (EncryptedDeviceDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceDataKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterDeviceDataKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      if (other.EncryptedDeviceDataKey.Length != 0) {
        EncryptedDeviceDataKey = other.EncryptedDeviceDataKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedDeviceDataKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValidateCreateUserVerificationCodeRequest : pb::IMessage<ValidateCreateUserVerificationCodeRequest> {
    private static readonly pb::MessageParser<ValidateCreateUserVerificationCodeRequest> _parser = new pb::MessageParser<ValidateCreateUserVerificationCodeRequest>(() => new ValidateCreateUserVerificationCodeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateCreateUserVerificationCodeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateCreateUserVerificationCodeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateCreateUserVerificationCodeRequest(ValidateCreateUserVerificationCodeRequest other) : this() {
      username_ = other.username_;
      clientVersion_ = other.clientVersion_;
      verificationCode_ = other.verificationCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateCreateUserVerificationCodeRequest Clone() {
      return new ValidateCreateUserVerificationCodeRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verificationCode" field.</summary>
    public const int VerificationCodeFieldNumber = 3;
    private string verificationCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerificationCode {
      get { return verificationCode_; }
      set {
        verificationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateCreateUserVerificationCodeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateCreateUserVerificationCodeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (VerificationCode != other.VerificationCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (VerificationCode.Length != 0) hash ^= VerificationCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientVersion);
      }
      if (VerificationCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VerificationCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (VerificationCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerificationCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateCreateUserVerificationCodeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.VerificationCode.Length != 0) {
        VerificationCode = other.VerificationCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            ClientVersion = input.ReadString();
            break;
          }
          case 26: {
            VerificationCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValidateDeviceVerificationCodeRequest : pb::IMessage<ValidateDeviceVerificationCodeRequest> {
    private static readonly pb::MessageParser<ValidateDeviceVerificationCodeRequest> _parser = new pb::MessageParser<ValidateDeviceVerificationCodeRequest>(() => new ValidateDeviceVerificationCodeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateDeviceVerificationCodeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateDeviceVerificationCodeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateDeviceVerificationCodeRequest(ValidateDeviceVerificationCodeRequest other) : this() {
      username_ = other.username_;
      clientVersion_ = other.clientVersion_;
      verificationCode_ = other.verificationCode_;
      messageSessionUid_ = other.messageSessionUid_;
      encryptedDeviceToken_ = other.encryptedDeviceToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateDeviceVerificationCodeRequest Clone() {
      return new ValidateDeviceVerificationCodeRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verificationCode" field.</summary>
    public const int VerificationCodeFieldNumber = 3;
    private string verificationCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerificationCode {
      get { return verificationCode_; }
      set {
        verificationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messageSessionUid" field.</summary>
    public const int MessageSessionUidFieldNumber = 4;
    private pb::ByteString messageSessionUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageSessionUid {
      get { return messageSessionUid_; }
      set {
        messageSessionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedDeviceToken" field.</summary>
    public const int EncryptedDeviceTokenFieldNumber = 5;
    private pb::ByteString encryptedDeviceToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDeviceToken {
      get { return encryptedDeviceToken_; }
      set {
        encryptedDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateDeviceVerificationCodeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateDeviceVerificationCodeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (VerificationCode != other.VerificationCode) return false;
      if (MessageSessionUid != other.MessageSessionUid) return false;
      if (EncryptedDeviceToken != other.EncryptedDeviceToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (VerificationCode.Length != 0) hash ^= VerificationCode.GetHashCode();
      if (MessageSessionUid.Length != 0) hash ^= MessageSessionUid.GetHashCode();
      if (EncryptedDeviceToken.Length != 0) hash ^= EncryptedDeviceToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientVersion);
      }
      if (VerificationCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VerificationCode);
      }
      if (MessageSessionUid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(MessageSessionUid);
      }
      if (EncryptedDeviceToken.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (VerificationCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerificationCode);
      }
      if (MessageSessionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageSessionUid);
      }
      if (EncryptedDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDeviceToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateDeviceVerificationCodeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.VerificationCode.Length != 0) {
        VerificationCode = other.VerificationCode;
      }
      if (other.MessageSessionUid.Length != 0) {
        MessageSessionUid = other.MessageSessionUid;
      }
      if (other.EncryptedDeviceToken.Length != 0) {
        EncryptedDeviceToken = other.EncryptedDeviceToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            ClientVersion = input.ReadString();
            break;
          }
          case 26: {
            VerificationCode = input.ReadString();
            break;
          }
          case 34: {
            MessageSessionUid = input.ReadBytes();
            break;
          }
          case 42: {
            EncryptedDeviceToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendSessionMessageRequest : pb::IMessage<SendSessionMessageRequest> {
    private static readonly pb::MessageParser<SendSessionMessageRequest> _parser = new pb::MessageParser<SendSessionMessageRequest>(() => new SendSessionMessageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendSessionMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendSessionMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendSessionMessageRequest(SendSessionMessageRequest other) : this() {
      messageSessionUid_ = other.messageSessionUid_;
      command_ = other.command_;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendSessionMessageRequest Clone() {
      return new SendSessionMessageRequest(this);
    }

    /// <summary>Field number for the "messageSessionUid" field.</summary>
    public const int MessageSessionUidFieldNumber = 1;
    private pb::ByteString messageSessionUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageSessionUid {
      get { return messageSessionUid_; }
      set {
        messageSessionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private string command_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendSessionMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendSessionMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageSessionUid != other.MessageSessionUid) return false;
      if (Command != other.Command) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageSessionUid.Length != 0) hash ^= MessageSessionUid.GetHashCode();
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageSessionUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MessageSessionUid);
      }
      if (Command.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Command);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageSessionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageSessionUid);
      }
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendSessionMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.MessageSessionUid.Length != 0) {
        MessageSessionUid = other.MessageSessionUid;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageSessionUid = input.ReadBytes();
            break;
          }
          case 18: {
            Command = input.ReadString();
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GlobalUserAccount : pb::IMessage<GlobalUserAccount> {
    private static readonly pb::MessageParser<GlobalUserAccount> _parser = new pb::MessageParser<GlobalUserAccount>(() => new GlobalUserAccount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalUserAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalUserAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalUserAccount(GlobalUserAccount other) : this() {
      username_ = other.username_;
      accountUid_ = other.accountUid_;
      regionName_ = other.regionName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalUserAccount Clone() {
      return new GlobalUserAccount(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountUid" field.</summary>
    public const int AccountUidFieldNumber = 2;
    private pb::ByteString accountUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AccountUid {
      get { return accountUid_; }
      set {
        accountUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "regionName" field.</summary>
    public const int RegionNameFieldNumber = 3;
    private string regionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegionName {
      get { return regionName_; }
      set {
        regionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalUserAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalUserAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (AccountUid != other.AccountUid) return false;
      if (RegionName != other.RegionName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (AccountUid.Length != 0) hash ^= AccountUid.GetHashCode();
      if (RegionName.Length != 0) hash ^= RegionName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (AccountUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(AccountUid);
      }
      if (RegionName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RegionName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (AccountUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AccountUid);
      }
      if (RegionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalUserAccount other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.AccountUid.Length != 0) {
        AccountUid = other.AccountUid;
      }
      if (other.RegionName.Length != 0) {
        RegionName = other.RegionName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            AccountUid = input.ReadBytes();
            break;
          }
          case 26: {
            RegionName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountUsername : pb::IMessage<AccountUsername> {
    private static readonly pb::MessageParser<AccountUsername> _parser = new pb::MessageParser<AccountUsername>(() => new AccountUsername());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountUsername> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountUsername() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountUsername(AccountUsername other) : this() {
      username_ = other.username_;
      dateActive_ = other.dateActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountUsername Clone() {
      return new AccountUsername(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dateActive" field.</summary>
    public const int DateActiveFieldNumber = 2;
    private string dateActive_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateActive {
      get { return dateActive_; }
      set {
        dateActive_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountUsername);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountUsername other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (DateActive != other.DateActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (DateActive.Length != 0) hash ^= DateActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (DateActive.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DateActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (DateActive.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateActive);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountUsername other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.DateActive.Length != 0) {
        DateActive = other.DateActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            DateActive = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// This is the input to the get_sso_service_provider command.
  /// </summary>
  public sealed partial class SsoServiceProviderRequest : pb::IMessage<SsoServiceProviderRequest> {
    private static readonly pb::MessageParser<SsoServiceProviderRequest> _parser = new pb::MessageParser<SsoServiceProviderRequest>(() => new SsoServiceProviderRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SsoServiceProviderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoServiceProviderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoServiceProviderRequest(SsoServiceProviderRequest other) : this() {
      name_ = other.name_;
      clientVersion_ = other.clientVersion_;
      locale_ = other.locale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoServiceProviderRequest Clone() {
      return new SsoServiceProviderRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// the name entered by the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 3;
    private string locale_ = "";
    /// <summary>
    /// such as "en_US"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SsoServiceProviderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SsoServiceProviderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (Locale != other.Locale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (Locale.Length != 0) hash ^= Locale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientVersion);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Locale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SsoServiceProviderRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.Locale.Length != 0) {
        Locale = other.Locale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ClientVersion = input.ReadString();
            break;
          }
          case 26: {
            Locale = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// This is the response from the get_sso_service_provider command.
  /// </summary>
  public sealed partial class SsoServiceProviderResponse : pb::IMessage<SsoServiceProviderResponse> {
    private static readonly pb::MessageParser<SsoServiceProviderResponse> _parser = new pb::MessageParser<SsoServiceProviderResponse>(() => new SsoServiceProviderResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SsoServiceProviderResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoServiceProviderResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoServiceProviderResponse(SsoServiceProviderResponse other) : this() {
      name_ = other.name_;
      spUrl_ = other.spUrl_;
      isCloud_ = other.isCloud_;
      clientVersion_ = other.clientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SsoServiceProviderResponse Clone() {
      return new SsoServiceProviderResponse(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// the official name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spUrl" field.</summary>
    public const int SpUrlFieldNumber = 2;
    private string spUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpUrl {
      get { return spUrl_; }
      set {
        spUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isCloud" field.</summary>
    public const int IsCloudFieldNumber = 3;
    private bool isCloud_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCloud {
      get { return isCloud_; }
      set {
        isCloud_ = value;
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 4;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SsoServiceProviderResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SsoServiceProviderResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (SpUrl != other.SpUrl) return false;
      if (IsCloud != other.IsCloud) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SpUrl.Length != 0) hash ^= SpUrl.GetHashCode();
      if (IsCloud != false) hash ^= IsCloud.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (SpUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpUrl);
      }
      if (IsCloud != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCloud);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SpUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpUrl);
      }
      if (IsCloud != false) {
        size += 1 + 1;
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SsoServiceProviderResponse other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SpUrl.Length != 0) {
        SpUrl = other.SpUrl;
      }
      if (other.IsCloud != false) {
        IsCloud = other.IsCloud;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            SpUrl = input.ReadString();
            break;
          }
          case 24: {
            IsCloud = input.ReadBool();
            break;
          }
          case 34: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserSettingRequest : pb::IMessage<UserSettingRequest> {
    private static readonly pb::MessageParser<UserSettingRequest> _parser = new pb::MessageParser<UserSettingRequest>(() => new UserSettingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSettingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSettingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSettingRequest(UserSettingRequest other) : this() {
      setting_ = other.setting_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSettingRequest Clone() {
      return new UserSettingRequest(this);
    }

    /// <summary>Field number for the "setting" field.</summary>
    public const int SettingFieldNumber = 1;
    private string setting_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Setting {
      get { return setting_; }
      set {
        setting_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSettingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSettingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Setting != other.Setting) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Setting.Length != 0) hash ^= Setting.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Setting.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Setting);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Setting.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Setting);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSettingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Setting.Length != 0) {
        Setting = other.Setting;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Setting = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ThrottleState : pb::IMessage<ThrottleState> {
    private static readonly pb::MessageParser<ThrottleState> _parser = new pb::MessageParser<ThrottleState>(() => new ThrottleState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrottleState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrottleState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrottleState(ThrottleState other) : this() {
      type_ = other.type_;
      key_ = other.key_;
      value_ = other.value_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrottleState Clone() {
      return new ThrottleState(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Authentication.ThrottleType type_ = global::Authentication.ThrottleType.PasswordRetryThrottle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.ThrottleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private bool state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrottleState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrottleState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Authentication.ThrottleType.PasswordRetryThrottle) hash ^= Type.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (State != false) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Authentication.ThrottleType.PasswordRetryThrottle) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (State != false) {
        output.WriteRawTag(32);
        output.WriteBool(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Authentication.ThrottleType.PasswordRetryThrottle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (State != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrottleState other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Authentication.ThrottleType.PasswordRetryThrottle) {
        Type = other.Type;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.State != false) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Authentication.ThrottleType) input.ReadEnum();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 32: {
            State = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceInformation : pb::IMessage<DeviceInformation> {
    private static readonly pb::MessageParser<DeviceInformation> _parser = new pb::MessageParser<DeviceInformation>(() => new DeviceInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInformation(DeviceInformation other) : this() {
      deviceId_ = other.deviceId_;
      deviceName_ = other.deviceName_;
      clientVersion_ = other.clientVersion_;
      lastLogin_ = other.lastLogin_;
      deviceStatus_ = other.deviceStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInformation Clone() {
      return new DeviceInformation(this);
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private long deviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    /// <summary>Field number for the "deviceName" field.</summary>
    public const int DeviceNameFieldNumber = 2;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 3;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastLogin" field.</summary>
    public const int LastLoginFieldNumber = 4;
    private long lastLogin_;
    /// <summary>
    /// for get not save
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLogin {
      get { return lastLogin_; }
      set {
        lastLogin_ = value;
      }
    }

    /// <summary>Field number for the "deviceStatus" field.</summary>
    public const int DeviceStatusFieldNumber = 5;
    private global::Authentication.DeviceStatus deviceStatus_ = global::Authentication.DeviceStatus.DeviceNeedsApproval;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.DeviceStatus DeviceStatus {
      get { return deviceStatus_; }
      set {
        deviceStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (DeviceName != other.DeviceName) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (LastLogin != other.LastLogin) return false;
      if (DeviceStatus != other.DeviceStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId != 0L) hash ^= DeviceId.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (LastLogin != 0L) hash ^= LastLogin.GetHashCode();
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) hash ^= DeviceStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DeviceId);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceName);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientVersion);
      }
      if (LastLogin != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LastLogin);
      }
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DeviceStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeviceId);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (LastLogin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLogin);
      }
      if (DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceInformation other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId != 0L) {
        DeviceId = other.DeviceId;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.LastLogin != 0L) {
        LastLogin = other.LastLogin;
      }
      if (other.DeviceStatus != global::Authentication.DeviceStatus.DeviceNeedsApproval) {
        DeviceStatus = other.DeviceStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeviceId = input.ReadInt64();
            break;
          }
          case 18: {
            DeviceName = input.ReadString();
            break;
          }
          case 26: {
            ClientVersion = input.ReadString();
            break;
          }
          case 32: {
            LastLogin = input.ReadInt64();
            break;
          }
          case 40: {
            DeviceStatus = (global::Authentication.DeviceStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserSetting : pb::IMessage<UserSetting> {
    private static readonly pb::MessageParser<UserSetting> _parser = new pb::MessageParser<UserSetting>(() => new UserSetting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSetting(UserSetting other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSetting Clone() {
      return new UserSetting(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != false) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value != false) {
        output.WriteRawTag(16);
        output.WriteBool(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSetting other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserDataKeyRequest : pb::IMessage<UserDataKeyRequest> {
    private static readonly pb::MessageParser<UserDataKeyRequest> _parser = new pb::MessageParser<UserDataKeyRequest>(() => new UserDataKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserDataKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDataKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDataKeyRequest(UserDataKeyRequest other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDataKeyRequest Clone() {
      return new UserDataKeyRequest(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_enterpriseUserId_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> enterpriseUserId_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> EnterpriseUserId {
      get { return enterpriseUserId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserDataKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserDataKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!enterpriseUserId_.Equals(other.enterpriseUserId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= enterpriseUserId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      enterpriseUserId_.WriteTo(output, _repeated_enterpriseUserId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += enterpriseUserId_.CalculateSize(_repeated_enterpriseUserId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserDataKeyRequest other) {
      if (other == null) {
        return;
      }
      enterpriseUserId_.Add(other.enterpriseUserId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            enterpriseUserId_.AddEntriesFrom(input, _repeated_enterpriseUserId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterpriseUserIdDataKeyPair : pb::IMessage<EnterpriseUserIdDataKeyPair> {
    private static readonly pb::MessageParser<EnterpriseUserIdDataKeyPair> _parser = new pb::MessageParser<EnterpriseUserIdDataKeyPair>(() => new EnterpriseUserIdDataKeyPair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterpriseUserIdDataKeyPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserIdDataKeyPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserIdDataKeyPair(EnterpriseUserIdDataKeyPair other) : this() {
      enterpriseUserId_ = other.enterpriseUserId_;
      encryptedDataKey_ = other.encryptedDataKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterpriseUserIdDataKeyPair Clone() {
      return new EnterpriseUserIdDataKeyPair(this);
    }

    /// <summary>Field number for the "enterpriseUserId" field.</summary>
    public const int EnterpriseUserIdFieldNumber = 1;
    private long enterpriseUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnterpriseUserId {
      get { return enterpriseUserId_; }
      set {
        enterpriseUserId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedDataKey" field.</summary>
    public const int EncryptedDataKeyFieldNumber = 2;
    private pb::ByteString encryptedDataKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedDataKey {
      get { return encryptedDataKey_; }
      set {
        encryptedDataKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterpriseUserIdDataKeyPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterpriseUserIdDataKeyPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnterpriseUserId != other.EnterpriseUserId) return false;
      if (EncryptedDataKey != other.EncryptedDataKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnterpriseUserId != 0L) hash ^= EnterpriseUserId.GetHashCode();
      if (EncryptedDataKey.Length != 0) hash ^= EncryptedDataKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnterpriseUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnterpriseUserId);
      }
      if (EncryptedDataKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedDataKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnterpriseUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnterpriseUserId);
      }
      if (EncryptedDataKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedDataKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterpriseUserIdDataKeyPair other) {
      if (other == null) {
        return;
      }
      if (other.EnterpriseUserId != 0L) {
        EnterpriseUserId = other.EnterpriseUserId;
      }
      if (other.EncryptedDataKey.Length != 0) {
        EncryptedDataKey = other.EncryptedDataKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnterpriseUserId = input.ReadInt64();
            break;
          }
          case 18: {
            EncryptedDataKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserDataKey : pb::IMessage<UserDataKey> {
    private static readonly pb::MessageParser<UserDataKey> _parser = new pb::MessageParser<UserDataKey>(() => new UserDataKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserDataKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDataKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDataKey(UserDataKey other) : this() {
      roleId_ = other.roleId_;
      roleKey_ = other.roleKey_;
      privateKey_ = other.privateKey_;
      enterpriseUserIdDataKeyPairs_ = other.enterpriseUserIdDataKeyPairs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDataKey Clone() {
      return new UserDataKey(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleKey" field.</summary>
    public const int RoleKeyFieldNumber = 2;
    private pb::ByteString roleKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleKey {
      get { return roleKey_; }
      set {
        roleKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "privateKey" field.</summary>
    public const int PrivateKeyFieldNumber = 3;
    private string privateKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterpriseUserIdDataKeyPairs" field.</summary>
    public const int EnterpriseUserIdDataKeyPairsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Authentication.EnterpriseUserIdDataKeyPair> _repeated_enterpriseUserIdDataKeyPairs_codec
        = pb::FieldCodec.ForMessage(34, global::Authentication.EnterpriseUserIdDataKeyPair.Parser);
    private readonly pbc::RepeatedField<global::Authentication.EnterpriseUserIdDataKeyPair> enterpriseUserIdDataKeyPairs_ = new pbc::RepeatedField<global::Authentication.EnterpriseUserIdDataKeyPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.EnterpriseUserIdDataKeyPair> EnterpriseUserIdDataKeyPairs {
      get { return enterpriseUserIdDataKeyPairs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserDataKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserDataKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (RoleKey != other.RoleKey) return false;
      if (PrivateKey != other.PrivateKey) return false;
      if(!enterpriseUserIdDataKeyPairs_.Equals(other.enterpriseUserIdDataKeyPairs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (RoleKey.Length != 0) hash ^= RoleKey.GetHashCode();
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      hash ^= enterpriseUserIdDataKeyPairs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (RoleKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleKey);
      }
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PrivateKey);
      }
      enterpriseUserIdDataKeyPairs_.WriteTo(output, _repeated_enterpriseUserIdDataKeyPairs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (RoleKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleKey);
      }
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateKey);
      }
      size += enterpriseUserIdDataKeyPairs_.CalculateSize(_repeated_enterpriseUserIdDataKeyPairs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserDataKey other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.RoleKey.Length != 0) {
        RoleKey = other.RoleKey;
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
      enterpriseUserIdDataKeyPairs_.Add(other.enterpriseUserIdDataKeyPairs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            RoleKey = input.ReadBytes();
            break;
          }
          case 26: {
            PrivateKey = input.ReadString();
            break;
          }
          case 34: {
            enterpriseUserIdDataKeyPairs_.AddEntriesFrom(input, _repeated_enterpriseUserIdDataKeyPairs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserDataKeyResponse : pb::IMessage<UserDataKeyResponse> {
    private static readonly pb::MessageParser<UserDataKeyResponse> _parser = new pb::MessageParser<UserDataKeyResponse>(() => new UserDataKeyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserDataKeyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDataKeyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDataKeyResponse(UserDataKeyResponse other) : this() {
      userDataKeys_ = other.userDataKeys_.Clone();
      accessDenied_ = other.accessDenied_.Clone();
      noEncryptedDataKey_ = other.noEncryptedDataKey_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDataKeyResponse Clone() {
      return new UserDataKeyResponse(this);
    }

    /// <summary>Field number for the "userDataKeys" field.</summary>
    public const int UserDataKeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Authentication.UserDataKey> _repeated_userDataKeys_codec
        = pb::FieldCodec.ForMessage(10, global::Authentication.UserDataKey.Parser);
    private readonly pbc::RepeatedField<global::Authentication.UserDataKey> userDataKeys_ = new pbc::RepeatedField<global::Authentication.UserDataKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.UserDataKey> UserDataKeys {
      get { return userDataKeys_; }
    }

    /// <summary>Field number for the "accessDenied" field.</summary>
    public const int AccessDeniedFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_accessDenied_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> accessDenied_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> AccessDenied {
      get { return accessDenied_; }
    }

    /// <summary>Field number for the "noEncryptedDataKey" field.</summary>
    public const int NoEncryptedDataKeyFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_noEncryptedDataKey_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> noEncryptedDataKey_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> NoEncryptedDataKey {
      get { return noEncryptedDataKey_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserDataKeyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserDataKeyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userDataKeys_.Equals(other.userDataKeys_)) return false;
      if(!accessDenied_.Equals(other.accessDenied_)) return false;
      if(!noEncryptedDataKey_.Equals(other.noEncryptedDataKey_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userDataKeys_.GetHashCode();
      hash ^= accessDenied_.GetHashCode();
      hash ^= noEncryptedDataKey_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userDataKeys_.WriteTo(output, _repeated_userDataKeys_codec);
      accessDenied_.WriteTo(output, _repeated_accessDenied_codec);
      noEncryptedDataKey_.WriteTo(output, _repeated_noEncryptedDataKey_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userDataKeys_.CalculateSize(_repeated_userDataKeys_codec);
      size += accessDenied_.CalculateSize(_repeated_accessDenied_codec);
      size += noEncryptedDataKey_.CalculateSize(_repeated_noEncryptedDataKey_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserDataKeyResponse other) {
      if (other == null) {
        return;
      }
      userDataKeys_.Add(other.userDataKeys_);
      accessDenied_.Add(other.accessDenied_);
      noEncryptedDataKey_.Add(other.noEncryptedDataKey_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            userDataKeys_.AddEntriesFrom(input, _repeated_userDataKeys_codec);
            break;
          }
          case 18:
          case 16: {
            accessDenied_.AddEntriesFrom(input, _repeated_accessDenied_codec);
            break;
          }
          case 26:
          case 24: {
            noEncryptedDataKey_.AddEntriesFrom(input, _repeated_noEncryptedDataKey_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MasterPasswordRecoveryVerificationRequest : pb::IMessage<MasterPasswordRecoveryVerificationRequest> {
    private static readonly pb::MessageParser<MasterPasswordRecoveryVerificationRequest> _parser = new pb::MessageParser<MasterPasswordRecoveryVerificationRequest>(() => new MasterPasswordRecoveryVerificationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MasterPasswordRecoveryVerificationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterPasswordRecoveryVerificationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterPasswordRecoveryVerificationRequest(MasterPasswordRecoveryVerificationRequest other) : this() {
      encryptedLoginToken_ = other.encryptedLoginToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterPasswordRecoveryVerificationRequest Clone() {
      return new MasterPasswordRecoveryVerificationRequest(this);
    }

    /// <summary>Field number for the "encryptedLoginToken" field.</summary>
    public const int EncryptedLoginTokenFieldNumber = 1;
    private pb::ByteString encryptedLoginToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedLoginToken {
      get { return encryptedLoginToken_; }
      set {
        encryptedLoginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MasterPasswordRecoveryVerificationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MasterPasswordRecoveryVerificationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedLoginToken != other.EncryptedLoginToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedLoginToken.Length != 0) hash ^= EncryptedLoginToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedLoginToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedLoginToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedLoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedLoginToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MasterPasswordRecoveryVerificationRequest other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedLoginToken.Length != 0) {
        EncryptedLoginToken = other.EncryptedLoginToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedLoginToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSecurityQuestionV3Request : pb::IMessage<GetSecurityQuestionV3Request> {
    private static readonly pb::MessageParser<GetSecurityQuestionV3Request> _parser = new pb::MessageParser<GetSecurityQuestionV3Request>(() => new GetSecurityQuestionV3Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSecurityQuestionV3Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSecurityQuestionV3Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSecurityQuestionV3Request(GetSecurityQuestionV3Request other) : this() {
      encryptedLoginToken_ = other.encryptedLoginToken_;
      verificationCode_ = other.verificationCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSecurityQuestionV3Request Clone() {
      return new GetSecurityQuestionV3Request(this);
    }

    /// <summary>Field number for the "encryptedLoginToken" field.</summary>
    public const int EncryptedLoginTokenFieldNumber = 1;
    private pb::ByteString encryptedLoginToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedLoginToken {
      get { return encryptedLoginToken_; }
      set {
        encryptedLoginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verificationCode" field.</summary>
    public const int VerificationCodeFieldNumber = 2;
    private string verificationCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerificationCode {
      get { return verificationCode_; }
      set {
        verificationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSecurityQuestionV3Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSecurityQuestionV3Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedLoginToken != other.EncryptedLoginToken) return false;
      if (VerificationCode != other.VerificationCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedLoginToken.Length != 0) hash ^= EncryptedLoginToken.GetHashCode();
      if (VerificationCode.Length != 0) hash ^= VerificationCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedLoginToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedLoginToken);
      }
      if (VerificationCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VerificationCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedLoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedLoginToken);
      }
      if (VerificationCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerificationCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSecurityQuestionV3Request other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedLoginToken.Length != 0) {
        EncryptedLoginToken = other.EncryptedLoginToken;
      }
      if (other.VerificationCode.Length != 0) {
        VerificationCode = other.VerificationCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedLoginToken = input.ReadBytes();
            break;
          }
          case 18: {
            VerificationCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSecurityQuestionV3Response : pb::IMessage<GetSecurityQuestionV3Response> {
    private static readonly pb::MessageParser<GetSecurityQuestionV3Response> _parser = new pb::MessageParser<GetSecurityQuestionV3Response>(() => new GetSecurityQuestionV3Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSecurityQuestionV3Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSecurityQuestionV3Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSecurityQuestionV3Response(GetSecurityQuestionV3Response other) : this() {
      securityQuestion_ = other.securityQuestion_;
      backupKeyDate_ = other.backupKeyDate_;
      salt_ = other.salt_;
      iterations_ = other.iterations_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSecurityQuestionV3Response Clone() {
      return new GetSecurityQuestionV3Response(this);
    }

    /// <summary>Field number for the "securityQuestion" field.</summary>
    public const int SecurityQuestionFieldNumber = 1;
    private string securityQuestion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecurityQuestion {
      get { return securityQuestion_; }
      set {
        securityQuestion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backupKeyDate" field.</summary>
    public const int BackupKeyDateFieldNumber = 2;
    private long backupKeyDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BackupKeyDate {
      get { return backupKeyDate_; }
      set {
        backupKeyDate_ = value;
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 3;
    private pb::ByteString salt_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Salt {
      get { return salt_; }
      set {
        salt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iterations" field.</summary>
    public const int IterationsFieldNumber = 4;
    private int iterations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Iterations {
      get { return iterations_; }
      set {
        iterations_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSecurityQuestionV3Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSecurityQuestionV3Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SecurityQuestion != other.SecurityQuestion) return false;
      if (BackupKeyDate != other.BackupKeyDate) return false;
      if (Salt != other.Salt) return false;
      if (Iterations != other.Iterations) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SecurityQuestion.Length != 0) hash ^= SecurityQuestion.GetHashCode();
      if (BackupKeyDate != 0L) hash ^= BackupKeyDate.GetHashCode();
      if (Salt.Length != 0) hash ^= Salt.GetHashCode();
      if (Iterations != 0) hash ^= Iterations.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SecurityQuestion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SecurityQuestion);
      }
      if (BackupKeyDate != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BackupKeyDate);
      }
      if (Salt.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Salt);
      }
      if (Iterations != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Iterations);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SecurityQuestion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityQuestion);
      }
      if (BackupKeyDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BackupKeyDate);
      }
      if (Salt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Salt);
      }
      if (Iterations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Iterations);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSecurityQuestionV3Response other) {
      if (other == null) {
        return;
      }
      if (other.SecurityQuestion.Length != 0) {
        SecurityQuestion = other.SecurityQuestion;
      }
      if (other.BackupKeyDate != 0L) {
        BackupKeyDate = other.BackupKeyDate;
      }
      if (other.Salt.Length != 0) {
        Salt = other.Salt;
      }
      if (other.Iterations != 0) {
        Iterations = other.Iterations;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SecurityQuestion = input.ReadString();
            break;
          }
          case 16: {
            BackupKeyDate = input.ReadInt64();
            break;
          }
          case 26: {
            Salt = input.ReadBytes();
            break;
          }
          case 32: {
            Iterations = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDataKeyBackupV3Request : pb::IMessage<GetDataKeyBackupV3Request> {
    private static readonly pb::MessageParser<GetDataKeyBackupV3Request> _parser = new pb::MessageParser<GetDataKeyBackupV3Request>(() => new GetDataKeyBackupV3Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDataKeyBackupV3Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataKeyBackupV3Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataKeyBackupV3Request(GetDataKeyBackupV3Request other) : this() {
      encryptedLoginToken_ = other.encryptedLoginToken_;
      verificationCode_ = other.verificationCode_;
      securityAnswerHash_ = other.securityAnswerHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataKeyBackupV3Request Clone() {
      return new GetDataKeyBackupV3Request(this);
    }

    /// <summary>Field number for the "encryptedLoginToken" field.</summary>
    public const int EncryptedLoginTokenFieldNumber = 1;
    private pb::ByteString encryptedLoginToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedLoginToken {
      get { return encryptedLoginToken_; }
      set {
        encryptedLoginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verificationCode" field.</summary>
    public const int VerificationCodeFieldNumber = 2;
    private string verificationCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerificationCode {
      get { return verificationCode_; }
      set {
        verificationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "securityAnswerHash" field.</summary>
    public const int SecurityAnswerHashFieldNumber = 3;
    private pb::ByteString securityAnswerHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SecurityAnswerHash {
      get { return securityAnswerHash_; }
      set {
        securityAnswerHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDataKeyBackupV3Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDataKeyBackupV3Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedLoginToken != other.EncryptedLoginToken) return false;
      if (VerificationCode != other.VerificationCode) return false;
      if (SecurityAnswerHash != other.SecurityAnswerHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedLoginToken.Length != 0) hash ^= EncryptedLoginToken.GetHashCode();
      if (VerificationCode.Length != 0) hash ^= VerificationCode.GetHashCode();
      if (SecurityAnswerHash.Length != 0) hash ^= SecurityAnswerHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedLoginToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedLoginToken);
      }
      if (VerificationCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VerificationCode);
      }
      if (SecurityAnswerHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SecurityAnswerHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedLoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedLoginToken);
      }
      if (VerificationCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerificationCode);
      }
      if (SecurityAnswerHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecurityAnswerHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDataKeyBackupV3Request other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedLoginToken.Length != 0) {
        EncryptedLoginToken = other.EncryptedLoginToken;
      }
      if (other.VerificationCode.Length != 0) {
        VerificationCode = other.VerificationCode;
      }
      if (other.SecurityAnswerHash.Length != 0) {
        SecurityAnswerHash = other.SecurityAnswerHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedLoginToken = input.ReadBytes();
            break;
          }
          case 18: {
            VerificationCode = input.ReadString();
            break;
          }
          case 26: {
            SecurityAnswerHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PasswordRules : pb::IMessage<PasswordRules> {
    private static readonly pb::MessageParser<PasswordRules> _parser = new pb::MessageParser<PasswordRules>(() => new PasswordRules());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PasswordRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasswordRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasswordRules(PasswordRules other) : this() {
      ruleType_ = other.ruleType_;
      match_ = other.match_;
      pattern_ = other.pattern_;
      description_ = other.description_;
      minimum_ = other.minimum_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasswordRules Clone() {
      return new PasswordRules(this);
    }

    /// <summary>Field number for the "ruleType" field.</summary>
    public const int RuleTypeFieldNumber = 1;
    private string ruleType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuleType {
      get { return ruleType_; }
      set {
        ruleType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 2;
    private bool match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 3;
    private string pattern_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pattern {
      get { return pattern_; }
      set {
        pattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minimum" field.</summary>
    public const int MinimumFieldNumber = 5;
    private int minimum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minimum {
      get { return minimum_; }
      set {
        minimum_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 6;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PasswordRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PasswordRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RuleType != other.RuleType) return false;
      if (Match != other.Match) return false;
      if (Pattern != other.Pattern) return false;
      if (Description != other.Description) return false;
      if (Minimum != other.Minimum) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RuleType.Length != 0) hash ^= RuleType.GetHashCode();
      if (Match != false) hash ^= Match.GetHashCode();
      if (Pattern.Length != 0) hash ^= Pattern.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Minimum != 0) hash ^= Minimum.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RuleType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RuleType);
      }
      if (Match != false) {
        output.WriteRawTag(16);
        output.WriteBool(Match);
      }
      if (Pattern.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Pattern);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Minimum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Minimum);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RuleType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuleType);
      }
      if (Match != false) {
        size += 1 + 1;
      }
      if (Pattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pattern);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Minimum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minimum);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PasswordRules other) {
      if (other == null) {
        return;
      }
      if (other.RuleType.Length != 0) {
        RuleType = other.RuleType;
      }
      if (other.Match != false) {
        Match = other.Match;
      }
      if (other.Pattern.Length != 0) {
        Pattern = other.Pattern;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Minimum != 0) {
        Minimum = other.Minimum;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RuleType = input.ReadString();
            break;
          }
          case 16: {
            Match = input.ReadBool();
            break;
          }
          case 26: {
            Pattern = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 40: {
            Minimum = input.ReadInt32();
            break;
          }
          case 50: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDataKeyBackupV3Response : pb::IMessage<GetDataKeyBackupV3Response> {
    private static readonly pb::MessageParser<GetDataKeyBackupV3Response> _parser = new pb::MessageParser<GetDataKeyBackupV3Response>(() => new GetDataKeyBackupV3Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDataKeyBackupV3Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.APIRequestReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataKeyBackupV3Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataKeyBackupV3Response(GetDataKeyBackupV3Response other) : this() {
      dataKeyBackup_ = other.dataKeyBackup_;
      dataKeyBackupDate_ = other.dataKeyBackupDate_;
      publicKey_ = other.publicKey_;
      encryptedPrivateKey_ = other.encryptedPrivateKey_;
      clientKey_ = other.clientKey_;
      encryptedSessionToken_ = other.encryptedSessionToken_;
      passwordRules_ = other.passwordRules_.Clone();
      passwordRulesIntro_ = other.passwordRulesIntro_;
      minimumPbkdf2Iterations_ = other.minimumPbkdf2Iterations_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataKeyBackupV3Response Clone() {
      return new GetDataKeyBackupV3Response(this);
    }

    /// <summary>Field number for the "dataKeyBackup" field.</summary>
    public const int DataKeyBackupFieldNumber = 1;
    private pb::ByteString dataKeyBackup_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataKeyBackup {
      get { return dataKeyBackup_; }
      set {
        dataKeyBackup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataKeyBackupDate" field.</summary>
    public const int DataKeyBackupDateFieldNumber = 2;
    private long dataKeyBackupDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DataKeyBackupDate {
      get { return dataKeyBackupDate_; }
      set {
        dataKeyBackupDate_ = value;
      }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 3;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedPrivateKey" field.</summary>
    public const int EncryptedPrivateKeyFieldNumber = 4;
    private pb::ByteString encryptedPrivateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedPrivateKey {
      get { return encryptedPrivateKey_; }
      set {
        encryptedPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientKey" field.</summary>
    public const int ClientKeyFieldNumber = 5;
    private pb::ByteString clientKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientKey {
      get { return clientKey_; }
      set {
        clientKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedSessionToken" field.</summary>
    public const int EncryptedSessionTokenFieldNumber = 6;
    private pb::ByteString encryptedSessionToken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedSessionToken {
      get { return encryptedSessionToken_; }
      set {
        encryptedSessionToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passwordRules" field.</summary>
    public const int PasswordRulesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Authentication.PasswordRules> _repeated_passwordRules_codec
        = pb::FieldCodec.ForMessage(58, global::Authentication.PasswordRules.Parser);
    private readonly pbc::RepeatedField<global::Authentication.PasswordRules> passwordRules_ = new pbc::RepeatedField<global::Authentication.PasswordRules>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authentication.PasswordRules> PasswordRules {
      get { return passwordRules_; }
    }

    /// <summary>Field number for the "passwordRulesIntro" field.</summary>
    public const int PasswordRulesIntroFieldNumber = 8;
    private string passwordRulesIntro_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PasswordRulesIntro {
      get { return passwordRulesIntro_; }
      set {
        passwordRulesIntro_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minimumPbkdf2Iterations" field.</summary>
    public const int MinimumPbkdf2IterationsFieldNumber = 9;
    private int minimumPbkdf2Iterations_;
    /// <summary>
    ///when EnforcementType.MINIMUM_PBKDF2_ITERATIONS exists
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumPbkdf2Iterations {
      get { return minimumPbkdf2Iterations_; }
      set {
        minimumPbkdf2Iterations_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDataKeyBackupV3Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDataKeyBackupV3Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataKeyBackup != other.DataKeyBackup) return false;
      if (DataKeyBackupDate != other.DataKeyBackupDate) return false;
      if (PublicKey != other.PublicKey) return false;
      if (EncryptedPrivateKey != other.EncryptedPrivateKey) return false;
      if (ClientKey != other.ClientKey) return false;
      if (EncryptedSessionToken != other.EncryptedSessionToken) return false;
      if(!passwordRules_.Equals(other.passwordRules_)) return false;
      if (PasswordRulesIntro != other.PasswordRulesIntro) return false;
      if (MinimumPbkdf2Iterations != other.MinimumPbkdf2Iterations) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataKeyBackup.Length != 0) hash ^= DataKeyBackup.GetHashCode();
      if (DataKeyBackupDate != 0L) hash ^= DataKeyBackupDate.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (EncryptedPrivateKey.Length != 0) hash ^= EncryptedPrivateKey.GetHashCode();
      if (ClientKey.Length != 0) hash ^= ClientKey.GetHashCode();
      if (EncryptedSessionToken.Length != 0) hash ^= EncryptedSessionToken.GetHashCode();
      hash ^= passwordRules_.GetHashCode();
      if (PasswordRulesIntro.Length != 0) hash ^= PasswordRulesIntro.GetHashCode();
      if (MinimumPbkdf2Iterations != 0) hash ^= MinimumPbkdf2Iterations.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataKeyBackup.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(DataKeyBackup);
      }
      if (DataKeyBackupDate != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DataKeyBackupDate);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PublicKey);
      }
      if (EncryptedPrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedPrivateKey);
      }
      if (ClientKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ClientKey);
      }
      if (EncryptedSessionToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(EncryptedSessionToken);
      }
      passwordRules_.WriteTo(output, _repeated_passwordRules_codec);
      if (PasswordRulesIntro.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PasswordRulesIntro);
      }
      if (MinimumPbkdf2Iterations != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MinimumPbkdf2Iterations);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataKeyBackup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataKeyBackup);
      }
      if (DataKeyBackupDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DataKeyBackupDate);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (EncryptedPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedPrivateKey);
      }
      if (ClientKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientKey);
      }
      if (EncryptedSessionToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedSessionToken);
      }
      size += passwordRules_.CalculateSize(_repeated_passwordRules_codec);
      if (PasswordRulesIntro.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PasswordRulesIntro);
      }
      if (MinimumPbkdf2Iterations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumPbkdf2Iterations);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDataKeyBackupV3Response other) {
      if (other == null) {
        return;
      }
      if (other.DataKeyBackup.Length != 0) {
        DataKeyBackup = other.DataKeyBackup;
      }
      if (other.DataKeyBackupDate != 0L) {
        DataKeyBackupDate = other.DataKeyBackupDate;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.EncryptedPrivateKey.Length != 0) {
        EncryptedPrivateKey = other.EncryptedPrivateKey;
      }
      if (other.ClientKey.Length != 0) {
        ClientKey = other.ClientKey;
      }
      if (other.EncryptedSessionToken.Length != 0) {
        EncryptedSessionToken = other.EncryptedSessionToken;
      }
      passwordRules_.Add(other.passwordRules_);
      if (other.PasswordRulesIntro.Length != 0) {
        PasswordRulesIntro = other.PasswordRulesIntro;
      }
      if (other.MinimumPbkdf2Iterations != 0) {
        MinimumPbkdf2Iterations = other.MinimumPbkdf2Iterations;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DataKeyBackup = input.ReadBytes();
            break;
          }
          case 16: {
            DataKeyBackupDate = input.ReadInt64();
            break;
          }
          case 26: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 34: {
            EncryptedPrivateKey = input.ReadBytes();
            break;
          }
          case 42: {
            ClientKey = input.ReadBytes();
            break;
          }
          case 50: {
            EncryptedSessionToken = input.ReadBytes();
            break;
          }
          case 58: {
            passwordRules_.AddEntriesFrom(input, _repeated_passwordRules_codec);
            break;
          }
          case 66: {
            PasswordRulesIntro = input.ReadString();
            break;
          }
          case 72: {
            MinimumPbkdf2Iterations = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
