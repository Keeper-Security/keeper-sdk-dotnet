name: Build Keeper SDK for .NET

on: 
#  push:
#    branches: 
#      - 'release_*'
  workflow_dispatch:
    inputs:
      cli:
        description: Build CLI package
        type: boolean
        required: false
        default: false
  
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Setup product versions
        run: |
          $ErrorView = 'NormalView'
          $branch = ($Env:GITHUB_REF -split '/')[2] 
          $comp = $branch -split '_'
          $sdkVersion = $comp[1]
          $packageVersion = $sdkVersion
          if ($comp[2]) {
            $packageVersion = $packageVersion + '-' + $comp[2]
          }

          $buildVersion = $sdkVersion + '.' + $Env:GITHUB_RUN_NUMBER

          echo "SDK_VERSION=${sdkVersion}" >> $Env:GITHUB_ENV
          echo "PACKAGE_VERSION=${packageVersion}" >> $Env:GITHUB_ENV
          echo "BUILD_VERSION=${buildVersion}" >> $Env:GITHUB_ENV
        shell: powershell      

      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
         dotnet-version: '8.0.x'

      - name: Setup Code Sign Cert
        shell: bash
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/Certificate_pkcs12.p12

      - name: Set variables
        shell: bash
        id: variables
        run: |
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:/Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
          echo "SM_CODE_SIGNING_CERT_SHA1_HASH=${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}" >> "$GITHUB_ENV"
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
          echo "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools" >> $GITHUB_PATH

      - name: Setup DigiCert SSM Tools
        uses: digicert/ssm-code-signing@b300bb7e8c2ab85257d660fe5b6c6374131ca2ef

      - name: Sync Certificates
        shell: cmd
        env:
          KEYPAIR_ALIAS: ${{ secrets.KEYPAIR_ALIAS }}
        run: |
          smctl healthcheck
          smctl windows certsync --keypair-alias=%KEYPAIR_ALIAS%

      - name: Build Keeper SDK Nuget package
        working-directory: ./KeeperSdk
        run: |
          if (Test-Path bin) { Remove-Item -Force -Recurse bin }
          dotnet build /P:Configuration=Release /P:Version=${Env:PACKAGE_VERSION} /P:AssemblyVersion=${Env:BUILD_VERSION} /P:FileVersion=${Env:BUILD_VERSION}
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.26100.0/x64/signtool.exe' sign /f ..\certificate.pfx /t "http://timestamp.digicert.com" /v /p "${{ secrets.PFX_PASS }}" /d ".NET Keeper SDK" "bin\Release\net452\KeeperSdk.dll"
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.26100.0/x64/signtool.exe' sign /f ..\certificate.pfx /t "http://timestamp.digicert.com" /v /p "${{ secrets.PFX_PASS }}" /d ".NET Keeper SDK" "bin\Release\netstandard2.0\KeeperSdk.dll"
          dotnet pack --no-build --no-restore --no-dependencies /P:Configuration=Release /P:Version=${Env:PACKAGE_VERSION} /P:IncludeSymbols=true /P:SymbolPackageFormat=snupkg
        shell: powershell      

      - name: Build .Net Commander
        working-directory: ./Commander
        run: |
          if (Test-Path bin) { Remove-Item -Force -Recurse bin }
          msbuild /T:Restore /P:Configuration=Release
          msbuild /T:Build /P:Configuration=Release /p:BuildProjectReferences=false
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.26100.0/x64/signtool.exe' sign /f ..\certificate.pfx /t "http://timestamp.digicert.com" /v /p "${{ secrets.PFX_PASS }}" /d ".NET Keeper SDK" "bin\Release\Commander.exe"
        shell: powershell      

      - name: Zip Commander
        run: |
          $params = @{
            Path = "Commander/bin/Release/*.exe", "Commander/bin/Release/Commander.exe.config", "Commander/bin/Release/*.dll", "OfflineStorageSqlite/bin/Release/netstandard2.0/OfflineStorageSqlite.dll"
            CompressionLevel = "Fastest"
            DestinationPath = "Commander-${Env:PACKAGE_VERSION}.zip"
          }
          Compress-Archive @params
        shell: powershell

      - name: Store SDK Nuget artifacts
        uses: actions/upload-artifact@v4
        with:
          name: KeeperSdk-${{ env.PACKAGE_VERSION }}-Nuget-Package
          path: |
            KeeperSdk/bin/Release/Keeper.Sdk.${{ env.PACKAGE_VERSION }}.nupkg
            KeeperSdk/bin/Release/Keeper.Sdk.${{ env.PACKAGE_VERSION }}.snupkg
          retention-days: 1

      - name: Store Commander artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Commander-${{ env.PACKAGE_VERSION }}
          path: Commander-${{ env.PACKAGE_VERSION }}.zip
          retention-days: 1
